<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HFN.Common</name>
    </assembly>
    <members>
        <member name="T:HFN.Common.Actors.Actor">
            <summary>
            Base class for objects utilizing a variety of behaviours.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorData">
            <summary>
            Contains ID and stat values for <see cref="T:HFN.Common.Actors.Actor"/> objects.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorIdCollection">
            <summary>
            Collection containing <see cref="T:HFN.Common.Actors.ActorId"/> values.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorStatus">
            <summary>
            Enum showing states an <see cref="T:HFN.Common.Actors.Actor"/> can be in.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorStatus.None">
            <summary>
            Default state value.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorStatus.Enabled">
            <summary>
            Actor is enabled.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorStatus.Spawning">
            <summary>
            Actor is in the process of spawning.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorStatus.Alive">
            <summary>
            Actor has spawned and is alive.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorStatus.Dying">
            <summary>
            Actor is in the process of dying.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorStatus.Dead">
            <summary>
            Actor is dead.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorStatus.Disabled">
            <summary>
            Actor is disabled.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorType">
            <summary>
            Enum used by <see cref="T:HFN.Common.Actors.Actor"/> to determine what kind of actor it is.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorType.None">
            <summary>
            No defined type.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorType.Ally">
            <summary>
            Actor is an ally actor to the player.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorType.Neutral">
            <summary>
            Actor is neutral towards the player.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorType.Enemy">
            <summary>
            Actor is an enemy to the player.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.AbilityModuleExtensions">
            <summary>
            Class containing extension methods for various Actor scripts.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorAbilityGroupId">
            <summary>
            Pseudo enum for determining <see cref="T:HFN.Common.Actors.ActorAbility"/> group IDs.
            </summary>
        </member>
        <member name="P:HFN.Common.Actors.ActorAbilityGroupId.None">
            <summary>
            ID representing no particular <see cref="T:HFN.Common.Actors.ActorAbilityId"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.Actors.ActorAbilityGroupId.All">
            <summary>
            ID representing all <see cref="T:HFN.Common.Actors.ActorAbilityGroupId"/> values.
            </summary>
        </member>
        <member name="P:HFN.Common.Actors.ActorAbilityGroupId.DefaultItems">
            <summary>
            Default IDs used by <see cref="T:HFN.Common.Actors.ActorAbilityGroupId"/> fields.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorAbilityId">
            <summary>
            Pseudo enum for determining <see cref="T:HFN.Common.Actors.ActorAbility"/> IDs.
            </summary>
        </member>
        <member name="P:HFN.Common.Actors.ActorAbilityId.Any">
            <summary>
            ID representing any specific <see cref="T:HFN.Common.Actors.ActorAbilityId"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.Actors.ActorAbilityId.None">
            <summary>
            ID representing no particular <see cref="T:HFN.Common.Actors.ActorAbilityId"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.Actors.ActorAbilityId.DefaultItems">
            <summary>
            Default IDs used by <see cref="T:HFN.Common.Actors.ActorAbilityId"/> fields.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorModule">
            <summary>
            Base class for modules used in the actor system.
            </summary>
        </member>
        <member name="F:HFN.Common.Actors.ActorModule.owner">
            <summary>
            The <see cref="T:HFN.Common.Actors.Actor"/> this module belongs to.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorModuleExtensions">
            <summary>
            Class containing extension methods for <see cref="T:HFN.Common.Actors.ActorModule"/>s.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorModuleLogic">
            <summary>
            Base class for scriptable object driven logic on <see cref="T:HFN.Common.Actors.ActorModule"/> derived classes.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.AnimationModule">
             Simple interface for triggering animations.
            
        </member>
        <member name="T:HFN.Common.Actors.AnimationModuleExtensions">
            <summary>
            Class containing extension methods for the Actor <see cref="M:HFN.Common.Actors.AnimationModuleExtensions.AnimationModule(HFN.Common.Actors.Actor)"/> system.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.BehaviourModuleExtensions">
            <summary>
            Class containing extension methods for the <see cref="M:HFN.Common.Actors.BehaviourModuleExtensions.BehaviourModule(HFN.Common.Actors.Actor)"/> class.
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorEffectModule">
            <summary>
            Class for managing effects applied to/removed from an actor
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.ActorStatChangeEffect">
             Examples: armor buff, movement slow, etc.
            
        </member>
        <member name="M:HFN.Common.Actors.DirectionalIndicator.UpdateTarget(UnityEngine.Transform)">
            <summary>
            Update the transform being pointed to.
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:HFN.Common.Actors.ModelModule">
            <summary>
            Convenience class for accessing the model object for an Actor
            </summary>
        </member>
        <member name="T:HFN.Common.Actors.RotationModifier">
             TODO: Properly create look rotation when up != Vector3.up;
            
        </member>
        <member name="T:HFN.Common.Actors.StatIdCollection">
            <summary>
            Collection containing <see cref="T:HFN.Common.Actors.StatId"/> values.
            </summary>
        </member>
        <member name="T:HFN.Common.AnimatorClipLength">
            <summary>
            Class used for convenient animation clip length referencing.
            </summary>
            \image html Animation/AnimatorClipLength01.png "Clip length with no assigned animator controller (top) and a controller and target clip selected (bottom)"
        </member>
        <member name="F:HFN.Common.AnimatorClipLength.controller">
            <summary>
            The controller to grab clip lengths from.
            </summary>
        </member>
        <member name="F:HFN.Common.AnimatorClipLength.length">
            <summary>
            The length of the target clip.
            </summary>
        </member>
        <member name="T:HFN.Common.AnimatorParamValue">
            <summary>
            Convenience class used to set AnimatorControllerParameter values.
            </summary>
            \image html Animation/AnimatorParamValue01.png "AnimatorParamValue fields with various values and targets. From top to bottom: Unassigned AnimatorController, int parameter on a standard AnimatorController, target controller with no parameters, trigger parameter on a AnimatorOverrideController"
        </member>
        <member name="F:HFN.Common.AnimatorParamValue.parameter">
            <summary>
            Wrapper for the target <see cref="T:UnityEngine.AnimatorControllerParameter"/>'s info.
            </summary>
        </member>
        <member name="F:HFN.Common.AnimatorParamValue.boolValue">
            <summary>
            The <see cref="T:System.Boolean"/> value to set the target parameter to.
            </summary>
        </member>
        <member name="F:HFN.Common.AnimatorParamValue.floatValue">
            <summary>
            The <see cref="T:System.Single"/> value to set the target parameter to.
            </summary>
        </member>
        <member name="F:HFN.Common.AnimatorParamValue.intValue">
            <summary>
            The <see cref="T:System.Int32"/> value to set the target parameter to.
            </summary>
        </member>
        <member name="M:HFN.Common.AnimatorParamValue.SetParameter(UnityEngine.Animator)">
            <summary>
            Sets the target parameter on the animator to the target value.
            </summary>
            <param name="animator">The <see cref="T:UnityEngine.Animator"/> to set a parameter value on.</param>
        </member>
        <member name="T:HFN.Common.AnimatorParameter">
            <summary>
            Class used for convenient AnimatorControllerParameter selection.
            </summary>
            \image html Animation/AnimatorParameter01.png "AnimatorParameter fields with various values and targets. From top to bottom: Unassigned AnimatorController, int parameter on a standard AnimatorController, target controller with no parameters, trigger parameter on a AnimatorOverrideController"
        </member>
        <member name="F:HFN.Common.AnimatorParameter.controller">
            <summary>
            The AnimatorController to pull parameters from.
            </summary>
        </member>
        <member name="F:HFN.Common.AnimatorParameter.name">
            <summary>
            The string name for the parameter. Use <see cref="F:HFN.Common.AnimatorParameter.id"/> for better performance.
            </summary>
        </member>
        <member name="F:HFN.Common.AnimatorParameter.id">
            <summary>
            The hash for the target parameter.
            </summary>
        </member>
        <member name="F:HFN.Common.AnimatorParameter.type">
            <summary>
            The type of the target parameter.
            </summary>
        </member>
        <member name="T:HFN.Common.SetParameters">
            <summary>
            <see cref="T:UnityEngine.StateMachineBehaviour"/> to bulk set animator parameter values.
            </summary>
        </member>
        <member name="T:HFN.Common.AssetBundleManager">
            <summary>
            Handles loading, unloading, and caching AssetBundles.
            </summary>
        </member>
        <member name="M:HFN.Common.AssetBundleManager.IsBundleLoaded(System.String)">
            <summary>
            Determines if a bundle is loaded at the specified bundleUrl.
            </summary>
        </member>
        <member name="M:HFN.Common.AssetBundleManager.LoadBundle(System.String,System.Action{UnityEngine.AssetBundle},System.Action)">
            <summary>
            Gets and loads the bundle at the specified Url.
            </summary>
        </member>
        <member name="M:HFN.Common.AssetBundleManager.LoadBundleAsset``1(System.String,System.String,System.Action{``0},System.Action,System.Boolean)">
            <summary>
            Get an asset of type T with a given name from a bundle.
            </summary>
        </member>
        <member name="M:HFN.Common.AssetBundleManager.LoadBundleAssets``1(System.String,System.Action{``0[]},System.Action,System.Boolean)">
            <summary>
            Get all assets of type T in a bundle.
            </summary>
        </member>
        <member name="M:HFN.Common.AssetBundleManager.UnloadBundle(System.String,System.Boolean,System.Action,System.Action)">
            <summary>
            Unloads the bundle at the specified URL if it has been loaded.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.AnimatorTargetAttribute">
            <summary>
            Base class for attributes that reference animators.
            </summary>
            <seealso cref="T:HFN.Common.Attributes.AnimatorClipLengthAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.AnimatorParamIdAttribute"/>
        </member>
        <member name="T:HFN.Common.Attributes.AnimatorClipLengthAttribute">
            <summary>
            Convenience attribute to allow selection of an <see cref="!:Animator"/>'s animation clip lengths.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.AnimatorParamIdAttribute">
            <summary>
            Convenience attribute to allow selection of an <see cref="T:UnityEngine.Animator"/>'s parameter IDs.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.AnimatorParamIdAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Convenience attribute to allow selection of an <see cref="T:UnityEngine.Animator"/>'s parameter IDs.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.AssetReferenceAttribute">
            <summary>
            Attribute that draws serialized classes that require a reference to an asset to function.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.AssetReferenceAttribute.targetProperty">
            <summary>
            The property that will be shown once an asset is referenced.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.AssetReferenceAttribute.targetAssetProperty">
            <summary>
            The property that references the target asset.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.BitMaskAttribute">
            <summary>
            Attribute to draw enum fields as bitmask fields.
            NOTE: As of 2019.x, Unity will draw enums with a <see cref="T:System.FlagsAttribute"/> as mask fields.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.BitMaskAttribute.enumType">
            <summary>
            The type for the enum being drawn as a mask field.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.BitMaskAttribute.#ctor(System.Type)">
            <summary>
            Attribute to draw enum fields as bitmask fields.
            Enum fields with this attribute should use power of two values starting with 1 (ie 1, 2, 4, 8, 16, etc)
            None and All values are optional, but must be set to 0 and ~0 respectively if declared.
            NOTE: As of 2019.x, Unity will draw enums with a <see cref="T:System.FlagsAttribute"/> as mask fields.
            </summary>
            <param name="enumType">The type for the enum being drawn as a mask field.</param>
        </member>
        <member name="T:HFN.Common.Attributes.TooltipHeaderAttribute">
            <summary>
            Attribute that draws a similar header to Unity's <see cref="T:UnityEngine.HeaderAttribute"/> with tooltip support.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.TooltipHeaderAttribute.label">
            <summary>
            The label for the header.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.TooltipHeaderAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute that draws a similar header to Unity's <see cref="T:UnityEngine.HeaderAttribute"/> with tooltip support.
            </summary>
            <param name="text">The text displayed on the header label.</param>
            <param name="tooltip">Text shown when hovering over the header label.</param>
        </member>
        <member name="T:HFN.Common.Attributes.HelpBoxAttribute">
            <summary>
            Attribute to display a help box in the inspector above a field.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.HelpBoxAttribute.message">
            <summary>
            The message to show in the help box.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.HelpBoxAttribute.heightMultiplier">
            <summary>
            How much to adjust the help box's height by so the message is fully displayed.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.HelpBoxAttribute.helpType">
            <summary>
            The type of help box to show.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.HelpBoxAttribute.richText">
            <summary>
            Allow rich text tags to be used in the help box.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.HelpBoxAttribute.#ctor(System.String,HFN.Common.HelpBoxMessageType)">
            <summary>
            Attribute to display a help box in the inspector above a field.
            </summary>
            <param name="message">The message to show in the help box.</param>
            <param name="type">The type of help box to show.</param>
        </member>
        <member name="M:HFN.Common.Attributes.HelpBoxAttribute.#ctor(System.String,System.Single,HFN.Common.HelpBoxMessageType)">
            <summary>
            Attribute to display a help box in the inspector above a field.
            </summary>
            <param name="message">The message to show in the help box.</param>
            <param name="heightMultiplier">How much to adjust the help box's height by so the message is fully displayed.</param>
            <param name="type">The type of help box to show.</param>
        </member>
        <member name="M:HFN.Common.Attributes.HelpBoxAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Attribute to display a help box in the inspector above a field.
            </summary>
            <param name="message">The message to show in the help box.</param>
            <param name="richText">Allow rich text tags to be used in the help box.</param>
        </member>
        <member name="M:HFN.Common.Attributes.HelpBoxAttribute.#ctor(System.String,System.Single,System.Boolean)">
            <summary>
            Attribute to display a help box in the inspector above a field.
            </summary>
            <param name="message">The message to show in the help box.</param>
            <param name="heightMultiplier">How much to adjust the help box's height by so the message is fully displayed.</param>
            <param name="richText">Allow rich text tags to be used in the help box.</param>
        </member>
        <member name="M:HFN.Common.Attributes.DropdownGroupAttribute.#ctor(System.Int32,System.String,System.String[])">
            <summary>
            Creates a dropdown that contains the specified subfields of a serialized class.
            </summary>
            <param name="dropdownIndex">Unique index number for the dropdown</param>
            <param name="title">Override title for the dropdown (if empty, will use variable name)</param>
            <param name="fields">String names of fields to be drawn</param>
        </member>
        <member name="T:HFN.Common.Attributes.FieldColorAttribute">
            <summary>
            Attribute that tints a field's background color.
            </summary>
            \image html Attributes/Misc/FieldColor01.png
        </member>
        <member name="F:HFN.Common.Attributes.FieldColorAttribute.color">
            <summary>
            The color to tint the target field's background.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.FieldColorAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Attribute that tints a field's background color.
            </summary>
            <param name="r">The red value to tint the field's background.</param>
            <param name="g">The green value to tint the field's background.</param>
            <param name="b">The blue value to tint the field's background.</param>
        </member>
        <member name="M:HFN.Common.Attributes.FieldColorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Attribute that tints a field's background color.
            </summary>
            <param name="r">The red value to tint the field's background.</param>
            <param name="g">The green value to tint the field's background.</param>
            <param name="b">The blue value to tint the field's background.</param>
            <param name="a">The alpha value to tint the field's background.</param>
        </member>
        <member name="T:HFN.Common.Attributes.NullColorAttribute">
            <summary>
            Attribute that tints a field's background color if its object reference is null.
            </summary>
            \image html Attributes/Misc/NullColor01.png
        </member>
        <member name="M:HFN.Common.Attributes.NullColorAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Attribute that tints a field's background color if the field object reference is null.
            </summary>
            <param name="r">The red value to tint the field's background if its object reference is null.</param>
            <param name="g">The green value to tint the field's background if its object reference is null.</param>
            <param name="b">The blue value to tint the field's background if its object reference is null.</param>
        </member>
        <member name="M:HFN.Common.Attributes.NullColorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Attribute that tints a field's background color if its object reference is null.
            </summary>
            <param name="r">The red value to tint the field's background if its object reference is null.</param>
            <param name="g">The green value to tint the field's background if its object reference is null.</param>
            <param name="b">The blue value to tint the field's background if its object reference is null.</param>
            <param name="a">The alpha value to tint the field's background if its object reference is null.</param>
        </member>
        <member name="T:HFN.Common.Attributes.FieldSizeAttribute">
            <summary>
            Attribute allowing the resizing of a property field. An animation curve field with width and height of 50f would show a square field for the curve field, for example.
            </summary>
            \image html Attributes/Misc/FieldSize01.png "Fields adjusted to various sizes. From top to bottom: Standard Field, Absolute size of 100 x 100, Absolute size of 100 x 50, Normalized size of 1 x 1, Normalized size of 0.5 x 1"
        </member>
        <member name="F:HFN.Common.Attributes.FieldSizeAttribute.width">
            <summary>
            The width of the field.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.FieldSizeAttribute.height">
            <summary>
            The height of the field.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.FieldSizeAttribute.normalized">
            <summary>
            Should the width and height values be treated as normalized values? (ie 1f would return the default width of the field while 0.5f would return half the default width)
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.FieldSizeAttribute.#ctor(System.Single,System.Boolean)">
            <summary>
            Attribute allowing the resizing of a property field. An animation curve field with width and height of 50f would show a square field for the curve field, for example.
            </summary>
            <param name="size">The width and height of the property field.</param>
            <param name="normalized">Should the width and height values be treated as normalized values? (ie 1f would return the default width of the field while 0.5f would return half the default width)</param>
        </member>
        <member name="M:HFN.Common.Attributes.FieldSizeAttribute.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Attribute allowing the resizing of a property field. An animation curve field with width and height of 50f would show a square field for the curve field, for example.
            </summary>
            <param name="width">The width of the field.</param>
            <param name="height">The height of the field.</param>
            <param name="normalized">Should the width and height values be treated as normalized values? (ie 1f would return the default width of the field while 0.5f would return half the default width)</param>
        </member>
        <member name="T:HFN.Common.Attributes.InterfaceFieldAttribute">
            <summary>
            Attribute that allows interfaces to be used as an accepted type for object fields.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.InterfaceFieldAttribute.interfaceType">
            <summary>
            The <see cref="T:System.Type"/> for the expected interface.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.InterfaceFieldAttribute.fieldType">
            <summary>
            The <see cref="T:System.Type"/> to use for the field's expected reference type. If null will use the target field's value type.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.InterfaceFieldAttribute.#ctor(System.Type)">
            <summary>
            Attribute that allows interfaces to be used as an accepted type for object fields.
            </summary>
            <param name="interfaceType">The <see cref="T:System.Type"/> for the expected interface.</param>
        </member>
        <member name="M:HFN.Common.Attributes.InterfaceFieldAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Attribute that allows interfaces to be used as an accepted type for object fields.
            </summary>
            <param name="interfaceType">The <see cref="T:System.Type"/> for the expected interface.</param>
            <param name="fieldType">The <see cref="T:System.Type"/> to use for the field's expected reference type.</param>
        </member>
        <member name="T:HFN.Common.Attributes.PrefabOnlyAttribute">
            <summary>
            Attribute that forces an object reference field to only accept references to prefab assets.
            This means that only prefab assets in the project folder will be accepted, while non-prefabs or prefab instances in the scene will not.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.PrefabOnlyAttribute.#ctor">
            <summary>
            Attribute that forces an object reference field to only accept references to prefab assets.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.HiddenAttribute">
            <summary>
            Hides a field's inspector visuals without hiding it from the inspector debug view.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.HiddenAttribute.#ctor">
            <summary>
            Hides a field's inspector visuals without hiding it from the inspector debug view.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.IndentAttribute">
            <summary>
            Attribute that indents a field.
            </summary>
            \image html Attributes/Misc/Indent01.png
        </member>
        <member name="F:HFN.Common.Attributes.IndentAttribute.indentLevel">
            <summary>
            The amount of indenting to apply to the field.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.IndentAttribute.#ctor(System.Int32)">
            <summary>
            Attribute that indents a field by the given amount.
            </summary>
            <param name="indentLevel">The indenting to apply to the field.</param>
        </member>
        <member name="T:HFN.Common.Attributes.DisplayLabelAttribute">
            <summary>
            Attribute allowing custom labels to be declared for fields.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.DisplayLabelAttribute.displayName">
            <summary>
            The displayed name for the property.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.DisplayLabelAttribute.tooltip">
            <summary>
            Tooltip text shown when the field label is hovered over.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.DisplayLabelAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute allowing custom labels to be declared for fields. This allows the fields to have names completely different from their variable names.
            </summary>
            <param name="displayName">The name shown for the field in the inspector.</param>
            <param name="tooltip">Text displayed when hovering over the field's label.</param>
        </member>
        <member name="T:HFN.Common.Attributes.NamelessAttribute">
            <summary>
            Attribute to make fields not use labels.
            Useful when array elements lack identifiers and use default labels like "Element 0".
            </summary>
            \image html Attributes/Misc/Nameless01.png "Standard int field (top) vs nameless int field (bottom)"
        </member>
        <member name="M:HFN.Common.Attributes.NamelessAttribute.#ctor">
            <summary>
            Attribute to make fields not use labels.
            Useful when array elements lack identifiers and use default labels like "Element 0".
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.LayerAttribute">
            <summary>
            Attribute that allows existing layer int values (0 - 31) to be selected in a dropdown.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.LayerAttribute.#ctor">
            <summary>
            Attribute that allows existing layer int values (0 - 31) to be selected in a dropdown.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.LanguageCodeAttribute">
            <summary>
            Attribute that draws <see cref="T:HFN.Common.LanguageCode"/> enums with their language names to make selection less confusing.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.LanguageCodeAttribute.#ctor">
            <summary>
            Attribute that draws <see cref="T:HFN.Common.LanguageCode"/> enums with their language names to make selection less confusing.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.MaterialIndexAttribute">
            <summary>
            Attribute allowing easy selection of a renderer's material indexes.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.MaterialIndexAttribute.rendererProperty">
            <summary>
            A renderer property to reference for material indexes.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MaterialIndexAttribute.#ctor(System.String)">
            <summary>
            Attribute allowing easy selection of a renderer's material indexes.
            </summary>
            <param name="rendererProperty">Name of the property containing a renderer reference.</param>
        </member>
        <member name="T:HFN.Common.Attributes.ShaderKeywordAttribute">
            <summary>
            Attribute allowing the selection of a material's shader keywords.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ShaderKeywordAttribute.targetField">
            <summary>
            Field containing a reference to a renderer or material.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ShaderKeywordAttribute.indexField">
            <summary>
            Field specifying material index on renderer.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ShaderKeywordAttribute.filterType">
            <summary>
            Determines what filter to apply to generated keywords (ie show only Color keywords)
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ShaderKeywordAttribute.#ctor(System.String,HFN.Common.ShaderPropertyType)">
            <summary>
            Attribute allowing the selection of a target material's shader keywords.
            </summary>
            <param name="materialField">Field containing a refence to a <see cref="T:UnityEngine.Material"/> to grab shader keywords for.</param>
            <param name="filterType">Filtering to apply to shown shader keywords.</param>
        </member>
        <member name="M:HFN.Common.Attributes.ShaderKeywordAttribute.#ctor(System.String,System.String,HFN.Common.ShaderPropertyType)">
            <summary>
            Attribute allowing the selection of a material's shader keywords on a specific target renderer.
            </summary>
            <param name="rendererField">Field containing a refence to a <see cref="T:UnityEngine.Renderer"/> to grab materials from.</param>
            <param name="materialIndexField">Field containing an integer index for the target material to grab shader keywords for.</param>
            <param name="filterType">Filtering to apply to shown shader keywords.</param>
        </member>
        <member name="T:HFN.Common.Attributes.NavMeshAreaMaskAttribute">
            <summary>
            Attribute allowing convenient selection of NavMeshArea mask values.
            </summary>
            \image html Attributes/NavMesh/NavMeshAreaMask01.png
        </member>
        <member name="M:HFN.Common.Attributes.NavMeshAreaMaskAttribute.#ctor">
            <summary>
            Attribute allowing convenient selection of NavMeshArea mask values.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.NavMeshAreaNameAttribute">
            <summary>
            Attribute allowing convenient selection of NavMeshArea names.
            </summary>
            \image html Attributes/NavMesh/NavMeshAreaName01.png
        </member>
        <member name="M:HFN.Common.Attributes.NavMeshAreaNameAttribute.#ctor">
            <summary>
            Attribute allowing convenient selection of NavMeshArea names.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.ClampedValueAttribute">
            <summary>
            Attribute used to clamp a field's value between two values.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ClampedValueAttribute.minFloat">
            <summary>
            The minimum float value to clamp the target value to.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ClampedValueAttribute.maxFloat">
            <summary>
            The maximum float value to clamp the target value to.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ClampedValueAttribute.minInt">
            <summary>
            The minimum int value to clamp the target value to.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ClampedValueAttribute.maxInt">
            <summary>
            The maximum int value to clamp the target value to.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedValueAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Attribute used to clamp a field's value between two float values.
            </summary>
            <param name="min">The minimum value to clamp the target value to.</param>
            <param name="max">The maximum value to clamp the target value to.</param>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedValueAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Attribute used to clamp a field's value between two int values.
            </summary>
            <param name="min">The minimum value to clamp the target value to.</param>
            <param name="max">The maximum value to clamp the target value to.</param>
        </member>
        <member name="T:HFN.Common.Attributes.MatchMaxAttribute">
            <summary>
            Attribute allowing a target number variable to drive the maximum value of a number field.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.MatchMaxAttribute.targetField">
            <summary>
            Target field to read max value from.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MatchMaxAttribute.#ctor(System.String)">
            <summary>
            Attribute allowing a target number variable to drive the maximum value of a number field.
            </summary>
            <param name="targetField">Target field to read max value from.</param>
        </member>
        <member name="T:HFN.Common.Attributes.MatchMinAttribute">
            <summary>
            Attribute allowing a target number variable to drive the minimum value of a number field.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.MatchMinAttribute.targetField">
            <summary>
            Target field to read min value from.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MatchMinAttribute.#ctor(System.String)">
            <summary>
            Attribute allowing a target number variable to drive the minimum value of a number field.
            </summary>
            <param name="targetField">Target field to read min value from.</param>
        </member>
        <member name="T:HFN.Common.Attributes.RangeWithinRangeAttribute">
            <summary>
            Attribute to allow <see cref="T:UnityEngine.Vector2"/> fields to be used to set a min and max value within a range.
            </summary>
            \image html Attributes/Ranges/RangeWithinRange01.png "Different types of ranges. Float (top) rounded float (middle) and int range (bottom)."
            <seealso cref="T:HFN.Common.Attributes.RangeWithinRangeIntAttribute"/>
        </member>
        <member name="F:HFN.Common.Attributes.RangeWithinRangeAttribute.min">
            <summary>
            Minimum possible value for the range.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.RangeWithinRangeAttribute.max">
            <summary>
            Maximum possible value for the range.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.RangeWithinRangeAttribute.useWholeNumbers">
            <summary>
            If true, the range will adjust values to whole numbers.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.RangeWithinRangeAttribute.#ctor">
            <summary>
            Attribute to allow <see cref="T:UnityEngine.Vector2"/> fields to be used to set a min and max value within a (0 - 1) range.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.RangeWithinRangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Attribute to allow <see cref="T:UnityEngine.Vector2"/> fields to be used to set a min and max value within a given range.
            </summary>
            <param name="min">Minimum possible value for the range.</param>
            <param name="max">Maximum possible value for the range.</param>
        </member>
        <member name="M:HFN.Common.Attributes.RangeWithinRangeAttribute.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Attribute to allow <see cref="T:UnityEngine.Vector2"/> fields to be used to set a min and max value within a given range.
            Can specify that values should be whole numbers.
            </summary>
            <param name="min">Minimum possible value for the range.</param>
            <param name="max">Maximum possible value for the range.</param>
            <param name="useWholeNumbers">Should the given range use whole numbers?</param>
        </member>
        <member name="T:HFN.Common.Attributes.RangeWithinRangeIntAttribute">
            <summary>
            Attribute to allow <see cref="T:UnityEngine.Vector2Int"/> fields to be used to set a min and max value within a range.
            </summary>
            \image html Attributes/Ranges/RangeWithinRange01.png "Different types of ranges. Float (top) rounded float (middle) and int range (bottom)."
            <seealso cref="T:HFN.Common.Attributes.RangeWithinRangeAttribute"/>
        </member>
        <member name="F:HFN.Common.Attributes.RangeWithinRangeIntAttribute.min">
            <summary>
            Minimum possible value for the range.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.RangeWithinRangeIntAttribute.max">
            <summary>
            Maximum possible value for the range.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.RangeWithinRangeIntAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Attribute to allow <see cref="T:UnityEngine.Vector2Int"/> fields to be used to set a min and max value within a given range.
            </summary>
            <param name="min">Minimum possible value for the range.</param>
            <param name="max">Maximum possible value for the range.</param>
        </member>
        <member name="T:HFN.Common.Attributes.ReadonlyAttribute">
            <summary>
            Attribute that makes a field visible, but not able to be adjusted.
            </summary>
            \image html Attributes/Misc/Readonly01.png "Standard int field (top) and readonly int field (bottom)."
        </member>
        <member name="M:HFN.Common.Attributes.ReadonlyAttribute.#ctor">
            <summary>
            Attribute that makes a field visible, but not able to be adjusted.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.AutoReferenceAttribute">
            <summary>
            Convenience attribute that allows an object reference field to automatically search for its target object reference.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.AutoReferenceAttribute.AutoReferenceType">
            <summary>
            Enum used to determine how auto references are searched for.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.AutoReferenceAttribute.AutoReferenceType.Current">
            <summary>
            Search the current object for component references.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.AutoReferenceAttribute.AutoReferenceType.Parents">
            <summary>
            Search parent objects for component references.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.AutoReferenceAttribute.AutoReferenceType.Children">
            <summary>
            Search child objects for component references.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.AutoReferenceAttribute.type">
            <summary>
            The <see cref="T:System.Type"/> to search for.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.AutoReferenceAttribute.searchType">
            <summary>
            Determines how the reference is searched for.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.AutoReferenceAttribute.#ctor(System.Type,HFN.Common.Attributes.AutoReferenceAttribute.AutoReferenceType)">
            <summary>
            Convenience attribute that allows an object reference field to automatically search for its target object reference.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object to search for.</param>
            <param name="searchType">Determines how the reference is searched for.</param>
        </member>
        <member name="T:HFN.Common.Attributes.AssemblyTagAttribute">
            <summary>
            Attribute that allows a string field to become a dropdown containing all loaded assembly names.
            </summary>
            \image html Attributes/Misc/AssemblyTag01.png
        </member>
        <member name="M:HFN.Common.Attributes.AssemblyTagAttribute.#ctor">
            <summary>
            Attribute that allows a string field to become a dropdown containing all loaded assembly names.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.BundleNameAttribute">
            <summary>
            Convenience attribute that allows easy string selection of asset bundle names.
            </summary>
            \image html Attributes/Misc/BundleName01.png
        </member>
        <member name="M:HFN.Common.Attributes.BundleNameAttribute.#ctor">
            <summary>
            Convenience attribute that allows easy string selection of asset bundle names.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.PasswordAttribute">
            <summary>
            Draws a string field as a password field. The password can be viewed by clicking the button to the right of the string field.
            </summary>
            \image html Attributes/StringFields/Password/Password01.png "Password fields with the password hidden (top) and visible (bottom)"
        </member>
        <member name="M:HFN.Common.Attributes.PasswordAttribute.#ctor">
            <summary>
            Draws a string field as a password field.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.FilePathAttribute">
            <summary>
            Convenience attribute to allow selection of file paths.
            </summary>
            \image html Attributes/Paths/Paths01.png "Folder and file paths in both absolute and relative (from the project root folder) paths"
            <seealso cref="T:HFN.Common.Attributes.FolderPathAttribute"/>
        </member>
        <member name="M:HFN.Common.Attributes.FilePathAttribute.#ctor(System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Convenience attribute to allow selection of file paths.
            </summary>
            <param name="relativePath">Is the path relative to the project folder, or an absolute path?</param>
            <param name="popupTitle">The title of the file select popup.</param>
            <param name="defaultFolder">The default location to open to.</param>
            <param name="extension">The file extension to look for.</param>
            <param name="browseButtonHint">The tooltip shown when hovering over the field's browse button.</param>
        </member>
        <member name="T:HFN.Common.Attributes.FolderPathAttribute">
            <summary>
            Convenience attribute to allow selection of folder paths.
            </summary>
            \image html Attributes/Paths/Paths01.png "Folder and file paths in both absolute and relative (from the project root folder) paths"
            <seealso cref="T:HFN.Common.Attributes.FilePathAttribute"/>
        </member>
        <member name="M:HFN.Common.Attributes.FolderPathAttribute.#ctor(System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Convenience attribute to allow selection of folder paths.
            </summary>
            <param name="relativePath">Is the path relative to the project folder, or an absolute path?</param>
            <param name="popupTitle">The title of the folder select popup.</param>
            <param name="defaultFolder">The default location to open to.</param>
            <param name="defaultFileName">Default name to show in the search field of the popup.</param>
            <param name="browseButtonHint">The tooltip shown when hovering over the field's browse button.</param>
        </member>
        <member name="T:HFN.Common.Attributes.SceneNameAttribute">
            <summary>
            Attribute that allows names of scenes contained in the current Build Settings to be selected from a dropdown.
            </summary>
            \image html Attributes/Scenes/SceneName01.png "Standard SceneName dropdown"
            \image html Attributes/Scenes/SceneName02.png "SceneName dropdown using path separators"
        </member>
        <member name="F:HFN.Common.Attributes.SceneNameAttribute.showPath">
            <summary>
            Should the dropdown values be the full path to the scene?
            Note: The full path is always stored, this just determines how the dropdown behaves.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.SceneNameAttribute.#ctor">
            <summary>
            Changes a string field to a dropdown populated by scenes in the current Build Settings.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.SceneNameAttribute.#ctor(System.Boolean)">
            <summary>
            Changes a string field to a dropdown populated by scenes in the current Build Settings.
            </summary>
            <param name="showPath">Should the dropdown values be the full path to the scene?</param>
        </member>
        <member name="T:HFN.Common.Attributes.TagAttribute">
            <summary>
            Attribute that allows existing Tags to be selected from a dropdown.
            </summary>
            \image html Attributes/Misc/Tag01.png
        </member>
        <member name="M:HFN.Common.Attributes.TagAttribute.#ctor">
            <summary>
            Attribute that allows existing Tags to be selected from a dropdown.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.TextureSimplePreviewAttribute">
            <summary>
            Adds a small preview area to see a field's assigned texture.
            </summary>
            \image html Attributes/Textures/SimpleTexturePreview01.png
        </member>
        <member name="M:HFN.Common.Attributes.TextureSimplePreviewAttribute.#ctor(System.Boolean)">
            <summary>
            Adds a small preview area to see a field's assigned texture.
            </summary>
            <param name="isSprite">Is the target texture is a sprite?</param>
        </member>
        <member name="T:HFN.Common.Attributes.TexturePreviewAttribute">
            <summary>
            Displays a texture preview of the field's assigned texture.
            </summary>
            \image html Attributes/Textures/TexturePreview01.png "Texture previews with 0.5 (top) and 0.0 x positioning with alpha support (bottom)"
        </member>
        <member name="F:HFN.Common.Attributes.TexturePreviewAttribute.width">
            <summary>
            Width of the image preview.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.TexturePreviewAttribute.height">
            <summary>
            Height of the image preview.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.TexturePreviewAttribute.xPosition">
            <summary>
            Normalized position of the preview texture under the propery (0 - 1, left - right)/
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.TexturePreviewAttribute.useTransparency">
            <summary>
            Should the preview take transparency into account when drawing?
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.TexturePreviewAttribute.#ctor(System.Single,System.Boolean)">
            <summary>
            Displays a texture preview of the field's assigned texture.
            </summary>
            <param name="xPosition">Normalized X position of the image along the inspector.</param>
            <param name="useTransparency">Should the preview use image alpha?</param>
        </member>
        <member name="M:HFN.Common.Attributes.TexturePreviewAttribute.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Displays a texture preview of the field's assigned texture.
            </summary>
            <param name="width">Width of the texture preview.</param>
            <param name="height">Height of the texture preview.</param>
            <param name="xPosition">Normalized X position of the image along the inspector.</param>
            <param name="useTransparency">Should the preview use image alpha?</param>
        </member>
        <member name="T:HFN.Common.Attributes.ArraySizeCheckAttribute">
            <summary>
            Attribute that can hide a field if the target array field's size doesn't match expected values.
            </summary>
            \image html Attributes/ValueChecks/ArraySizeCheck01.png "Array size checks for greater than 0 (array) and 1 (list)"
        </member>
        <member name="F:HFN.Common.Attributes.ArraySizeCheckAttribute.targetValue">
            <summary>
            The value that will make this field visible.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ArraySizeCheckAttribute.targetComparison">
            <summary>
            Determines how the target value is evaluated when checking if this field will be visible.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ArraySizeCheckAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Attribute that can hide a field if the target array field's size is zero.
            </summary>
            <param name="targetVariable">The target array variable to reference.</param>
            <param name="targetIsRoot">If false, the target variable is assumed to be a sibling variable of this variable.</param>
        </member>
        <member name="M:HFN.Common.Attributes.ArraySizeCheckAttribute.#ctor(System.String,System.Int32,HFN.Common.ComparisonType,System.Boolean)">
            <summary>
            Attribute that can hide a field if the target array field's size doesn't match expected values.
            </summary>
            <param name="targetVariable">The target array variable to reference.</param>
            <param name="targetValue">The array size that will make this field visible.</param>
            <param name="targetComparison">Determines how the target value is evaluated when checking if this field will be visible.</param>
            <param name="targetIsRoot">If false, the target variable is assumed to be a sibling variable of this variable.</param>
        </member>
        <member name="T:HFN.Common.Attributes.BoolCheckAttribute">
            <summary>
            Attribute that can hide a field if the target bool field doesn't match an expected value.
            </summary>
            \image html Attributes/ValueChecks/BoolCheck01.png
        </member>
        <member name="F:HFN.Common.Attributes.BoolCheckAttribute.targetValue">
            <summary>
            The value that will make this field visible.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.BoolCheckAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Attribute that can hide a field if the target bool field doesn't match an expected value.
            </summary>
            <param name="targetVariable">The target variable to reference.</param>
            <param name="targetValue">The value that will make this field visible.</param>
            <param name="targetIsRoot">If false, the target variable is assumed to be a sibling variable of this variable.</param>
        </member>
        <member name="T:HFN.Common.Attributes.MultiBoolCheckAttribute">
            <summary>
            Attribute for hiding a field if other fields' bool values are true or false.
            </summary>
            \image html Attributes/ValueChecks/MultiBoolCheck01.png
        </member>
        <member name="F:HFN.Common.Attributes.MultiBoolCheckAttribute.targetValues">
            <summary>
            The values that will make this field visible.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MultiBoolCheckAttribute.#ctor(System.String[])">
            <summary>
            Attribute for hiding a field if other fields' bool values are true.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiBoolCheckAttribute.#ctor(System.String[],System.Boolean)">
            <summary>
            Attribute for hiding a field if other fields' bool values are true or false.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValue">The value that will make this field visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiBoolCheckAttribute.#ctor(System.String[],System.Boolean[])">
            <summary>
            Attribute for hiding a field if other fields' bool values are true or false.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiBoolCheckAttribute.#ctor(System.String[],System.Boolean[],System.Boolean[])">
            <summary>
            Attribute for hiding a field if other fields' bool values are true or false.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
            <param name="targetIsRoots">If false, the target fields are assumed to be a sibling field to the field with this attribute. If true, will search for the fields from the root serialized object.</param>
        </member>
        <member name="T:HFN.Common.Attributes.MultiValueCheckAttribute">
            <summary>
            Base class for various multi value check attribtes.
            </summary>
            <seealso cref="T:HFN.Common.Attributes.NullCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.BoolCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.IntCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.FloatCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiNullCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiBoolCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiIntCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiFloatCheckAttribute"/>
        </member>
        <member name="F:HFN.Common.Attributes.MultiValueCheckAttribute.targetVariables">
            <summary>
            The variable fields to check values on. These can be paths to the fields.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.MultiValueCheckAttribute.targetIsRoots">
            <summary>
            If false, the target fields are assumed to be a sibling field to the field with this attribute. If true, will search for the fields from the root serialized object.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MultiValueCheckAttribute.#ctor(System.String[])">
            <summary>
            Base class for various multi value check attribtes.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiValueCheckAttribute.#ctor(System.String[],System.Boolean[])">
            <summary>
            Base class for various multi value check attribtes.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetIsRoots">If false, the target fields are assumed to be a sibling field to the field with this attribute. If true, will search for the fields from the root serialized object.</param>
        </member>
        <member name="T:HFN.Common.Attributes.ValueCheckAttribute">
            <summary>
            Base class for various value check attribtes.
            </summary>
            <seealso cref="T:HFN.Common.Attributes.NullCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.BoolCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.IntCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.FloatCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiNullCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiBoolCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiIntCheckAttribute"/>
            <seealso cref="T:HFN.Common.Attributes.MultiFloatCheckAttribute"/>
        </member>
        <member name="F:HFN.Common.Attributes.ValueCheckAttribute.targetVariable">
            <summary>
            The variable field to check values on. This can be a path to the field.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.ValueCheckAttribute.targetIsRoot">
            <summary>
            If false, the target field is assumed to be a sibling field to the field with this attribute. If true, will search for the field from the root serialized object.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ValueCheckAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Attribute used to hide a field if another field's object reference is null.
            </summary>
            <param name="targetVariable">The field to check for null values. This can be a path to the field.</param>
            <param name="targetIsRoot">If false, the target field is assumed to be a sibling field to the field with this attribute. If true, will search for the field from the root serialized object.</param>
        </member>
        <member name="T:HFN.Common.Attributes.FloatCheckAttribute">
            <summary>
            Attribute that can hide a field if the target float field doesn't match expected values.
            </summary>
            \image html Attributes/ValueChecks/FloatCheck01.png
        </member>
        <member name="F:HFN.Common.Attributes.FloatCheckAttribute.targetValue">
            <summary>
            The value that will make this field visible.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.FloatCheckAttribute.targetComparison">
            <summary>
            Determines how the target value is evaluated when checking if this field will be visible.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.FloatCheckAttribute.#ctor(System.String,System.Single,HFN.Common.ComparisonType,System.Boolean)">
            <summary>
            Attribute that can hide a field if the target float field doesn't match expected values.
            </summary>
            <param name="targetVariable">The target variable to reference.</param>
            <param name="targetValue">The value that will make this field visible.</param>
            <param name="targetComparison">Determines how the target value is evaluated when checking if this field will be visible.</param>
            <param name="targetIsRoot">If false, the target variable is assumed to be a sibling variable of this variable.</param>
        </member>
        <member name="T:HFN.Common.Attributes.MultiFloatCheckAttribute">
            <summary>
            Attribute for hiding a field if other fields float values don't meet expected parameters.
            </summary>
            \image html Attributes/ValueChecks/MultiFloatCheck01.png
        </member>
        <member name="F:HFN.Common.Attributes.MultiFloatCheckAttribute.targetValues">
            <summary>
            The values that will make this field visible.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.MultiFloatCheckAttribute.targetComparisons">
            <summary>
            Determines how the target values are evaluated when checking if this field will be visible.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MultiFloatCheckAttribute.#ctor(System.String[],System.Single,HFN.Common.ComparisonType)">
            <summary>
            Attribute for hiding a field if other fields' float values are equal to pased values.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValue">The value that will make this field visible.</param>
            <param name="comparisonType">Determines how the target values are evaluated when checking if this field will be visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiFloatCheckAttribute.#ctor(System.String[],System.Single[],HFN.Common.ComparisonType)">
            <summary>
            Attribute for hiding a field if other fields' float values are equal to pased values.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
            <param name="comparisonType">Determines how the target values are evaluated when checking if this field will be visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiFloatCheckAttribute.#ctor(System.String[],System.Single[],HFN.Common.ComparisonType[])">
            <summary>
            Attribute for hiding a field if other fields' float values meet expected parameters.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
            <param name="targetComparisons">Determines how the target values are evaluated when checking if this field will be visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiFloatCheckAttribute.#ctor(System.String[],System.Single[],HFN.Common.ComparisonType[],System.Boolean[])">
            <summary>
            Attribute for hiding a field if other fields' float values meet expected parameters.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
            <param name="targetComparisons">Determines how the target values are evaluated when checking if this field will be visible.</param>
            <param name="targetIsRoots">If false, the target fields are assumed to be a sibling field to the field with this attribute. If true, will search for the fields from the root serialized object.</param>
        </member>
        <member name="T:HFN.Common.Attributes.IntCheckAttribute">
            <summary>
            Attribute that can hide a field if the target int field doesn't match expected values.
            </summary>
            \image html Attributes/ValueChecks/IntCheck01.png "IntCheck for a basic int field"
            \image html Attributes/ValueChecks/IntCheck02.png "IntCheck for an enum field"
        </member>
        <member name="F:HFN.Common.Attributes.IntCheckAttribute.targetValue">
            <summary>
            The value that will make this field visible.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.IntCheckAttribute.targetComparison">
            <summary>
            Determines how the target value is evaluated when checking if this field will be visible.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.IntCheckAttribute.#ctor(System.String,System.Int32,HFN.Common.ComparisonType,System.Boolean)">
            <summary>
            Attribute that can hide a field if the target int field doesn't match expected values.
            </summary>
            <param name="targetVariable">The target variable to reference.</param>
            <param name="targetValue">The value that will make this field visible.</param>
            <param name="targetComparison">Determines how the target value is evaluated when checking if this field will be visible.</param>
            <param name="targetIsRoot">If false, the target variable is assumed to be a sibling variable of this variable.</param>
        </member>
        <member name="T:HFN.Common.Attributes.MultiIntCheckAttribute">
            <summary>
            Attribute for hiding a field if other fields' int or enum values don't meet expected parameters.
            </summary>
            \image html Attributes/ValueChecks/MultiIntCheck01.png "MultiIntCheck for basic int fields"
            \image html Attributes/ValueChecks/MultiIntCheck02.png "MultiIntCheck for enum fields" 
        </member>
        <member name="F:HFN.Common.Attributes.MultiIntCheckAttribute.targetValues">
            <summary>
            The values that will make this field visible.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.MultiIntCheckAttribute.targetComparisons">
            <summary>
            Determines how the target values are evaluated when checking if this field will be visible.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MultiIntCheckAttribute.#ctor(System.String[],System.Int32,HFN.Common.ComparisonType)">
            <summary>
            Attribute for hiding a field if other fields' int values are equal to pased values.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValue">The value that will make this field visible.</param>
            <param name="comparisonType">Determines how the target values are evaluated when checking if this field will be visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiIntCheckAttribute.#ctor(System.String[],System.Int32[],HFN.Common.ComparisonType)">
            <summary>
            Attribute for hiding a field if other fields' int values are equal to pased values.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
            <param name="comparisonType">Determines how the target values are evaluated when checking if this field will be visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiIntCheckAttribute.#ctor(System.String[],System.Int32[],HFN.Common.ComparisonType[])">
            <summary>
            Attribute for hiding a field if other fields' int values meet expected parameters.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
            <param name="targetComparisons">Determines how the target values are evaluated when checking if this field will be visible.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiIntCheckAttribute.#ctor(System.String[],System.Int32[],HFN.Common.ComparisonType[],System.Boolean[])">
            <summary>
            Attribute for hiding a field if other fields' int values meet expected parameters.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="targetValues">The values that will make this field visible.</param>
            <param name="targetComparisons">Determines how the target values are evaluated when checking if this field will be visible.</param>
            <param name="targetIsRoots">If false, the target fields are assumed to be a sibling field to the field with this attribute. If true, will search for the fields from the root serialized object.</param>
        </member>
        <member name="T:HFN.Common.Attributes.MultiNullCheckAttribute">
            <summary>
            Attribute for hiding a field if other fields' object references are null or not.
            </summary>
            \image html Attributes/ValueChecks/MultiNullCheck01.png
        </member>
        <member name="F:HFN.Common.Attributes.MultiNullCheckAttribute.showIfNull">
            <summary>
            If true, the field will be shown if the target reference is null. If false, the target field must be assigned a reference.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.MultiNullCheckAttribute.#ctor(System.String[],System.Boolean)">
            <summary>
            Attribute for hiding a field if other fields' object references are not null.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="showIfNull">If true, the field will be shown if the target reference is null. If false, the target field must be assigned a reference.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiNullCheckAttribute.#ctor(System.String[],System.Boolean[])">
            <summary>
            Attribute for hiding a field if other fields' object references are or are not null.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="showIfNull">If true, the field will be shown if the target reference is null. If false, the target field must be assigned a reference.</param>
        </member>
        <member name="M:HFN.Common.Attributes.MultiNullCheckAttribute.#ctor(System.String[],System.Boolean[],System.Boolean[])">
            <summary>
            Attribute for hiding a field if other fields' object references are or are not null.
            </summary>
            <param name="targetVariables">The fields to check for values. These can be paths to the fields.</param>
            <param name="showIfNull">If true, the field will be shown if the target reference is null. If false, the target field must be assigned a reference.</param>
            <param name="targetIsRoots">If false, the target fields are assumed to be a sibling field to the field with this attribute. If true, will search for the fields from the root serialized object.</param>
        </member>
        <member name="T:HFN.Common.Attributes.NullCheckAttribute">
            <summary>
            Attribute for hiding a field if another field's object reference is null or not.
            </summary>
            \image html Attributes/ValueChecks/NullCheck01.png
        </member>
        <member name="F:HFN.Common.Attributes.NullCheckAttribute.showIfNull">
            <summary>
            If true, the field will be shown if the target reference is null. If false, the target field must be assigned a reference.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.NullCheckAttribute.#ctor(System.String)">
            <summary>
            Attribute for hiding a field if another field's object references is or is not null.
            </summary>
            <param name="targetVariable">The field to check for null values. This can be a path to the field.</param>
        </member>
        <member name="M:HFN.Common.Attributes.NullCheckAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Attribute for hiding a field if other fields' object references are null.
            </summary>
            <param name="targetVariable">The field to check for null values. This can be a path to the field.</param>
            <param name="showIfNull">If true, the field will be shown if the target reference is null. If false, the target field must be assigned a reference.</param>
        </member>
        <member name="M:HFN.Common.Attributes.NullCheckAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Attribute for hiding a field if other fields' object references are null.
            </summary>
            <param name="targetVariable">The field to check for null values. This can be a path to the field.</param>
            <param name="showIfNull">If true, the field will be shown if the target reference is null. If false, the target field must be assigned a reference.</param>
            <param name="targetIsRoot">If false, the target field is assumed to be a sibling field to the field with this attribute. If true, will search for the field from the root serialized object.</param>
        </member>
        <member name="T:HFN.Common.Attributes.ClampedVectorAttribute">
            <summary>
            Attribute to clamp vector values to a set range.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedVectorAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Clamp all vector values between the specified min and max values.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedVectorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Clamp X and Y values between their specified min/max values.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedVectorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Clamp X, Y, and Z values between their specified min/max values.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedVectorAttribute.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Clamp X, Y, Z, and W values between their specified min/max values.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedVectorAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Clamp all vector values between the specified min and max values.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedVectorAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp X and Y values between their specified min/max values.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.ClampedVectorAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp X, Y, and Z values between their specified min/max values.
            </summary>
        </member>
        <member name="T:HFN.Common.Attributes.VectorRangeAttribute">
            <summary>
            Attribute that displays a vector with slider controls for its various values.
            </summary>
            \image html Attributes/Vectors/VectorRange01.png "Vector2 with identical clamp values and Vector3 with unique clamp values and foldout"
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.minX">
            <summary>
            The minimum value for the X value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.maxX">
            <summary>
            The maximum value for the X value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.minY">
            <summary>
            The minimum value for the Y value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.maxY">
            <summary>
            The maximum value for the Y value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.minZ">
            <summary>
            The minimum value for the Z value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.maxZ">
            <summary>
            The maximum value for the Z value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.minW">
            <summary>
            The minimum value for the W value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.maxW">
            <summary>
            The maximum value for the W value of the vector.
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.isInt">
            <summary>
            Are the min and max values integers?
            </summary>
        </member>
        <member name="F:HFN.Common.Attributes.VectorRangeAttribute.useFoldout">
            <summary>
            If true, allow the vector fields to be collapsed into a foldout.
            </summary>
        </member>
        <member name="M:HFN.Common.Attributes.VectorRangeAttribute.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Attribute that displays a vector with slider controls for its various values.
            </summary>
            <param name="min">The min value for all vector values.</param>
            <param name="max">The max value for all vector values.</param>
            <param name="useFoldout">If true, the vector can be collapsed and expanded with a foldout.</param>
        </member>
        <member name="M:HFN.Common.Attributes.VectorRangeAttribute.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Attribute that displays a <see cref="T:UnityEngine.Vector2"/> with slider controls for its X and Y values.
            </summary>
            <param name="minX">The min value for the X value.</param>
            <param name="maxX">The max value for the X value.</param>
            <param name="minY">The min value for the Y value.</param>
            <param name="maxY">The max value for the Y value.</param>
            <param name="useFoldout">If true, the vector can be collapsed and expanded with a foldout.</param>
        </member>
        <member name="M:HFN.Common.Attributes.VectorRangeAttribute.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Attribute that displays a <see cref="T:UnityEngine.Vector3"/> with slider controls for its X, Y, and Z values.
            </summary>
            <param name="minX">The min value for the X value.</param>
            <param name="maxX">The max value for the X value.</param>
            <param name="minY">The min value for the Y value.</param>
            <param name="maxY">The max value for the Y value.</param>
            <param name="minZ">The min value for the Z value.</param>
            <param name="maxZ">The max value for the Z value.</param>
            <param name="useFoldout">If true, the vector can be collapsed and expanded with a foldout.</param>
        </member>
        <member name="M:HFN.Common.Attributes.VectorRangeAttribute.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Attribute that displays a <see cref="T:UnityEngine.Vector4"/> with slider controls for its X, Y, Z, and W values.
            </summary>
            <param name="minX">The min value for the X value.</param>
            <param name="maxX">The max value for the X value.</param>
            <param name="minY">The min value for the Y value.</param>
            <param name="maxY">The max value for the Y value.</param>
            <param name="minZ">The min value for the Z value.</param>
            <param name="maxZ">The max value for the Z value.</param>
            <param name="minW">The min value for the W value.</param>
            <param name="maxW">The max value for the W value.</param>
            <param name="useFoldout">If true, the vector can be collapsed and expanded with a foldout.</param>
        </member>
        <member name="M:HFN.Common.Attributes.VectorRangeAttribute.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attribute that displays a vector with slider controls for its various values.
            </summary>
            <param name="min">The min value for all vector values.</param>
            <param name="max">The max value for all vector values.</param>
            <param name="useFoldout">If true, the vector can be collapsed and expanded with a foldout.</param>
        </member>
        <member name="M:HFN.Common.Attributes.VectorRangeAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attribute that displays a <see cref="T:UnityEngine.Vector2Int"/> with slider controls for its X and Y values.
            </summary>
            <param name="minX">The min value for the X value.</param>
            <param name="maxX">The max value for the X value.</param>
            <param name="minY">The min value for the Y value.</param>
            <param name="maxY">The max value for the Y value.</param>
            <param name="useFoldout">If true, the vector can be collapsed and expanded with a foldout.</param>
        </member>
        <member name="M:HFN.Common.Attributes.VectorRangeAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attribute that displays a <see cref="T:UnityEngine.Vector3Int"/> with slider controls for its X, Y, and Z values.
            </summary>
            <param name="minX">The min value for the X value.</param>
            <param name="maxX">The max value for the X value.</param>
            <param name="minY">The min value for the Y value.</param>
            <param name="maxY">The max value for the Y value.</param>
            <param name="minZ">The min value for the Z value.</param>
            <param name="maxZ">The max value for the Z value.</param>
            <param name="useFoldout">If true, the vector can be collapsed and expanded with a foldout.</param>
        </member>
        <member name="T:HFN.Common.HelpBoxMessageType">
            <summary>
            Runtime wrapper for Unity.Editor.MessageType enum.
            </summary>
        </member>
        <member name="F:HFN.Common.HelpBoxMessageType.None">
            <summary>
            Neutral message.
            </summary>
        </member>
        <member name="F:HFN.Common.HelpBoxMessageType.Info">
            <summary>
            Info message.
            </summary>
        </member>
        <member name="F:HFN.Common.HelpBoxMessageType.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:HFN.Common.HelpBoxMessageType.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:HFN.Common.MixerParameter">
            <summary>
            Allows convenient inspector based selection of exposed parameters in <see cref="T:UnityEngine.Audio.AudioMixer"/> assets.
            </summary>
            \image html Audio/MixerParameter01.png "Parameter field with no assigned AudioMixer (top) and an assigned AudioMixer with parameter selected."
        </member>
        <member name="F:HFN.Common.MixerParameter.mixer">
            <summary>
            The <see cref="T:UnityEngine.Audio.AudioMixer"/> to grab exposed parameters for.
            </summary>
        </member>
        <member name="F:HFN.Common.MixerParameter.parameter">
            <summary>
            The target parameter on the given <see cref="T:UnityEngine.Audio.AudioMixer"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.MixerParameter.#ctor">
            <summary>
            Constructor for a basic version of the class.
            </summary>
        </member>
        <member name="M:HFN.Common.MixerParameter.#ctor(System.String)">
            <summary>
            Constructor allowing the default target parameter to be set.
            </summary>
            <param name="defaultParameter">The default target parameter on the assigned <see cref="T:UnityEngine.Audio.AudioMixer"/>.</param>
        </member>
        <member name="T:HFN.Common.SimpleMusicPlayer">
            <summary>
            Allows for music to be played simply when a game object is enabled/disabled.
            </summary>
        </member>
        <member name="F:HFN.Common.SimpleMusicPlayer.playOnEnable">
            <summary>
            Play the target music when this game object is enabled.
            </summary>
        </member>
        <member name="F:HFN.Common.SimpleMusicPlayer.isRandom">
            <summary>
            If true, a random track will be used.
            </summary>
        </member>
        <member name="F:HFN.Common.SimpleMusicPlayer.fadeTime">
            <summary>
            How long it takes to crossfade the track in/out.
            </summary>
        </member>
        <member name="F:HFN.Common.SimpleMusicPlayer.tracks">
            <summary>
            Music to play.
            </summary>
        </member>
        <member name="M:HFN.Common.SimpleMusicPlayer.PlayMusic(System.Single)">
            <summary>
            Play a track from the array of music tracks.
            </summary>
            <param name="fadeTime">How long to crossfade the music in for.</param>
        </member>
        <member name="M:HFN.Common.SimpleMusicPlayer.StopMusic(System.Single)">
            <summary>
            Stop playing music.
            </summary>
            <param name="fadeTime">How long to crossfade the music out for.</param>
        </member>
        <member name="T:HFN.Common.SoundIdAttribute">
            <summary>
            Attribute that allows easy selection of <see cref="T:HFN.Common.Sound"/> data.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundIdAttribute.#ctor">
            <summary>
            Attribute that allows easy selection of <see cref="T:HFN.Common.Sound"/> data.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundIdAttribute.#ctor(HFN.Common.SoundType[])">
            <summary>
            Attribute that allows easy selection of <see cref="T:HFN.Common.Sound"/> data.
            </summary>
        </member>
        <member name="T:HFN.Common.ISoundData">
            <summary>
            Interface for classes containing data used in the <see cref="T:HFN.Common.SoundManager"/> system.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.Name">
            <summary>
            The display name of the sound.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.Id">
            <summary>
            The int ID of sound.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.Type">
            <summary>
            The grouping type of the sound.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.Clip">
            <summary>
            The AudioClip associated with the sound.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.InstanceLimit">
            <summary>
            Max number of this sound to allow at once. If the max number is reached, no new instances of this sound will play until older sounds are stopped.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.Loop">
            <summary>
            If true, the sound will loop until it is manually stopped.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.PitchRange">
            <summary>
            Pitch randomization range allowed when playing the sound. A pitch of 1 is the unaltered sound.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.Volume">
            <summary>
            Volume to play the sound at. This is the volume on the sound's AudioSource.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundData.SpatialBlend">
            <summary>
            Blend between 2D and 3D spacialization. 0.0 is 2D and 1.0 is 3D.
            </summary>
        </member>
        <member name="T:HFN.Common.ISoundDataCollection">
            <summary>
            Interface for <see cref="T:HFN.Common.ISoundData"/> collections.
            </summary>
        </member>
        <member name="P:HFN.Common.ISoundDataCollection.Sounds">
            <summary>
            Sounds contained in this collection.
            </summary>
        </member>
        <member name="M:HFN.Common.ISoundDataCollection.Sort">
            <summary>
            Sorts the collection's sounds alphabetically based on their type and name.
            </summary>
        </member>
        <member name="M:HFN.Common.ISoundDataCollection.GetSoundIds(HFN.Common.SoundType)">
            <summary>
            Returns a list of IDs for all sounds in the collection that match the given type.
            </summary>
            <param name="type">The type of sounds to get IDs for.</param>
        </member>
        <member name="M:HFN.Common.ISoundDataCollection.GetSoundNames(HFN.Common.SoundType)">
            <summary>
            Returns a list of names for all sounds in the collection that match the given type.
            </summary>
            <param name="type">The type of sounds to get names for.</param>
        </member>
        <member name="T:HFN.Common.GUIDSoundEffectSelector">
            <summary>
            Wrapper for <see cref="T:HFN.Common.GUIDSoundSelector"/> that only targets effect <see cref="T:HFN.Common.Sound"/> values.
            </summary>
            \image html Audio/SoundEffectSelector01.png
            <seealso cref="T:HFN.Common.GUIDSoundSelector"/>
        </member>
        <member name="T:HFN.Common.GUIDSoundMusicSelector">
            <summary>
            Wrapper for <see cref="T:HFN.Common.GUIDSoundSelector"/> that only targets music <see cref="T:HFN.Common.Sound"/> values.
            </summary>
            \image html Audio/SoundMusicSelector01.png
            <seealso cref="T:HFN.Common.GUIDSoundSelector"/>
        </member>
        <member name="T:HFN.Common.GUIDSoundSelector">
            <summary>
            Convenience class for selecting <see cref="T:HFN.Common.Sound"/> IDs in the inspector.
            Uses GUIDs instead of direct asset references to avoid loading SoundCollections into memory at runtime.
            </summary>
            \image html Audio/SoundSelector01.png
            <seealso cref="T:HFN.Common.GUIDSoundEffectSelector"/>
            <seealso cref="T:HFN.Common.GUIDSoundMusicSelector"/>
            <seealso cref="T:HFN.Common.GUIDSoundSpeechSelector"/>
        </member>
        <member name="F:HFN.Common.GUIDSoundSelector.id">
            <summary>
            The ID for the target sound.
            </summary>
        </member>
        <member name="F:HFN.Common.GUIDSoundSelector.collection">
            <summary>
            The collection containing the target sound.
            </summary>
        </member>
        <member name="P:HFN.Common.GUIDSoundSelector.Id">
            <summary>
            The ID for the target sound.
            </summary>
        </member>
        <member name="T:HFN.Common.GUIDSoundSpeechSelector">
            <summary>
            Wrapper for <see cref="T:HFN.Common.GUIDSoundSelector"/> that only targets speech <see cref="T:HFN.Common.Sound"/> values.
            </summary>
            \image html Audio/SoundSpeechSelector01.png
            <seealso cref="T:HFN.Common.GUIDSoundSelector"/>
        </member>
        <member name="T:HFN.Common.SoundEffectSelector">
            <summary>
            Wrapper for <see cref="T:HFN.Common.SoundSelector"/> that only targets effect <see cref="T:HFN.Common.Sound"/> values.
            </summary>
            \image html Audio/SoundEffectSelector01.png
            <seealso cref="T:HFN.Common.SoundSelector"/>
        </member>
        <member name="T:HFN.Common.SoundMusicSelector">
            <summary>
            Wrapper for <see cref="T:HFN.Common.SoundSelector"/> that only targets music <see cref="T:HFN.Common.Sound"/> values.
            </summary>
            \image html Audio/SoundMusicSelector01.png
            <seealso cref="T:HFN.Common.SoundSelector"/>
        </member>
        <member name="T:HFN.Common.SoundSelector">
            <summary>
            Convenience class for selecting <see cref="T:HFN.Common.Sound"/> IDs in the inspector.
            </summary>
            \image html Audio/SoundSelector01.png
            <seealso cref="T:HFN.Common.SoundEffectSelector"/>
            <seealso cref="T:HFN.Common.SoundMusicSelector"/>
            <seealso cref="T:HFN.Common.SoundSpeechSelector"/>
        </member>
        <member name="F:HFN.Common.SoundSelector.id">
            <summary>
            The ID for the target sound.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundSelector.collection">
            <summary>
            The collection containing the target sound.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundSelector.Id">
            <summary>
            The ID for the target sound.
            </summary>
        </member>
        <member name="T:HFN.Common.SoundSpeechSelector">
            <summary>
            Wrapper for <see cref="T:HFN.Common.SoundSelector"/> that only targets speech <see cref="T:HFN.Common.Sound"/> values.
            </summary>
            \image html Audio/SoundSpeechSelector01.png
            <seealso cref="T:HFN.Common.SoundSelector"/>
        </member>
        <member name="T:HFN.Common.SoundSource">
            <summary>
            Class handling playing <see cref="T:HFN.Common.Sound"/> values.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundSource.Play">
            <summary>
            Play the sound currently attached to the source.
            </summary>
        </member>
        <member name="T:HFN.Common.SoundSourceBase">
            <summary>
            Base class for sound sources used in the <see cref="T:HFN.Common.SoundManager"/> system.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundSourceBase.CurrentSound">
            <summary>
            The current <see cref="T:HFN.Common.ISoundData"/> assigned to this source.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundSourceBase.Volume">
            <summary>
            Volume for the attached <see cref="T:UnityEngine.AudioSource"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundSourceBase.Type">
            <summary>
            The <see cref="T:HFN.Common.SoundType"/> of the sound currently playing.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundSourceBase.IsPlaying">
            <summary>
            Returns true if the sound source is playing a sound.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundSourceBase.CurrentSoundId">
            <summary>
            The ID for the sound currently being played. Returns -1 if no sound is playing.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundSourceBase.CachedAudioSource">
            <summary>
            The <see cref="T:UnityEngine.AudioSource"/> attached to this object.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundSourceBase.Play">
            <summary>
            Play the sound currently attacked to the source.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundSourceBase.Play(HFN.Common.ISoundData,System.Single,UnityEngine.Audio.AudioMixerGroup)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="sound">The <see cref="T:HFN.Common.Sound"/> to play.</param>
            <param name="fadeTime">Length of time to crossfade from silence.</param>
            <param name="group"><see cref="T:UnityEngine.Audio.AudioMixerGroup"/> the sound should use.</param>
        </member>
        <member name="M:HFN.Common.SoundSourceBase.Stop(System.Single)">
            <summary>
            Stop the sound source.
            </summary>
            <param name="fadeTime">How long to crossfade out until the source actually stops.</param>
        </member>
        <member name="M:HFN.Common.SoundSourceBase.SetVolumeTo(System.Single,System.Single,System.Action)">
            <summary>
            Adjust the current volume for the sound source.
            </summary>
            <param name="volume">Volume to set the source to.</param>
            <param name="fadeTime">Fade time from the current volume to the target volume.</param>
            <param name="callback">A callback for when volume crossfading has finished.</param>
        </member>
        <member name="T:HFN.Common.Sound">
            <summary>
            Class containing data for sounds to play through the <see cref="T:HFN.Common.SoundManager"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.name">
            <summary>
            The name of the sound.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.id">
            <summary>
            The int ID of sound.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.type">
            <summary>
            The grouping type of the sound.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.clip">
            <summary>
            The AudioClip associated with the sound.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.instanceLimit">
            <summary>
            Max number of this sound to allow at once. If the max number is reached, no new instances of this sound will play until older sounds are stopped.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.loop">
            <summary>
            If true, the sound will loop until it is manually stopped.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.pitchRange">
            <summary>
            Pitch randomization range allowed when playing the sound. A pitch of 1 is the unaltered sound.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.volume">
            <summary>
            Volume to play the sound at. This is the volume on the sound's AudioSource.
            </summary>
        </member>
        <member name="F:HFN.Common.Sound.spatialBlend">
            <summary>
            Blend between 2D and 3D spacialization. 0.0 is 2D and 1.0 is 3D.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.Name">
            <summary>
            The display name of the sound.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.Id">
            <summary>
            The int ID of sound.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.Type">
            <summary>
            The grouping type of the sound.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.Clip">
            <summary>
            The AudioClip associated with the sound.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.InstanceLimit">
            <summary>
            Max number of this sound to allow at once. If the max number is reached, no new instances of this sound will play until older sounds are stopped.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.Loop">
            <summary>
            If true, the sound will loop until it is manually stopped.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.PitchRange">
            <summary>
            Pitch randomization range allowed when playing the sound. A pitch of 1 is the unaltered sound.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.Volume">
            <summary>
            Volume to play the sound at. This is the volume on the sound's AudioSource.
            </summary>
        </member>
        <member name="P:HFN.Common.Sound.SpatialBlend">
            <summary>
            Blend between 2D and 3D spacialization. 0.0 is 2D and 1.0 is 3D.
            </summary>
        </member>
        <member name="T:HFN.Common.SoundCollection">
            <summary>
            Collection of <see cref="T:HFN.Common.Sound"/> values.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundCollection.sounds">
            <summary>
            Data for various sounds that can be played via <see cref="T:HFN.Common.SoundManager"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundCollection.Sounds">
            <summary>
            Data for various sounds that can be played via <see cref="T:HFN.Common.SoundManager"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundCollection.Clear">
            <summary>
            Clears the list of <see cref="T:HFN.Common.Sound"/> data in this collection.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundCollection.Find(System.Int32)">
            <summary>
            Returns a <see cref="T:HFN.Common.Sound"/> with the given ID value or null if there are none with the specified ID.
            </summary>
            <param name="id">The int ID for the target <see cref="T:HFN.Common.Sound"/>.</param>
        </member>
        <member name="M:HFN.Common.SoundCollection.Find(System.String)">
            <summary>
            Returns a <see cref="T:HFN.Common.Sound"/> with the given name or null if there are none with the specified name.
            </summary>
            <param name="name">The string name for the target <see cref="T:HFN.Common.Sound"/>.</param>
        </member>
        <member name="M:HFN.Common.SoundCollection.Add(HFN.Common.Sound)">
            <summary>
            Adds a <see cref="T:HFN.Common.Sound"/> to the collection.
            </summary>
            <param name="sound">The <see cref="T:HFN.Common.Sound"/> to add to the collection.</param>
        </member>
        <member name="M:HFN.Common.SoundCollection.Remove(HFN.Common.Sound)">
            <summary>
            Removes a <see cref="T:HFN.Common.Sound"/> from the collection.
            </summary>
            <param name="sound">The <see cref="T:HFN.Common.Sound"/> to remove from the collection.</param>
        </member>
        <member name="M:HFN.Common.SoundCollection.Sort">
            <summary>
            Sorts the collection's sounds alphabetically based on their type and name.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundCollection.GetSoundIds(HFN.Common.SoundType)">
            <summary>
            Returns a list of IDs for all sounds in the collection that match the given type.
            </summary>
            <param name="type">The type of sounds to get IDs for.</param>
        </member>
        <member name="M:HFN.Common.SoundCollection.GetSoundNames(HFN.Common.SoundType)">
            <summary>
            Returns a list of names for all sounds in the collection that match the given type.
            </summary>
            <param name="type">The type of sounds to get names for.</param>
        </member>
        <member name="T:HFN.Common.SoundManager">
            <summary>
            Class that handles playing and cleaning up sounds.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.soundSourcePrefab">
            <summary>
            Prefab for sound sources used to play sounds.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.musicMixerGroup">
            <summary>
            AudioMixerGroup for music.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.musicVolumeParameter">
            <summary>
            Exposed parameter controlling the music mixer group's volume.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.musicVolume">
            <summary>
            Default volume for music sounds. 0 is full volume, -80 is complete silence.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.effectMixerGroup">
            <summary>
            AudioMixerGroup for sound effects.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.effectVolumeParameter">
            <summary>
            Exposed parameter controlling the SFX mixer group's volume.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.effectsVolume">
            <summary>
            Default volume for effect sounds. 0 is full volume, -80 is complete silence.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.speechMixerGroup">
            <summary>
            AudioMixerGroup for speech.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.speechVolumeParameter">
            <summary>
            Exposed parameter controlling the speech mixer group's volume.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.speechVolume">
            <summary>
            Default volume for speech sounds. 0 is full volume, -80 is complete silence.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.collections">
            <summary>
            The sound collections used by this manager.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundManager.DefaultCurve">
            <summary>
            The default curve used to evaluate volume adjustment along. By default this is a basic ease in-out curve.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundManager.MusicMixerGroup">
            <summary>
            AudioMixerGroup for music.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundManager.EffectMixerGroup">
            <summary>
            AudioMixerGroup for sound effects.
            </summary>
        </member>
        <member name="P:HFN.Common.SoundManager.SpeechMixerGroup">
            <summary>
            AudioMixerGroup for speech.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundManager.SetVolume(HFN.Common.SoundType,System.Single,System.Single,UnityEngine.AnimationCurve)">
            <summary>
            Sets the target type volume to the given value.
            </summary>
            <param name="volume">Float between -80 and 20 to set the volume to. 0 is the same as normal full volume while -80 is completely silent.</param>
            <param name="curve">Curve to evaluate the transition along. If null will use a default ease-in-out curve.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Play(System.Int32,System.Single,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Audio.AudioMixerGroup,HFN.Common.SoundSourceBase)">
            <summary>
            Play a sound with the given sound ID.
            </summary>
            <param name="soundId">Int ID for the desired sound.</param>
            <param name="fadeTime">Crossfade time for the sound.</param>
            <param name="parent"><see cref="T:UnityEngine.Transform"/> to parent the sound to.</param>
            <param name="position">Offset from the parent transform, in local space.</param>
            <param name="prefabOverride">[Optional] Prefab override to spawn insted of the default <see cref="T:HFN.Common.SoundSource"/> prefab.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Play``1(System.Int32,System.Single,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Audio.AudioMixerGroup,``0)">
            <summary>
            Play a sound with the given sound ID.
            </summary>
            <typeparam name="T">The expected type for the returned <see cref="T:HFN.Common.SoundSourceBase"/> reference.</typeparam>
            <param name="soundId">Int ID for the desired sound.</param>
            <param name="fadeTime">Crossfade time for the sound.</param>
            <param name="parent"><see cref="T:UnityEngine.Transform"/> to parent the sound to.</param>
            <param name="position">Offset from the parent transform, in local space.</param>
            <param name="prefabOverride">[Optional] Prefab override to spawn insted of the default <see cref="T:HFN.Common.SoundSource"/> prefab.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Play(System.String,System.Single,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Audio.AudioMixerGroup,HFN.Common.SoundSourceBase)">
            <summary>
            Play a sound with the given sound name.
            </summary>
            <param name="soundName">Name of the desired sound.</param>
            <param name="fadeTime">Crossfade time for the sound.</param>
            <param name="parent"><see cref="T:UnityEngine.Transform"/> to parent the sound to.</param>
            <param name="position">Offset from the parent transform, in local space.</param>
            <param name="prefabOverride">[Optional] Prefab override to spawn insted of the default <see cref="T:HFN.Common.SoundSource"/> prefab.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Play``1(System.String,System.Single,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Audio.AudioMixerGroup,``0)">
            <summary>
            Play a sound with the given sound name.
            </summary>
            <typeparam name="T">The expected type for the returned <see cref="T:HFN.Common.SoundSourceBase"/> reference.</typeparam>
            <param name="soundName">Name of the desired sound.</param>
            <param name="fadeTime">Crossfade time for the sound.</param>
            <param name="parent"><see cref="T:UnityEngine.Transform"/> to parent the sound to.</param>
            <param name="position">Offset from the parent transform, in local space.</param>
            <param name="prefabOverride">[Optional] Prefab override to spawn insted of the default <see cref="T:HFN.Common.SoundSource"/> prefab.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Play(HFN.Common.ISoundData,System.Single,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Audio.AudioMixerGroup,HFN.Common.SoundSourceBase)">
            <summary>
            Play the given sound.
            </summary>
            <param name="sound">Sound to play.</param>
            <param name="fadeTime">Crossfade time for the sound.</param>
            <param name="parent"><see cref="T:UnityEngine.Transform"/> to parent the sound to.</param>
            <param name="position">Offset from the parent transform, in local space.</param>
            <param name="prefabOverride">[Optional] Prefab override to spawn insted of the default <see cref="T:HFN.Common.SoundSourceBase"/> prefab.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Play``1(HFN.Common.ISoundData,System.Single,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Audio.AudioMixerGroup,``0)">
            <summary>
            Play the given sound.
            </summary>
            <typeparam name="T">The expected type for the returned <see cref="T:HFN.Common.SoundSourceBase"/> reference.</typeparam>
            <param name="sound">Sound to play.</param>
            <param name="fadeTime">Crossfade time for the sound.</param>
            <param name="parent"><see cref="T:UnityEngine.Transform"/> to parent the sound to.</param>
            <param name="position">Offset from the parent transform, in local space.</param>
            <param name="prefabOverride">[Optional] Prefab override to spawn insted of the default <see cref="T:HFN.Common.SoundSourceBase"/> prefab.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.IsPlaying(System.Int32)">
            <summary>
            Returns true if a <see cref="T:HFN.Common.SoundSourceBase"/> is playing a <see cref="T:HFN.Common.Sound"/> with the given ID.
            </summary>
            <param name="soundId">The int sound ID to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.IsPlaying(System.String)">
            <summary>
            Returns true if a <see cref="T:HFN.Common.SoundSourceBase"/> is playing a <see cref="T:HFN.Common.Sound"/> with the given name.
            </summary>
            <param name="soundName">The string name to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.IsPlaying(HFN.Common.Sound)">
            <summary>
            Returns true if a <see cref="T:HFN.Common.SoundSourceBase"/> is playing the given <see cref="T:HFN.Common.Sound"/>.
            </summary>
            <param name="sound">The <see cref="T:HFN.Common.Sound"/> to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.GetSoundCount(System.Int32)">
            <summary>
            Returns the amount of <see cref="T:HFN.Common.SoundSourceBase"/> objects playing a <see cref="T:HFN.Common.Sound"/> with the given sound ID.
            </summary>
            <param name="soundId">The int sound ID to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.GetSoundCount(System.String)">
            <summary>
            Returns the amount of <see cref="T:HFN.Common.SoundSourceBase"/> objects playing a <see cref="T:HFN.Common.Sound"/> with the given name.
            </summary>
            <param name="soundName">The string name to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.GetSoundCount(HFN.Common.Sound)">
            <summary>
            Returns the amount of <see cref="T:HFN.Common.SoundSourceBase"/> objects playing the given <see cref="T:HFN.Common.Sound"/>.
            </summary>
            <param name="soundName">The <see cref="T:HFN.Common.Sound"/> to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.AddCollection(HFN.Common.SoundCollection)">
            <summary>
            Adds a <see cref="T:HFN.Common.SoundCollection"/> to the sound manager if it does not already contain a reference for the collection.
            </summary>
            <param name="collection">The <see cref="T:HFN.Common.SoundCollection"/> to add to the collection manager.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.RemoveCollection(HFN.Common.SoundCollection)">
            <summary>
            Removes a <see cref="T:HFN.Common.SoundCollection"/> from the sound manager.
            </summary>
            <param name="collection">The <see cref="T:HFN.Common.SoundCollection"/> to remove.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.GetSoundIds(HFN.Common.SoundType)">
            <summary>
            Returns all sound IDs of the given <see cref="T:HFN.Common.SoundType"/>.
            </summary>
            <param name="type">The <see cref="T:HFN.Common.SoundType"/> to check for IDs.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.GetSoundNames(HFN.Common.SoundType)">
            <summary>
            Returns the names for all sounds of the given <see cref="T:HFN.Common.SoundType"/>.
            </summary>
            <param name="type">The <see cref="T:HFN.Common.SoundType"/> to check for IDs.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.GetSoundNameLabels(HFN.Common.SoundType)">
            <summary>
            Returns the names for all sounds of the given <see cref="T:HFN.Common.SoundType"/>. Mostly used for editor scripting.
            </summary>
            <param name="type">The <see cref="T:HFN.Common.SoundType"/> to check for IDs.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Find(System.Int32)">
            <summary>
            Returns the <see cref="T:HFN.Common.Sound"/> with the given sound ID.
            </summary>
            <param name="soundId">The int sound ID to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Find(System.String)">
            <summary>
            Returns the <see cref="T:HFN.Common.Sound"/> with the given name.
            </summary>
            <param name="soundName">The string name to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.FindSoundCollection(System.Int32)">
            <summary>
            Finds the first <see cref="T:HFN.Common.SoundCollection"/> containing a sound with the given ID.
            </summary>
            <param name="soundId">The sound ID to get the containing <see cref="T:HFN.Common.SoundCollection"/> of.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.FindSoundSource(System.Int32)">
            <summary>
            Returns the first <see cref="T:HFN.Common.SoundSourceBase"/> playing the given sound ID.
            </summary>
            <param name="soundId">The int sound ID to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.FindSoundSource(System.String)">
            <summary>
            Returns the first <see cref="T:HFN.Common.SoundSourceBase"/> playing the given sound name.
            </summary>
            <param name="soundName">The string sound name to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.FindSoundSource(HFN.Common.Sound)">
            <summary>
            Returns the first <see cref="T:HFN.Common.SoundSourceBase"/> playing the given <see cref="T:HFN.Common.Sound"/>.
            </summary>
            <param name="sound">The int sound ID to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.FindSoundSources(System.Int32)">
            <summary>
            Returns all <see cref="T:HFN.Common.SoundSourceBase"/> objects that are playing the given sound ID.
            </summary>
            <param name="soundId">The int sound ID to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.FindSoundSources(System.String)">
            <summary>
            Returns all <see cref="T:HFN.Common.SoundSourceBase"/> objects that are playing the given sound name.
            </summary>
            <param name="soundName">The string sound name to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.FindSoundSources(HFN.Common.Sound)">
            <summary>
            Returns all <see cref="T:HFN.Common.SoundSourceBase"/> objects that are playing the given <see cref="T:HFN.Common.Sound"/>.
            </summary>
            <param name="sound">The <see cref="T:HFN.Common.Sound"/> to search for.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Stop(System.Int32,System.Single)">
            <summary>
            Stop the first <see cref="T:HFN.Common.SoundSourceBase"/> playing the given sound ID.
            </summary>
            <param name="soundId">The int sound ID to search for.</param>
            <param name="fadeTime">Crossfade duration to fade out audio.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Stop(System.String,System.Single)">
            <summary>
            Stop the first <see cref="T:HFN.Common.SoundSourceBase"/> playing a <see cref="T:HFN.Common.Sound"/> with the given name.
            </summary>
            <param name="soundName">The string sound name to search for.</param>
            <param name="fadeTime">Crossfade duration to fade out audio.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.Stop(HFN.Common.Sound,System.Single)">
            <summary>
            Stop the first <see cref="T:HFN.Common.SoundSourceBase"/> playing the given <see cref="T:HFN.Common.Sound"/>.
            </summary>
            <param name="sound">The <see cref="T:HFN.Common.Sound"/> to search for.</param>
            <param name="fadeTime">Crossfade duration to fade out audio.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.StopAll(System.Int32,System.Single)">
            <summary>
            Stop all <see cref="T:HFN.Common.SoundSource"/> objects playing the given sound ID.
            </summary>
            <param name="soundId">The int sound ID to search for.</param>
            <param name="fadeTime">Crossfade duration to fade out audio.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.StopAll(System.String,System.Single)">
            <summary>
            Stop all <see cref="T:HFN.Common.SoundSourceBase"/> objects playing a <see cref="T:HFN.Common.Sound"/> with the given name.
            </summary>
            <param name="soundName">The string sound name to search for.</param>
            <param name="fadeTime">Crossfade duration to fade out audio.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.StopAll(HFN.Common.Sound,System.Single)">
            <summary>
            Stop all <see cref="T:HFN.Common.SoundSourceBase"/> objects playing the given <see cref="T:HFN.Common.Sound"/>.
            </summary>
            <param name="sound">The <see cref="T:HFN.Common.Sound"/> to search for.</param>
            <param name="fadeTime">Crossfade duration to fade out audio.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.StopAll(System.Single)">
            <summary>
            Stop all currently active <see cref="T:HFN.Common.SoundSourceBase"/> objects.
            </summary>
            <param name="fadeTime">Crossfade duration to fade out audio.</param>
        </member>
        <member name="M:HFN.Common.SoundManager.ClearNullSources">
            <summary>
            Removes null references to <see cref="T:HFN.Common.SoundSourceBase"/> objects that have been improperly deleted.
            </summary>
        </member>
        <member name="M:HFN.Common.SoundManager.ResetSingleton">
            <summary>
            Clear the <see cref="T:HFN.Common.PoolManager"/> pool containing this manager's <see cref="T:HFN.Common.SoundSourceBase"/> objects.
            </summary>
        </member>
        <member name="T:HFN.Common.SoundType">
            <summary>
            Determines what a sound is classified as.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundType.Effect">
            <summary>
            The sound is a sound effect.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundType.Music">
            <summary>
            The sound is music.
            </summary>
        </member>
        <member name="F:HFN.Common.SoundType.Speech">
            <summary>
            The sound is dialogue.
            </summary>
        </member>
        <member name="T:HFN.Common.Collection">
            <summary>
            Base class for scriptable objects containing a list of <see cref="T:HFN.Common.CollectionItem"/> values.
            </summary>
        </member>
        <member name="M:HFN.Common.Collection`1.Refresh">
            <summary>
            Clears and repopulates the collection's items based on the assigned CSV.
            </summary>
        </member>
        <member name="M:HFN.Common.Collection`1.SortItems">
            <summary>
            Sorts the list of items alphabetically.
            </summary>
        </member>
        <member name="M:HFN.Common.Collection`1.GetMaxHash(System.Int32)">
            <summary>
            Returns the current max hash value.
            </summary>
        </member>
        <member name="M:HFN.Common.Collection`1.GetNewIDHash(System.Int32)">
            <summary>
            Returns the current max hash value + 1.
            </summary>
        </member>
        <member name="T:HFN.Common.CollectionItem">
            <summary>
            Base class for values contained in <see cref="T:HFN.Common.Collection"/> scriptable objects.
            </summary>
        </member>
        <member name="F:HFN.Common.CollectionItem.name">
            <summary>
            The string name for this item.
            </summary>
        </member>
        <member name="F:HFN.Common.CollectionItem.hash">
            <summary>
            The int hash for this item.
            </summary>
        </member>
        <member name="P:HFN.Common.CollectionItem.SimpleName">
            <summary>
            Returns a substring of the item's name from the last index of a '/' char.
            IE: "NPCs/John" would return "John"
            </summary>
        </member>
        <member name="M:HFN.Common.CollectionItem.ToCsv">
            <summary>
            Return a CSV format string representing this item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:HFN.Common.CollectionManager">
            <summary>
            Holds references to various <see cref="T:HFN.Common.Collection"/> assets to allow convenient access to them.
            </summary>
        </member>
        <member name="T:HFN.Common.CollectionManagerUtility">
            <summary>
            Utility class for referencing all <see cref="T:HFN.Common.Collection"/> assets in the project.
            Mostly used for editor tooling. This code technically functions at runtime, but it will not actually do anything useful.
            It is part of the runtime code for class constuctor purposes and assigning <see cref="T:HFN.Common.CollectionItem"/> values when parsing data.
            </summary>
        </member>
        <member name="P:HFN.Common.CollectionManagerUtility.EditorCollections">
            <summary>
            <see cref="T:HFN.Common.Collection"/> assets in the project.
            </summary>
        </member>
        <member name="M:HFN.Common.CollectionManagerUtility.SetCollections(System.Collections.Generic.List{HFN.Common.Collection})">
            <summary>
            Set the currently referenced editor collections.
            </summary>
            <param name="collections">Collections in the project.</param>
        </member>
        <member name="M:HFN.Common.CollectionManagerUtility.Find``1(System.Predicate{``0})">
            <summary>
            Get a <see cref="T:HFN.Common.CollectionItem"/> of the given type that matches the given criteria.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the desired item.</typeparam>
            <param name="match">Criteria for the target item.</param>
        </member>
        <member name="M:HFN.Common.CollectionManagerUtility.Find``1(HFN.Common.CollectionItem)">
            <summary>
            Get a <see cref="T:HFN.Common.CollectionItem"/> of the given type that matches the given item.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the desired item.</typeparam>
            <param name="item">Item value to match.</param>
        </member>
        <member name="M:HFN.Common.CollectionManagerUtility.Find``1(System.Int32)">
            <summary>
            Get a <see cref="T:HFN.Common.CollectionItem"/> of the given type with the specified hash value.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the desired item.</typeparam>
            <param name="hash">Value for the target item's hash.</param>
        </member>
        <member name="M:HFN.Common.CollectionManagerUtility.Find``1(System.String)">
            <summary>
            Get a <see cref="T:HFN.Common.CollectionItem"/> of the given type with the specified name value.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the desired item.</typeparam>
            <param name="name">Value for the target item's name.</param>
        </member>
        <member name="M:HFN.Common.CollectionManagerUtility.FindAll``1(System.Collections.Generic.List{``0})">
            <summary>
            Find all <see cref="T:HFN.Common.CollectionItem"/> values of the given type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the desired items.</typeparam>
            <param name="defaultItems">[Optional] Default items to include in the returned list.</param>
        </member>
        <member name="T:HFN.Common.ConfigIdAttribute">
            <summary>
            Attribute allowing int fields to be drawn with a dropdown for <see cref="T:HFN.Common.ConfigId"/> values.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigIdAttribute.#ctor">
            <summary>
            Attribute allowing int fields to be drawn with a dropdown for <see cref="T:HFN.Common.ConfigId"/> values.
            </summary>
        </member>
        <member name="T:HFN.Common.ConfigurableObject">
            <summary>
            GameObject that listens to <see cref="T:HFN.Common.ConfigurableScene"/> and handles spawning objects when config values are updated.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.Contains(System.Int32)">
            <summary>
            Returns true if the given <see cref="T:HFN.Common.ConfigId"/> ID value is contained in this object's list of configurable object data.
            </summary>
            <param name="configId">The <see cref="T:HFN.Common.ConfigId"/> ID to check.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.Contains(System.String)">
            <summary>
            Returns true if the given <see cref="T:HFN.Common.ConfigId"/> name value is contained in this object's list of configurable object data.
            </summary>
            <param name="configName">The <see cref="T:HFN.Common.ConfigId"/> name to check.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.GetConfigData(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:HFN.Common.ConfigData"/> with the given <see cref="T:HFN.Common.ConfigId"/> ID or null if one is not found.
            </summary>
            <param name="configId">The <see cref="T:HFN.Common.ConfigId"/> ID to grab the value of.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.GetConfigData(System.String)">
            <summary>
            Returns a reference to the <see cref="T:HFN.Common.ConfigData"/> with the given <see cref="T:HFN.Common.ConfigId"/> name or null if one is not found.
            </summary>
            <param name="configName">The <see cref="T:HFN.Common.ConfigId"/> name to grab the value of.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.GetValue(System.Int32)">
            <summary>
            Returns the string value associated with the given <see cref="T:HFN.Common.ConfigId"/> ID.
            </summary>
            <param name="configId">The <see cref="T:HFN.Common.ConfigId"/> ID to grab the value of.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.GetValue(System.String)">
            <summary>
            Returns the string value associated with the given <see cref="T:HFN.Common.ConfigId"/> name.
            </summary>
            <param name="configName">The <see cref="T:HFN.Common.ConfigId"/> name to grab the value of.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.SetValue(System.Int32,System.String)">
            <summary>
            Sets the value associated with the given <see cref="T:HFN.Common.ConfigId"/> ID value.
            </summary>
            <param name="configId">The <see cref="T:HFN.Common.ConfigId"/> ID to grab the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableObject.SetValue(System.String,System.String)">
            <summary>
            Sets the value associated with the given <see cref="T:HFN.Common.ConfigId"/> name value.
            </summary>
            <param name="configName">The <see cref="T:HFN.Common.ConfigId"/> name to grab the value of.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:HFN.Common.ConfigurableScene">
            <summary>
            Class allowing values to be set at runtime that can affect various scripts like <see cref="T:HFN.Common.ConfigurableObject"/>.
            </summary>
        </member>
        <member name="E:HFN.Common.ConfigurableScene.OnConfigUpdated">
            <summary>
            Event fired when a config value is updated.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigurableScene.idCollection">
            <summary>
            The IDs used by default in this configurable scene.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigurableScene.currentConfigIds">
            <summary>
            The config IDs that have been set so far.
            </summary>
        </member>
        <member name="P:HFN.Common.ConfigurableScene.Instance">
            <summary>
            The instance of <see cref="T:HFN.Common.ConfigurableScene"/> in the current scene.
            </summary>
        </member>
        <member name="P:HFN.Common.ConfigurableScene.ConfigIds">
            <summary>
            Retruns a list containing all <see cref="T:HFN.Common.ConfigId"/> values referenced in this scene's <see cref="F:HFN.Common.ConfigurableScene.idCollection"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetNameFromId(System.Int32)">
            <summary>
            Returns the string name for the <see cref="T:HFN.Common.ConfigId"/> associated with the given ID.
            </summary>
            <param name="configId">The ID value for the target <see cref="T:HFN.Common.ConfigId"/>.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetIdFromName(System.String)">
            <summary>
            Returns the int ID for the <see cref="T:HFN.Common.ConfigId"/> associated with the given name, or 0 if the ID is not found.
            </summary>
            <param name="configName">The name value for the target <see cref="T:HFN.Common.ConfigId"/>.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetConfigIds">
            <summary>
            Returns a list of string values representing the <see cref="T:HFN.Common.ConfigId"/> values referenced by this config scene.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetConfigNames">
            <summary>
            Returns a list of string values representing the <see cref="T:HFN.Common.ConfigId"/> values referenced by this config scene.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetConfigIdValues(System.Int32)">
            <summary>
            Returns a list of values associated with the target <see cref="T:HFN.Common.ConfigId"/> ID value.
            </summary>
            <param name="idValue">ID for the target <see cref="T:HFN.Common.ConfigId"/> to grab values for.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetConfigIdValues(System.String)">
            <summary>
            Returns a list of values associated with the target <see cref="T:HFN.Common.ConfigId"/> name value.
            </summary>
            <param name="idValue">Name for the target <see cref="T:HFN.Common.ConfigId"/> to grab values for.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetConfigValue(System.Int32,System.String)">
            <summary>
            Gets the current value for the target <see cref="T:HFN.Common.ConfigId"/> ID value.
            </summary>
            <param name="id">ID for the target <see cref="T:HFN.Common.ConfigId"/> to get the value of.</param>
            <param name="defaultValue">Default value to set the target <see cref="T:HFN.Common.ConfigId"/> to if it doesn't already exist.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.GetConfigValue(System.String,System.String)">
            <summary>
            Gets the current value for the target <see cref="T:HFN.Common.ConfigId"/> name value.
            </summary>
            <param name="name">Name for the target <see cref="T:HFN.Common.ConfigId"/> to get the value of.</param>
            <param name="defaultValue">Default value to set the target <see cref="T:HFN.Common.ConfigId"/> to if it doesn't already exist.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.UpdateConfig(System.Int32,System.String)">
            <summary>
            Set the current value for the target <see cref="T:HFN.Common.ConfigId"/> ID value.
            </summary>
            <param name="id">ID for the target <see cref="T:HFN.Common.ConfigId"/> to set the value for.</param>
            <param name="value">Value to set the target <see cref="T:HFN.Common.ConfigId"/> to.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.UpdateConfig(System.String,System.String)">
            <summary>
            Set the current value for the target <see cref="T:HFN.Common.ConfigId"/> name value.
            </summary>
            <param name="name">Name for the target <see cref="T:HFN.Common.ConfigId"/> to set the value for.</param>
            <param name="value">Value to set the target <see cref="T:HFN.Common.ConfigId"/> to.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.SetConfigValue(System.Int32,System.String)">
            <summary>
            Set the current value for the target <see cref="T:HFN.Common.ConfigId"/> ID value.
            </summary>
            <param name="id">ID for the target <see cref="T:HFN.Common.ConfigId"/> to set the value for.</param>
            <param name="value">Value to set the target <see cref="T:HFN.Common.ConfigId"/> to.</param>
        </member>
        <member name="M:HFN.Common.ConfigurableScene.SetConfigValue(System.String,System.String)">
            <summary>
            Set the current value for the target <see cref="T:HFN.Common.ConfigId"/> name value.
            </summary>
            <param name="name">Name for the target <see cref="T:HFN.Common.ConfigId"/> to set the value for.</param>
            <param name="value">Value to set the target <see cref="T:HFN.Common.ConfigId"/> to.</param>
        </member>
        <member name="T:HFN.Common.ConfigData">
            <summary>
            Class containing various <see cref="T:HFN.Common.ConfigDataObject"/> values that should be spawned when the target config value is updated.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigData.configId">
            <summary>
            The ID associated with these values.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigData.defaultValue">
            <summary>
            The default value to use if the target ID is not already set.
            </summary>
        </member>
        <member name="P:HFN.Common.ConfigData.Value">
            <summary>
            The current config value for this data.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigData.Contains(System.String)">
            <summary>
            Returns true if the given value is used by any of this data's <see cref="T:HFN.Common.ConfigDataObject"/> values.
            </summary>
            <param name="value">The value to search object values for.</param>
        </member>
        <member name="M:HFN.Common.ConfigData.GetConfigObject(System.String)">
            <summary>
            Returns the <see cref="T:HFN.Common.ConfigDataObject"/> with a value matching the given value. (Case-insensitive)
            </summary>
            <param name="associatedValue">The value used by the target <see cref="T:HFN.Common.ConfigDataObject"/>.</param>
        </member>
        <member name="M:HFN.Common.ConfigData.SetConfigValue(System.String)">
            <summary>
            Sets the config value for this data and spawns/despawns the appropriate objects.
            </summary>
            <param name="value">The value to set for this data.</param>
        </member>
        <member name="T:HFN.Common.ConfigDataObject">
            <summary>
            Struct containing data for what objects to spawn when the target value is set for a <see cref="T:HFN.Common.ConfigId"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigDataObject.value">
            <summary>
            The string value for this config info.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigDataObject.target">
            <summary>
            The transform to parent the config object to.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigDataObject.configObject">
            <summary>
            The GameObject that is spawned.
            </summary>
        </member>
        <member name="P:HFN.Common.ConfigDataObject.Value">
            <summary>
            The string value for this config info.
            </summary>
        </member>
        <member name="P:HFN.Common.ConfigDataObject.SpawnedObject">
            <summary>
            The GameObject spawned for this value.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigDataObject.IsValid">
            <summary>
            Returns true if the info is properly set up and has a value and config object reference.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigDataObject.Show">
            <summary>
            Request the config object associated with with value from the pool manager.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigDataObject.Hide(System.Single)">
            <summary>
            Recycle the config object spawned from this value.
            </summary>
            <param name="delay">Delay before the object is recycled.</param>
        </member>
        <member name="T:HFN.Common.ConfigId">
            <summary>
            ID values used in <see cref="T:HFN.Common.ConfigurableScene"/> scripts.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigId.name">
            <summary>
            The human readable name for the ID.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigId.hash">
            <summary>
            The int hash for the ID.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigId.values">
            <summary>
            The default values associated with this ID.
            </summary>
        </member>
        <member name="P:HFN.Common.ConfigId.Name">
            <summary>
            The name associated with this ID.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigId.ToCsv">
            <summary>
            Returns a string representing this config's values as a CSV row.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigId.ToCsv(System.Int32)">
            <summary>
            Returns a string representing this config's values as a CSV row.
            </summary>
            <param name="valuesMax">The expected number of values. If there are less values than this, empty values will be appended at the end of the row.</param>
        </member>
        <member name="T:HFN.Common.ConfigIdCollection">
            <summary>
            Class containing data for IDs and values used in <see cref="T:HFN.Common.ConfigurableScene"/> scripts.
            </summary>
        </member>
        <member name="F:HFN.Common.ConfigIdCollection.csv">
            <summary>
            CSV file containing data for config IDs.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigIdCollection.GetNameFromId(System.Int32)">
            <summary>
            Gets the <see cref="T:HFN.Common.ConfigId"/> name associated with the given ID value. Returns an empty string if no matching name is found.
            </summary>
            <param name="configId">The ID of the target <see cref="T:HFN.Common.ConfigId"/>.</param>
        </member>
        <member name="M:HFN.Common.ConfigIdCollection.GetIdFromName(System.String)">
            <summary>
            Gets the <see cref="T:HFN.Common.ConfigId"/> ID associated with the given name value. Returns 0 if no matching ID is found.
            </summary>
            <param name="configName">The name of the target <see cref="T:HFN.Common.ConfigId"/>.</param>
        </member>
        <member name="M:HFN.Common.ConfigIdCollection.GetConfigIds">
            <summary>
            Generates a list of hashes for the <see cref="T:HFN.Common.ConfigId"/> values used by this collection.
            </summary>
        </member>
        <member name="M:HFN.Common.ConfigIdCollection.GetConfigNames">
            <summary>
            Generates a list of names for the <see cref="T:HFN.Common.ConfigId"/> values used by this collection.
            </summary>
        </member>
        <member name="T:HFN.Common.CoroutineManager">
            <summary>
            Class for handling coroutines for scripts that do not derive from MonoBehaviour.
            </summary>
        </member>
        <member name="F:HFN.Common.CoroutineManager.autoCleanup">
            <summary>
            Automatically clean up coroutines as they complete. Setting this to false means you must manually call stop on the manager when a coroutine is complete, but it will also give a small performance increase.
            </summary>
        </member>
        <member name="M:HFN.Common.CoroutineManager.StartCoroutineInstance(System.Collections.IEnumerator,System.Action)">
            <summary>
            Start and return a coroutine instance.
            </summary>
            <param name="coroutine">The <see cref="T:System.Collections.IEnumerator"/> to start.</param>
            <param name="stopAllCallback">A optional callback in case StopAllCoroutines is called on the manager while the given coroutine is running.</param>
        </member>
        <member name="M:HFN.Common.CoroutineManager.StopCoroutineInstance(UnityEngine.Coroutine)">
            <summary>
            Stop a currently running coroutine instance.
            </summary>
            <param name="coroutine">The <see cref="T:UnityEngine.Coroutine"/> to stop.</param>
        </member>
        <member name="M:HFN.Common.CoroutineManager.StopAllCoroutineInstances">
            <summary>
            Stop all coroutines currently running on the CoroutineManager.
            </summary>
        </member>
        <member name="T:HFN.Common.CsvParser">
            <summary>
            Class for parsing CSV files into a usable data format.
            </summary>
        </member>
        <member name="M:HFN.Common.CsvParser.Parse(System.String)">
            <summary>
            Parse the given CSV string into a usable format.
            </summary>
            <param name="text">The CSV string to parse.</param>
        </member>
        <member name="M:HFN.Common.FloatRange.GetValue(System.Single)">
            <summary>
            Gets the lerped value from min to max based on t.
            </summary>
        </member>
        <member name="M:HFN.Common.FloatRange.GetInvertedValue(System.Single)">
            <summary>
            Gets the lerped value from max to min based on t.
            </summary>
        </member>
        <member name="M:HFN.Common.FloatRangeAttribute.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a float range with min and max values.
            Precision specifies how many decimal places to round to.
            </summary>
        </member>
        <member name="M:HFN.Common.FloatRangeInverted.GetValue(System.Single)">
            <summary>
            Gets the lerped value from max to min based on t.
            </summary>
        </member>
        <member name="M:HFN.Common.FloatRangeInverted.GetInvertedValue(System.Single)">
            <summary>
            Gets the lerped value from min to max based on t.
            </summary>
        </member>
        <member name="M:HFN.Common.FloatRangeInvertedAttribute.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Creates an inverted float range with min and max values.
            Precision specifies how many decimal places to round to.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonArrayOld">
            <summary>
            Represents an ordered set of <see cref="T:HFN.Common.JsonValueOld"/>s.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Collections.Generic.List{HFN.Common.JsonValueOld})">
            <summary>
            Public constructor that accepts a generic list of JSONValue objects.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Public constructor that accepts a list of bools.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Collections.Generic.List{System.Single})">
            <summary>
            Public constructor that accepts a list of bools.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
            Public constructor that accepts a list of bools.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Collections.Generic.List{System.Byte})">
            <summary>
            Public constructor that accepts a list of bytes.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Public constructor that accepts a list of bools.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(HFN.Common.JsonValueOld[])">
            <summary>
            Public constructor that accepts a generic array of JSONValue objects.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Boolean[])">
            <summary>
            Public constructor that accepts an array of bools.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Single[])">
            <summary>
            Public constructor that accepts an array of floats.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Int32[])">
            <summary>
            Public constructor that accepts an array of ints.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.Byte[])">
            <summary>
            Public constructor that accepts an Array of bytes.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor(System.String[])">
            <summary>
            Public constructor that accepts an array of strings.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.#ctor">
            <summary>
            Empty public constructor. Use this method in conjunction with
            the Add method to populate the internal array of elements.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.Add(HFN.Common.JsonValueOld)">
            <summary>
            Adds a JsonValue to the internal object array.  Values are checked to 
            ensure no duplication occurs in the internal array.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.Remove(HFN.Common.JsonValueOld)">
            <summary>
            Remove the specified JsonValue if it is in the internal object array.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetStringValueAtIndex(System.Int32)">
            <summary>
            Gets the JsonString at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetIntValueAtIndex(System.Int32)">
            <summary>
            Gets the int value at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetFloatValueAtIndex(System.Int32)">
            <summary>
            Gets the float value at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetBoolValueAtIndex(System.Int32)">
            <summary>
            Gets the bool value at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetValueAtIndex(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetStringAtIndex(System.Int32)">
            <summary>
            Gets the JsonString at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetNumberAtIndex(System.Int32)">
            <summary>
            Gets the JsonNumber at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetBoolAtIndex(System.Int32)">
            <summary>
            Gets the JsonBool at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetObjectAtIndex(System.Int32)">
            <summary>
            Gets the JsonObject at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.GetArrayAtIndex(System.Int32)">
            <summary>
            Gets the JsonArray at the specified index.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.CollectionToFormattedString(System.Boolean)">
            <summary>
            Returns the entire collection as a string in JSON-compliant format, with indentation for readability.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonArrayOld.CollectionToString">
            <summary>
            Returns the entire collection as a string in JSON-compliant format.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonObjectOld">
            <summary>
            Represents an unordered set of name / <see cref="T:HFN.Common.JsonValueOld"/> pairs.
            </summary>
        </member>
        <member name="P:HFN.Common.JsonObjectOld.Names">
            <summary>
            String values for the keys contained in the object.
            </summary>
        </member>
        <member name="P:HFN.Common.JsonObjectOld.Values">
            <summary>
            Values contained in the object.
            </summary>
        </member>
        <member name="P:HFN.Common.JsonObjectOld.IsEmpty">
            <summary>
            Returns true if the object contains no values.
            </summary>
        </member>
        <member name="P:HFN.Common.JsonObjectOld.Length">
            <summary>
            Number of elements contained in the object.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.#ctor(System.Collections.Generic.Dictionary{HFN.Common.JsonStringOld,HFN.Common.JsonValueOld})">
            <summary>
            Public constructor that accepts a Dictionary of name/value pairs.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.#ctor(System.Collections.Generic.Dictionary{System.String,HFN.Common.JsonValueOld})">
            <summary>
            Public constructor that accepts a Dictionary of name/value pairs.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{HFN.Common.JsonValueOld})">
            <summary>
            Public constructor that accepts a Dictionary of name/value pairs.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.#ctor">
            <summary>
            Empty public constructor. Use this method in conjunction with
            the Add method to populate the internal dictionary of name/value pairs.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.HasField(System.String)">
            <summary>
            Returns true if the <see cref="T:HFN.Common.JsonObjectOld"/> contains a field with the given name.
            </summary>
            <param name="id">The name of the field to check for.</param>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.IsString(System.String)">
            <summary>
            Checks if a value at the given id is a JsonString.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.IsNumber(System.String)">
            <summary>
            Checks if a value at the given id is a JsonNumber.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.IsBool(System.String)">
            <summary>
            Checks if a value at the given id is a JsonBool.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.IsArray(System.String)">
            <summary>
            Checks if a value at the given id is a JsonArray.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.IsObject(System.String)">
            <summary>
            Checks if a value at the given id is a JsonObject.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.IsNull(System.String)">
            <summary>
            Checks if a value at the given id is null.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetAtIndex(System.Int32)">
            <summary>
            Gets the object's value at the given index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetStringAtIndex(System.Int32)">
            <summary>
            Gets the object's string value at the given index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetNumberAtIndex(System.Int32)">
            <summary>
            Gets the object's number value at the given index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetBoolAtIndex(System.Int32)">
            <summary>
            Gets the object's bool value at the given index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetObjectAtIndex(System.Int32)">
            <summary>
            Gets the object's object value at the given index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetArrayAtIndex(System.Int32)">
            <summary>
            Gets the object's array value at the given index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetStringValue(System.String)">
            <summary>
            Gets the string value of the JsonString at the given index
            Returns an empty string if there is no JsonString at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetStringValue(System.String,System.String)">
            <summary>
            Gets the string value of the JsonString at the given index
            Returns a default value and adds the value to the object if there is no JsonString at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetIntValue(System.String)">
            <summary>
            Gets the int value of the JsonNumber at the given index
            Returns 0 if there is no JsonNumber at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetIntValue(System.String,System.Int32)">
            <summary>
            Gets the int value of the JsonNumber at the given index
            Returns a default value and adds the value to the object if there is no JsonNumber at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetFloatValue(System.String)">
            <summary>
            Gets the float value of the JsonNumber at the given index
            Returns 0.0 if there is no JsonNumber at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetFloatValue(System.String,System.Single)">
            <summary>
            Gets the float value of the JsonNumber at the given index
            Returns a default value and adds the value to the object if there is no JsonNumber at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetBoolValue(System.String)">
            <summary>
            Gets the bool value of the JsonBool at the given index
            Returns false if there is no JsonBool at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetBoolValue(System.String,System.Boolean)">
            <summary>
            Gets the bool value of the JsonBool at the given index
            Returns a default value and adds the value to the object if there is no JsonBool at the index
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetString(System.String)">
            <summary>
            Gets the JsonString at element [id]
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetString(System.String,System.String)">
            <summary>
            Gets the JsonString at element [id], adds a default element if the JsonString is not present
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetNumber(System.String)">
            <summary>
            Gets the JsonNumber at element [id]
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetNumber(System.String,System.Int32)">
            <summary>
            Gets the JsonNumber at element [id], adds a default element if the value is not found
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetNumber(System.String,System.Single)">
            <summary>
            Gets the JsonNumber at element [id], adds a default element if the value is not found
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetBool(System.String)">
            <summary>
            Gets the JsonBool at element [id]
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetBool(System.String,System.Boolean)">
            <summary>
            Gets the JsonBool at element [id], adds a default element if the value is not found
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetObject(System.String)">
            <summary>
            Gets the JsonObject at element [id]
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetObject(System.String,HFN.Common.JsonObjectOld)">
            <summary>
            Gets the JsonObject at element [id], adds a default object if the value doesn't exist
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetArray(System.String)">
            <summary>
            Gets the JsonArray at element [id]
            If the array is not an array, it is returned as an array with a single element
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.GetArray(System.String,HFN.Common.JsonArrayOld)">
            <summary>
            Gets the JsonArray at element [id], adds a default array if the value is missing
            If the array is not an array, it is returned as an array with a single element
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.SetValue(System.String,HFN.Common.JsonValueOld)">
            <summary>
            Sets the value at element [id].
            If no element at [id] exists, add the value and key.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.Add(System.String,System.Object)">
            <summary>
            Add a value with the given id as its key.
            </summary>
            <param name="id">The key for the value.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.Add(System.String,System.String)">
            <summary>
            Adds a JsonStringValue as the "id" and a JsonStringValue as the "value" to the 
            internal Dictionary.  Values are checked to ensure no duplication occurs 
            in the internal Dictionary.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.Add(System.String,System.Int32)">
            <summary>
            Adds a JsonStringValue as the "id" and a JsonNumberValue as the "value" to the 
            internal Dictionary.  Values are checked to ensure no duplication occurs 
            in the internal Dictionary.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.Add(System.String,System.Single)">
            <summary>
            Adds a JsonStringValue as the "id" and a JsonNumberValue as the "value" to the 
            internal Dictionary.  Values are checked to ensure no duplication occurs 
            in the internal Dictionary.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.Add(System.String,System.Boolean)">
            <summary>
            Adds a JsonStringValue as the "id" and a JsonBoolValue as the "value" to the 
            internal Dictionary.  Values are checked to ensure no duplication occurs 
            in the internal Dictionary.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.Add(System.String,HFN.Common.JsonValueOld)">
            <summary>
            Adds a JsonStringValue as the "id" and a JsonValue as the "value" to the 
            internal Dictionary.  Values are checked to ensure no duplication occurs 
            in the internal Dictionary.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.Remove(System.String)">
            <summary>
            Remove the specified JsonValue associated with the given JsonStringValue 
            from the internal dictionary.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.CollectionToFormattedString(System.Boolean)">
            <summary>
            Returns the entire dictionary as a string in JSON-compliant format, with indentation for readability.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonObjectOld.CollectionToString">
            <summary>
            Returns the entire collection as a string in JSON-compliant format.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonValueCollectionOld">
            <summary>
            Represents any collection of <see cref="T:HFN.Common.JsonValueOld"/>s. It is used to 
            represent arrays of values to be contained within a JSON-compliant string of characters.
            </summary>
        </member>
        <member name="P:HFN.Common.JsonValueCollectionOld.Length">
            <summary>
            Used to get the amount of values contained in the collection.
            </summary>
        </member>
        <member name="P:HFN.Common.JsonValueCollectionOld.BeginMarker">
            <summary>
            Any implementation must override the BeginMarker property, used for
            denoting the lead wrapping character for the collection type.
            </summary>
        </member>
        <member name="P:HFN.Common.JsonValueCollectionOld.EndMarker">
            <summary>
            Any implementation must override the EndMarker property, used for
            denoting the trailing wrapping character for the collection type.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonValueCollectionOld.CollectionToFormattedString(System.Boolean)">
            <summary>
            Returns the value in JSON-compliant form with indentation for readability.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonValueCollectionOld.CollectionToString">
            <summary>
            Returns the value as a string, formatted in JSON-compliant form.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonValueCollectionOld.ToString">
            <summary>
            Returns the value as a string, bounded by the BeginMarker and EndMarker
            properties.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonValueCollectionOld.ToFormattedString">
            <summary>
            Returns the value as a string, indented for readability.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonValueCollectionOld.ToFormattedString(System.Boolean)">
            <summary>
            Returns the value as a string, optionally indented for readability.
            </summary>
            <param name="trimWhitespace">If true, will trim newlines and other whitespace chars from the output JSON structure. (ie 'name' : 'Test Name' will output as 'name':'Test Name')</param>
        </member>
        <member name="T:HFN.Common.JsonValueOld">
            <summary>
            Base class for the various JSON data classes.
            </summary>
            <seealso cref="T:HFN.Common.JsonObjectOld"/>
            <seealso cref="T:HFN.Common.JsonArrayOld"/>
            <seealso cref="T:HFN.Common.JsonBoolOld"/>
            <seealso cref="T:HFN.Common.JsonNumberOld"/>
            <seealso cref="T:HFN.Common.JsonStringOld"/>
            <seealso cref="T:HFN.Common.JsonNullOld"/>
        </member>
        <member name="T:HFN.Common.JsonBoolOld">
            <summary>
            Data representing JSON boolean values.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonBoolOld.#ctor(System.Boolean)">
            <summary>
            Simple public instance constructor that accepts a boolean.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonBoolOld.ToString">
            <summary>
            Returns boolean value for this instance, as text and lower-cased.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonNullOld">
            <summary>
            Data representing JSON null values.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonNullOld.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:HFN.Common.JsonNullOld.ToString">
            <summary>
            Returns contained string in JSON-compliant form
            </summary>
        </member>
        <member name="M:HFN.Common.JsonNullOld.ToJsonString(System.String,System.Boolean)">
            <summary>
            Evaluates all characters in a string and returns a new string,
            properly formatted for JSON compliance and bounded by double-quotes.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonNumberOld">
            <summary>
            Data representing JSON number values.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonNumberOld.#ctor(System.Int32)">
            <summary>
            Public constructor that accepts a value of type int
            </summary>
        </member>
        <member name="M:HFN.Common.JsonNumberOld.#ctor(System.Single)">
            <summary>
            Public constructor that accepts a value of type float
            </summary>
        </member>
        <member name="M:HFN.Common.JsonNumberOld.ToString">
            <summary>
            Returns contained numeric value, rendered as a string.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonStringOld">
            <summary>
            Data representing JSON string values.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonStringOld.#ctor(System.String)">
            <summary>
            Public constructor that accepts a value of type string
            </summary>
        </member>
        <member name="M:HFN.Common.JsonStringOld.ToString">
            <summary>
            Returns contained string in JSON-compliant form
            </summary>
        </member>
        <member name="M:HFN.Common.JsonStringOld.ToJsonString(System.String,System.Boolean)">
            <summary>
            Evaluates all characters in a string and returns a new string,
            properly formatted for JSON compliance and bounded by double-quotes.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonParserOld">
            <summary>
            Class for parsing strings into JSON blobs.
            </summary>
        </member>
        <member name="M:HFN.Common.JsonParserOld.Parse(System.String,System.Int32)">
            <summary>
            Parse the given string into a JSON blob.
            </summary>
            <param name="jsonString">The string to parse into JSON.</param>
        </member>
        <member name="M:HFN.Common.JsonParserOld.GetJsonStrings(System.String)">
            <summary>
            Separate string values out based on wrapping characters.
            { means an object
            [ means an array
            " means a string
            </summary>
        </member>
        <member name="M:HFN.Common.JsonParserOld.TrimValueEnds(System.String,System.Char,System.Char)">
            <summary>
            Returns a string with all whitespace and specified start/end chars trimmed.
            </summary>
        </member>
        <member name="T:HFN.Common.JsonUtilityOld">
            <summary>
            Utility class for JSON system.
            </summary>
        </member>
        <member name="M:HFN.Common.XmlUtility.ReadAttributes(System.Xml.XmlElement,System.String)">
            <summary>
            Returns a Dictionary containing key-value pairs matching the attributes contained in the passed XML element.
            </summary>
        </member>
        <member name="T:HFN.Common.ConsoleCommand">
            <summary>
            Base class for scriptable objects defining commands for <see cref="T:HFN.Common.HfnConsoleCommands"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommand.GetCommandData">
            <summary>
            Returns a <see cref="T:HFN.Common.HfnConsoleCommand"/> struct for this console command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HFN.Common.ConsoleCommand.ExecuteCommand(System.String[])">
            <summary>
            Method overriden to actually execute the command.
            </summary>
            <param name="parameters">String values representing command parameters. The first element should always be the actual command string.</param>
        </member>
        <member name="M:HFN.Common.ConsoleCommand.Output(System.String)">
            <summary>
            Output the given string to <see cref="T:HFN.Common.HfnConsoleCommands"/>.
            </summary>
            <param name="output">String to show as an output</param>
        </member>
        <member name="T:HFN.Common.ConsoleCommandGroup">
            <summary>
            Class grouping <see cref="T:HFN.Common.ConsoleCommand"/> objects for convenient adding/removal of commands to <see cref="T:HFN.Common.HfnConsoleCommands"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandGroup.GetCommandData">
            <summary>
            Returns an array of <see cref="T:HFN.Common.HfnConsoleCommand"/> structs representing commands in this group.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandGroup.GetCommandStrings">
            <summary>
            Returns an array of strings representing inputs for commands in this group.
            </summary>
        </member>
        <member name="T:HFN.Common.ClearConsoleCommand">
            <summary>
            Console command for clearing the console's output messages.
            </summary>
        </member>
        <member name="T:HFN.Common.FrameRateCommand">
            <summary>
            <see cref="T:HFN.Common.ConsoleCommand"/> used for debugging frame rates.
            </summary>
        </member>
        <member name="F:HFN.Common.FrameRateCommand.counterPrefab">
            <summary>
            Prefab for the frame rate counter.
            </summary>
        </member>
        <member name="F:HFN.Common.FrameRateCommand.setKeyword">
            <summary>
            Command parameter used to set frame rate. ie "fps set 60"
            </summary>
        </member>
        <member name="F:HFN.Common.FrameRateCommand.sampleKeyword">
            <summary>
            Command parameter used to set frame sample size. ie "fps sample 60"
            </summary>
        </member>
        <member name="T:HFN.Common.OpenCloseUICommand">
            <summary>
            Command that handles opening / closing views and modals.
            </summary>
        </member>
        <member name="F:HFN.Common.OpenCloseUICommand.openParam">
            <summary>
            Parameter for opening a view / modal.
            </summary>
        </member>
        <member name="F:HFN.Common.OpenCloseUICommand.closeParam">
            <summary>
            Parameter for closing a view / modal.
            </summary>
        </member>
        <member name="F:HFN.Common.OpenCloseUICommand.viewParam">
            <summary>
            Parameter for specifying a view target.
            </summary>
        </member>
        <member name="F:HFN.Common.OpenCloseUICommand.modalParam">
            <summary>
            Parameter for specifying a modal target.
            </summary>
        </member>
        <member name="F:HFN.Common.OpenCloseUICommand.allParam">
            <summary>
            Parameter for specifying all views or modals should be closed.
            </summary>
        </member>
        <member name="F:HFN.Common.OpenCloseUICommand.tweenParam">
            <summary>
            Parameter for specifying a view or modal should use tweens when opening / closing.
            </summary>
        </member>
        <member name="T:HFN.Common.ConsoleCommandInput">
            <summary>
            Base class for UI classes used to interact with <see cref="T:HFN.Common.HfnConsoleCommands"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.ConsoleCommandInput.root">
            <summary>
            The root <see cref="T:UnityEngine.GameObject"/> for the input.
            </summary>
        </member>
        <member name="F:HFN.Common.ConsoleCommandInput.previousInputKey">
            <summary>
            Key pressed to cycle to the previous input in the list of cached input commands.
            </summary>
        </member>
        <member name="F:HFN.Common.ConsoleCommandInput.nextInputKey">
            <summary>
            Key pressed to cycle to the next input in the list of cached input commands.
            </summary>
        </member>
        <member name="F:HFN.Common.ConsoleCommandInput.closeTweens">
            <summary>
            [Optional] Tweens to play when closing the input.
            </summary>
        </member>
        <member name="F:HFN.Common.ConsoleCommandInput.outputPrefab">
            <summary>
            Prefab for output messages.
            </summary>
        </member>
        <member name="P:HFN.Common.ConsoleCommandInput.Root">
            <summary>
            The root <see cref="T:UnityEngine.GameObject"/> for the input.
            </summary>
        </member>
        <member name="P:HFN.Common.ConsoleCommandInput.IsOpen">
            <summary>
            Returns true if the <see cref="P:HFN.Common.ConsoleCommandInput.Root"/> object is active.
            </summary>
        </member>
        <member name="P:HFN.Common.ConsoleCommandInput.InputIndex">
            <summary>
            Current index used when browsing stored command inputs.
            </summary>
        </member>
        <member name="P:HFN.Common.ConsoleCommandInput.InputText">
            <summary>
            Text shown in an input field.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.Open">
            <summary>
            Show the console input.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.Close">
            <summary>
            Hide the console input and clear output messages.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.AddOutput(System.String)">
            <summary>
            Add an output message.
            </summary>
            <param name="text">Text to display.</param>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.AddOutput(System.String,UnityEngine.Color)">
            <summary>
            Add an output message.
            </summary>
            <param name="text">Text to display.</param>
            <param name="color">Color for the displayed text.</param>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.ClearOutputs">
            <summary>
            Clear existing output messages.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.ClearInputText">
            <summary>
            Clear the input field's text.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.OnSubmit(System.String)">
            <summary>
            Called to submit input to <see cref="T:HFN.Common.HfnConsoleCommands"/>.
            </summary>
            <param name="text">The input to submit.</param>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.OnOpenTweensFinished">
            <summary>
            Called when open tweens finish playing. By default, this does nothing.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandInput.OnCloseTweensFinished">
            <summary>
            Called when close tweens finish playing. By default, this calls ClearOutputs() and sets the root to be inactive.
            </summary>
        </member>
        <member name="T:HFN.Common.ConsoleCommandOutput">
            <summary>
            Base class for outputs shown in <see cref="T:HFN.Common.ConsoleCommandInput"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.ConsoleCommandOutput.Text">
            <summary>
            Text shown on the output.
            </summary>
        </member>
        <member name="P:HFN.Common.ConsoleCommandOutput.Color">
            <summary>
            Color for the displayed text.
            </summary>
        </member>
        <member name="M:HFN.Common.ConsoleCommandOutput.Initialize(System.String)">
            <summary>
            Set the text shown on the output.
            </summary>
            <param name="text">Text to display.</param>
        </member>
        <member name="M:HFN.Common.ConsoleCommandOutput.Initialize(System.String,UnityEngine.Color)">
            <summary>
            Set the text shown on the output.
            </summary>
            <param name="text">Text to display.</param>
            <param name="color">Color for the displayed text.</param>
        </member>
        <member name="T:HFN.Common.HfnConsoleCommands">
            <summary>
            Class used to process player input to affect game state.
            </summary>
        </member>
        <member name="F:HFN.Common.HfnConsoleCommands.platforms">
            <summary>
            Platforms that consoles are enabled for.
            </summary>
        </member>
        <member name="F:HFN.Common.HfnConsoleCommands.debugKey">
            <summary>
            Key to press to show the console.
            </summary>
        </member>
        <member name="F:HFN.Common.HfnConsoleCommands.commandsEnabled">
            <summary>
            If true, commands can be sent to the console.
            </summary>
        </member>
        <member name="F:HFN.Common.HfnConsoleCommands.inputPrefab">
            <summary>
            Prefab for the console input.
            </summary>
        </member>
        <member name="F:HFN.Common.HfnConsoleCommands.defaultCommands">
            <summary>
            Commands to allow by default.
            </summary>
        </member>
        <member name="P:HFN.Common.HfnConsoleCommands.EnabledForPlatform">
            <summary>
            Returns true if console commands are enabled on the current platform.
            </summary>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.ShowInput">
            <summary>
            Show the console input.
            </summary>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.HideInput">
            <summary>
            Hide the console input.
            </summary>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.Output(System.String)">
            <summary>
            Add an output to the input.
            </summary>
            <param name="text">Text to display.</param>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.Output(System.String,UnityEngine.Color)">
            <summary>
            Add an output to the input.
            </summary>
            <param name="text">Text to display.</param>
            <param name="color">Color for the displayed text.</param>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.ClearOutputs">
            <summary>
            Clear existing output messages from the console.
            </summary>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.AddCommand(System.String,System.Action{System.String[]})">
            <summary>
            Add a command to the console.
            </summary>
            <param name="command">String typed to execute the command. ie "hfn_debug" would require the player to type "hfn_debug" into the console input. Note: Commands are NOT case-sensitive.</param>
            <param name="callback">Method handling player input for the command. The first value is the command itself while subsequent values are arguments passed to the input, separated by space. ie "hfn_debug set true" would pass ["hfn_debug", "set", "true"]</param>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.AddCommand(HFN.Common.HfnConsoleCommand)">
            <summary>
            Add a command to the console.
            </summary>
            <param name="command">Data for the command and its callback method.</param>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.AddCommand(HFN.Common.ConsoleCommand)">
            <summary>
            Add the given command to the console.
            </summary>
            <param name="command">Data for the command and its callback method.</param>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.AddCommands(HFN.Common.ConsoleCommandGroup)">
            <summary>
            Adds all commands from the given <see cref="T:HFN.Common.ConsoleCommandGroup"/> to the console.
            </summary>
            <param name="group">Group to add commands from.</param>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.RemoveCommand(System.String)">
            <summary>
            Remove the command with the given string. Note: This is NOT case-sensitive.
            </summary>
            <param name="command">String typed to execute the command.</param>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommands.CheckCommand(System.String)">
            <summary>
            Checks if the given input string will invoke any command.
            </summary>
            <param name="input">The string to parse for commands.</param>
        </member>
        <member name="T:HFN.Common.HfnConsoleCommand">
            <summary>
            Struct containing data for use in <see cref="T:HFN.Common.HfnConsoleCommands"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.HfnConsoleCommand.command">
            <summary>
            The keyword used to input the command, case insensitive.
            </summary>
        </member>
        <member name="F:HFN.Common.HfnConsoleCommand.callback">
            <summary>
            Callback to invoke and pass the entered command prompts to.
            </summary>
        </member>
        <member name="M:HFN.Common.HfnConsoleCommand.#ctor(System.String,System.Action{System.String[]})">
            <summary>
            Struct containing data for use in <see cref="T:HFN.Common.HfnConsoleCommands"/>.
            </summary>
        </member>
        <member name="T:HFN.Common.DebugTarget">
            <summary>
            Enum for when debugging should occur.
            </summary>
        </member>
        <member name="F:HFN.Common.DebugTarget.Never">
            <summary>
            Don't debug.
            </summary>
        </member>
        <member name="F:HFN.Common.DebugTarget.Editor">
            <summary>
            Debug only in the editor.
            </summary>
        </member>
        <member name="F:HFN.Common.DebugTarget.Runtime">
            <summary>
            Debug only at runtime.
            </summary>
        </member>
        <member name="F:HFN.Common.DebugTarget.EditorAndRuntime">
            <summary>
            Debug in both the editor and at build runtime.
            </summary>
        </member>
        <member name="T:HFN.Common.DebugType">
            <summary>
            Convenience class used to allow contextual debugging based on the platform.
            </summary>
        </member>
        <member name="F:HFN.Common.DebugType.type">
            <summary>
            Determines when internal debug logs occur. Useful when debugging internal processes.
            </summary>
        </member>
        <member name="F:HFN.Common.DebugType.useRobustLogs">
            <summary>
            Useful when you want to filter basic and verbose debugging.
            </summary>
        </member>
        <member name="P:HFN.Common.DebugType.IsValid">
            <summary>
            Is the debugging target valid given the current platform?
            </summary>
        </member>
        <member name="P:HFN.Common.DebugType.IsValidAndRobust">
            <summary>
            Is the debugging target valid and are robust logs enabled?
            </summary>
        </member>
        <member name="M:HFN.Common.DebugType.Log(System.Object)">
            <summary>
            Debugs a message if the <see cref="T:HFN.Common.DebugType"/> is valid.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:HFN.Common.DebugType.RobustLog(System.Object)">
            <summary>
            Debugs a message if the <see cref="T:HFN.Common.DebugType"/> is valid and robust logs are enabled.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:HFN.Common.FrameRateColor">
            <summary>
            Struct for use in <see cref="T:HFN.Common.FrameRateCounter"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.FrameRateColor.color">
            <summary>
            The color to display the target frame rate as.
            </summary>
        </member>
        <member name="F:HFN.Common.FrameRateColor.minFps">
            <summary>
            The minimum frame rate for this color to be used to tint counter text.
            </summary>
        </member>
        <member name="T:HFN.Common.FrameRateCounter">
            <summary>
            Base class to allow visual debugging of frame rate.
            </summary>
        </member>
        <member name="F:HFN.Common.FrameRateCounter.sampleSize">
            <summary>
            The number of frames to sample frame rates across. 60 will sample 60 frames and their render times, 120 will sample 120 frames, etc.
            </summary>
        </member>
        <member name="F:HFN.Common.FrameRateCounter.colors">
            <summary>
            Colors to display frame rate values at. This must be declared in order from heighest frame rates to lowest.
            </summary>
        </member>
        <member name="P:HFN.Common.FrameRateCounter.SampleSize">
            <summary>
            The number of frames to sample frame rates across. 60 will sample 60 frames and their render times, 120 will sample 120 frames, etc.
            </summary>
        </member>
        <member name="P:HFN.Common.FrameRateCounter.HighFPS">
            <summary>
            The highest frame rate in the sample range.
            </summary>
        </member>
        <member name="P:HFN.Common.FrameRateCounter.LowFPS">
            <summary>
            The lowest frame rate in the sample range.
            </summary>
        </member>
        <member name="P:HFN.Common.FrameRateCounter.AverageFPS">
            <summary>
            The average frame rate for the sample range.
            </summary>
        </member>
        <member name="M:HFN.Common.FrameRateCounter.GetLabelText(System.Int32)">
            <summary>
            Returns the string that should be shown for the given frame rate.
            </summary>
            <param name="fps">Frame rate to grab a string for.</param>
        </member>
        <member name="M:HFN.Common.FrameRateCounter.GetLabelColor(System.Int32)">
            <summary>
            Returns the color that should be shown for the given frame rate.
            </summary>
            <param name="fps">Frame rate to grab a color for.</param>
        </member>
        <member name="T:HFN.Common.KeyCodeIdentifier">
            <summary>
            Class to detect and log keys being pressed.
            Useful when a controler or device has a button with an unknown <see cref="T:UnityEngine.KeyCode"/>.
            </summary>
        </member>
        <member name="T:HFN.Common.MD4">
            <summary>
            Class allowing MD4 hashing.
            Based on http://www.superstarcoders.com/blogs/posts/md4-hash-algorithm-in-c-sharp.aspx
            </summary>
        </member>
        <member name="M:HFN.Common.MD5.Encrypt(System.String)">
            <summary>
            Encrypt a string using an MD5 hash.
            </summary>
            <param name="value">The string to encrypt.</param>
        </member>
        <member name="T:HFN.Common.IButtonEventAssignable">
            <summary>
            Interface for interfaces dealing with basic <see cref="T:UnityEngine.Events.UnityEvent"/> events to implement.
            Needed since you can't assign event listeners to <see cref="T:UnityEngine.Events.UnityEvent"/> values contained in interfaces for some reason.
            </summary>
        </member>
        <member name="M:HFN.Common.IButtonEventAssignable.AddListener(UnityEngine.Events.UnityAction)">
            <summary>
            Add a listener for when the button is clicked.
            </summary>
        </member>
        <member name="M:HFN.Common.IButtonEventAssignable.RemoveListener(UnityEngine.Events.UnityAction)">
            <summary>
            Remove a listener for when the button is clicked.
            </summary>
        </member>
        <member name="M:HFN.Common.IButtonEventAssignable.RemoveAllListeners">
            <summary>
            Remove all listeners for when the button is clicked.
            </summary>
        </member>
        <member name="T:HFN.Common.AnimationCurveExtensions">
            <summary>
            Class containing extension methods for <see cref="T:UnityEngine.AnimationCurve"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.AnimationCurveExtensions.GetMinKey(UnityEngine.AnimationCurve)">
            <summary>
            Returns the <see cref="T:UnityEngine.Keyframe"/> with the lowest value on the given <see cref="T:UnityEngine.AnimationCurve"/>.
            </summary>
            <param name="curve"><see cref="T:UnityEngine.AnimationCurve"/> to evaluate.</param>
        </member>
        <member name="M:HFN.Common.AnimationCurveExtensions.GetMinKeyIndex(UnityEngine.AnimationCurve)">
            <summary>
            Returns the index of the <see cref="T:UnityEngine.Keyframe"/> with the lowest value on the given <see cref="T:UnityEngine.AnimationCurve"/>.
            </summary>
            <param name="curve"><see cref="T:UnityEngine.AnimationCurve"/> to evaluate.</param>
        </member>
        <member name="M:HFN.Common.AnimationCurveExtensions.GetMaxKey(UnityEngine.AnimationCurve)">
            <summary>
            Returns the <see cref="T:UnityEngine.Keyframe"/> with the highest value on the given <see cref="T:UnityEngine.AnimationCurve"/>.
            </summary>
            <param name="curve"><see cref="T:UnityEngine.AnimationCurve"/> to evaluate.</param>
        </member>
        <member name="M:HFN.Common.AnimationCurveExtensions.GetMaxKeyIndex(UnityEngine.AnimationCurve)">
            <summary>
            Returns thei index of the <see cref="T:UnityEngine.Keyframe"/> with the highest value on the given <see cref="T:UnityEngine.AnimationCurve"/>.
            </summary>
            <param name="curve"><see cref="T:UnityEngine.AnimationCurve"/> to evaluate.</param>
        </member>
        <member name="M:HFN.Common.AnimationCurveExtensions.GetTime(UnityEngine.AnimationCurve,System.Single,System.Single,System.Single)">
            <summary>
            Returns the time on a curve that corresponds to the first time the given value is used.
            </summary>
            <param name="curve">The <see cref="T:UnityEngine.AnimationCurve"/> to evaluate.</param>
            <param name="value">Value to look for on the curve.</param>
            <param name="coarseness">Delta between time checks. Smaller values will be more accurate but more intensive.</param>
            <param name="margin">Margin of error for value checks.</param>
        </member>
        <member name="T:HFN.Common.AnimatorExtensions">
            <summary>
            Extension class for <see cref="T:UnityEngine.Animator"/> related functionality.
            </summary>
        </member>
        <member name="M:HFN.Common.AnimatorExtensions.GetParameterFromID(UnityEngine.Animator,System.Int32)">
            <summary>
            Grabs a specific parameter from an <see cref="T:UnityEngine.Animator"/>.
            </summary>
            <param name="animator">The <see cref="T:UnityEngine.Animator"/> to grab the parameter from.</param>
            <param name="id">The hash for the target parameter.</param>
        </member>
        <member name="M:HFN.Common.AnimatorExtensions.SetParameter(UnityEngine.Animator,HFN.Common.AnimatorParamValue)">
            <summary>
            Set an <see cref="T:UnityEngine.AnimatorControllerParameter"/> value on the given <see cref="T:UnityEngine.Animator"/>.
            If the target parameter is a trigger, will trigger it.
            </summary>
            <param name="animator">The <see cref="T:UnityEngine.Animator"/> to set parameter values for.</param>
            <param name="value">Data for the target parameter and value.</param>
        </member>
        <member name="T:HFN.Common.ArrayExtensions">
            <summary>
            Class containing extension functions for arrays.
            </summary>
        </member>
        <member name="M:HFN.Common.ArrayExtensions.Contains``1(System.Array,``0)">
            <summary>
            Returns true if the array contains the target value.
            </summary>
            <param name="array">Array being examined.</param>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:HFN.Common.ArrayExtensions.Contains``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Returns true if the array contains a target value matching the given predicate.
            </summary>
            <typeparam name="T"><see cref="T:System.IComparable"/> derrived type for the array elements.</typeparam>
            <param name="array">The array or list to search.</param>
            <param name="predicate">Search criteria to use when searching for the target value.</param>
        </member>
        <member name="M:HFN.Common.ArrayExtensions.Contains(System.String[],System.String,System.StringComparison)">
            <summary>
            Returns true if the array contains a string value, ignoring case.
            </summary>
            <param name="array">Array being examined.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">Comparison method to compare string values with. <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> is reccommended for non-case sensitive comparisons.</param>
        </member>
        <member name="M:HFN.Common.ArrayExtensions.IndexOf``1(System.Array,``0)">
            <summary>
            Returns the first index of a value in an array or -1 if the value is not contained in the array.
            NOTE: This doesn't handle implicit casting so some comparisons (like looking for an int value in an enum array) will not evaluate properly.
            </summary>
            <typeparam name="T">The type of array element to examine.</typeparam>
            <param name="array">The array to examine.</param>
            <param name="value">The value to retrieve and index for.</param>
        </member>
        <member name="M:HFN.Common.ArrayExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Returns the index of the element matching the given predicate.
            </summary>
            <typeparam name="T"><see cref="T:System.IComparable"/> derrived type for the array elements.</typeparam>
            <param name="array">The array or list to search.</param>
            <param name="predicate">Search criteria to use when searching for the target index.</param>
        </member>
        <member name="T:HFN.Common.AudioExtensions">
            <summary>
            Contains various extension methods for <see cref="T:UnityEngine.AudioClip"/>s.
            </summary>
        </member>
        <member name="M:HFN.Common.AudioExtensions.GetClipBytes(UnityEngine.AudioClip,System.Single)">
            <summary>
            Gets the clips data as an array of bytes.
            Min value is the point for silence cutoff.
            </summary>
        </member>
        <member name="T:HFN.Common.ColliderExtensions">
            <summary>
            Contains various extension methods for Colliders.
            </summary>
        </member>
        <member name="M:HFN.Common.ColliderExtensions.GetRandomPoint(UnityEngine.BoxCollider)">
            <summary>
            Gets a random point within a <see cref="T:UnityEngine.BoxCollider"/>.
            </summary>
            <param name="collider">The <see cref="T:UnityEngine.BoxCollider"/> to use when finding a point.</param>
        </member>
        <member name="M:HFN.Common.ColliderExtensions.GetRandomPointXY(UnityEngine.BoxCollider,System.Single,System.Boolean)">
            <summary>
            Gets a random XY point within a <see cref="T:UnityEngine.BoxCollider"/>.
            </summary>
            <param name="collider">The collider to use when finding a point.</param>
            <param name="zOffset">The Z position of the random point.</param>
            <param name="offsetIsPosition">If false, the zOffset parameter will be added to the actual Z position of the collider.</param>
        </member>
        <member name="M:HFN.Common.ColliderExtensions.GetRandomPointXZ(UnityEngine.BoxCollider,System.Single,System.Boolean)">
            <summary>
            Gets a random XZ point within a <see cref="T:UnityEngine.BoxCollider"/>.
            </summary>
            <param name="collider">The collider to use when finding a point.</param>
            <param name="yOffset">The Y position of the random point.</param>
            <param name="offsetIsPosition">If false, the yOffset parameter will be added to the actual Y position of the collider.</param>
        </member>
        <member name="M:HFN.Common.ColliderExtensions.GetRandomPointYZ(UnityEngine.BoxCollider,System.Single,System.Boolean)">
            <summary>
            Gets a random YZ point within a <see cref="T:UnityEngine.BoxCollider"/>.
            </summary>
            <param name="collider">The collider to use when finding a point.</param>
            <param name="xOffset">The X position of the random point.</param>
            <param name="offsetIsPosition">If false, the zOffset parameter will be added to the actual X position of the collider.</param>
        </member>
        <member name="M:HFN.Common.ColliderExtensions.GetRandomPointFromShell(UnityEngine.CapsuleCollider)">
            <summary>
            Gets a random point allong a <see cref="T:UnityEngine.CapsuleCollider"/>'s exterior.
            </summary>
            <param name="collider">The <see cref="T:UnityEngine.CapsuleCollider"/> to use when finding a point.</param>
        </member>
        <member name="T:HFN.Common.ColorExtensions">
            <summary>
            Contains various extension methods for Unity's Color class.
            </summary>
        </member>
        <member name="M:HFN.Common.ColorExtensions.ToColor32(UnityEngine.Color)">
            <summary>
            Converts a <see cref="T:UnityEngine.Color"/> value to a <see cref="T:UnityEngine.Color32"/> value.
            </summary>
        </member>
        <member name="T:HFN.Common.DateTimeExtensions">
            <summary>
            Contains various extension methods for DateTime values.
            </summary>
        </member>
        <member name="P:HFN.Common.DateTimeExtensions.Now">
            <summary>
            Current date in local time.
            </summary>
        </member>
        <member name="P:HFN.Common.DateTimeExtensions.UtcNow">
            <summary>
            Current date in universal time.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToTimeStringFromSeconds(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> string conversion of an <see cref="T:System.Int32"/> second count.
            </summary>
            <param name="seconds">The number of seconds to convert to a <see cref="T:System.TimeSpan"/> string.</param>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.GetSecondsToNow(System.DateTime)">
            <summary>
            Returns the number of seconds since the target start <see cref="T:System.DateTime"/> to now.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToSecondsSince(System.DateTime,System.DateTime)">
            <summary>
            Returns the number of seconds since the target start <see cref="T:System.DateTime"/>, based on the given <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToSecondsSincePrecise(System.DateTime,System.DateTime)">
            <summary>
            Returns the number of seconds since the target start <see cref="T:System.DateTime"/>, based on the given <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToMillisecondsSince(System.DateTime,System.DateTime)">
            <summary>
            Returns the number of milliseconds since the target start <see cref="T:System.DateTime"/>, based on the given <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToMillisecondsSincePrecise(System.DateTime,System.DateTime)">
            <summary>
            Returns the number of milliseconds since the target start <see cref="T:System.DateTime"/>, based on the given <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToSecondsSinceEpoch(System.DateTime)">
            <summary>
            Returns the number of seconds since the Unix Epoch, based on the given <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToMillisecondsSinceEpoch(System.DateTime)">
            <summary>
            Returns the number of milliseconds since the Unix Epoch, based on the given <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToTimeSpan(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.TimeSpan"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToDateTime(System.String)">
            <summary>
            Converts a string to a <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToDateTime(System.String,System.DateTime)">
            <summary>
            Converts a string to a <see cref="T:System.DateTime"/> value. If the string fails to parse, will return the default <see cref="T:System.DateTime"/> specified.
            </summary>
            <param name="defaultValue">The default <see cref="T:System.DateTime"/> value to return if the string fails to parse.</param>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToDateTimeFromSeconds(System.Int32)">
            <summary>
            Converts seconds to a <see cref="T:System.DateTime"/> value, originating from the Unix Epoch.
            </summary>
            <param name="seconds">The number of seconds to add to the Unix Epoch to create a new <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.ToDateTimeFromMilliseconds(System.Int32)">
            <summary>
            Converts milliseconds to a <see cref="T:System.DateTime"/> value, originating from the Unix Epoch.
            </summary>
            <param name="milliseconds">The number of milliseconds to add to the Unix Epoch to create a new <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="P:HFN.Common.DateTimeExtensions.SecondsSinceEpoch">
            <summary>
            Number of seconds since Unix Epoch time (00:00:00 January 1, 1970)
            </summary>
        </member>
        <member name="P:HFN.Common.DateTimeExtensions.MillisecondsSinceEpoch">
            <summary>
            Number of milliseconds since Unix Epoch time (00:00:00 January 1, 1970)
            </summary>
        </member>
        <member name="P:HFN.Common.DateTimeExtensions.UnixEpoch">
            <summary>
            The <see cref="T:System.DateTime"/> representing the Unix Epoch time (00:00:00 January 1, 1970)
            </summary>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.GetMonthName(System.Int32)">
            <summary>
            Gets the name of a month based on its order in the year (1 is January, 2 is February, etc)
            </summary>
            <param name="month">The integer representing the target month.</param>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.GetMonthValue(System.String)">
            <summary>
            Returns the integer value associated with a month's name. (January is 1, February is 2, etc)
            </summary>
            <param name="month">The name of the month to retrieve an integer value for.</param>
        </member>
        <member name="M:HFN.Common.DateTimeExtensions.GetDayEnding(System.Int32)">
            <summary>
            Returns a proper ending for a string representation of a day's date
            (2 will return "nd" and 4 will return "th" for example)
            </summary>
        </member>
        <member name="T:HFN.Common.DictionaryExtensions">
            <summary>
            Class containing extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.DictionaryExtensions.ToDelimitedString``2(System.Collections.Generic.IDictionary{``0,``1},System.String,System.String)">
            <summary>
            Convenience function for output a dictionary's contents as a string.
            </summary>
            <typeparam name="TKey">The type of the dictionary's keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary's values.</typeparam>
            <param name="dictionary">The dictionary to output a string for.</param>
            <param name="delimiter">The string to insert between dictionary outputs.</param>
            <param name="valueSeparator">The string to insert between dictionary keys and values.</param>
        </member>
        <member name="M:HFN.Common.DictionaryExtensions.GetMatchingKey``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            Returns the key matching the given string, ignoring case.
            This is primarily useful when string keys are case insensitive, and may be accessed with unreliable string capitalization.
            </summary>
            <typeparam name="TValue">The type of the dictionary's values.</typeparam>
            <param name="dictionary">The dictionary to search for keys in.</param>
            <param name="key">The case-insensitive key to search for.</param>
        </member>
        <member name="M:HFN.Common.DictionaryExtensions.ContainsKeyIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            Returns true if the given dictionary contains the target string, ignoring case.
            </summary>
            <typeparam name="TValue">Type for the given dictionary's values.</typeparam>
            <param name="dictionary">The dictionary to check key values on.</param>
            <param name="key">The string key to check the dictionary for.</param>
        </member>
        <member name="M:HFN.Common.DictionaryExtensions.ContainsAnyKeyIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String[])">
            <summary>
            Returns true if the given dictionary contains any of the target strings, ignoring case.
            </summary>
            <typeparam name="TValue">Type for the given dictionary's values.</typeparam>
            <param name="dictionary">The dictionary to check key values on.</param>
            <param name="key">The string key to check the dictionary for.</param>
        </member>
        <member name="T:HFN.Common.EnumExtensions">
            <summary>
            Convenience class for some Enum functionality.
            </summary>
        </member>
        <member name="M:HFN.Common.EnumExtensions.GetNames``1">
            <summary>
            Get an array for the given Enum's value names. (These are not guarenteed to match enum order exactly.)
            </summary>
            <typeparam name="TEnum">The Enum to return an array of values for.</typeparam>
        </member>
        <member name="M:HFN.Common.EnumExtensions.GetValues``1">
            <summary>
            Returns an array of all values in the given Enum.
            </summary>
            <typeparam name="TEnum">The Enum to return an array of values for.</typeparam>
        </member>
        <member name="M:HFN.Common.EnumExtensions.GetValuesNonAlloc``1(``0[])">
            <summary>
            Populates an existing array with values from an enum and returns the actual number of values the specified enum contains.
            Generates less garbage than <see cref="M:HFN.Common.EnumExtensions.GetValues``1"/>.
            </summary>
            <typeparam name="TEnum">The enum type.</typeparam>
            <param name="nonAllocArray">The array to populate with enum values.</param>
        </member>
        <member name="T:HFN.Common.FloatExtensions">
            <summary>
            Contains various extension methods for floats.
            </summary>
        </member>
        <member name="M:HFN.Common.FloatExtensions.ToInt(System.Single)">
            <summary>
            Rounds a float to its nearest integer value.
            </summary>
            <param name="f">The float value to round to an integer.</param>
        </member>
        <member name="T:HFN.Common.GameObjectExtensions">
            <summary>
            Contains various extension methods for <see cref="T:UnityEngine.GameObject"/>s.
            </summary>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.SetLayerRecursively(UnityEngine.GameObject,System.Int32)">
            <summary>
            Sets all GameObjects' layers below a given GameObject. This includes the target GameObject.
            </summary>
            <param name="layer">The layer to set the GameObjects to.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.SetChildrenActive(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Set all immediate children of a given object to be active or inactive.
            </summary>
            <param name="active">The desired active state of child GameObjects.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.GetPath(UnityEngine.GameObject)">
            <summary>
            Returns a string representing the path to the target game object from the root of the scene.
            </summary>
            <param name="target">The <see cref="T:UnityEngine.GameObject"/> to grab the path for.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.Delete(UnityEngine.Object)">
            <summary>
            Destroys the given object with the appropriate Destroy call.
            (Destroy at runtime, DestroyImmediate at edit time)
            </summary>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.GetComponent``1(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Generic GetComponent that allows searching of inactive components.
            </summary>
            <typeparam name="T">The type of the component to search for.</typeparam>
            <param name="includeInactive">If true, will grab components from inactive objects.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.GetComponentInChildren``1(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Generic GetComponentInChildren that allows searching of inactive components.
            </summary>
            <typeparam name="T">The type of the component to search for.</typeparam>
            <param name="includeInactive">If true, will grab components from inactive objects.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.GetComponentInParents``1(UnityEngine.GameObject)">
            <summary>
            Generic GetComponentInParents that allows searching of inactive components.
            </summary>
            <typeparam name="T">The type of the component to search for.</typeparam>
            <param name="includeInactive">If true, will grab components from inactive objects.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.GetOrAddComponent``1(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Searches for a component of the target type. If none are found, will add the component to the game object.
            </summary>
            <typeparam name="T">The type of component to search for/add.</typeparam>
            <param name="searchChildren">If true, search the object's children for the component.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.AddChild``1(UnityEngine.GameObject,System.String)">
            <summary>
            Adds a child to a GameObject and attaches the specified component.
            </summary>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.AddChild(UnityEngine.GameObject,System.String)">
            <summary>
            Adds a child to a GameObject.
            </summary>
            <param name="name">Name of the new child.</param>
        </member>
        <member name="M:HFN.Common.GameObjectExtensions.AddInstantiatedChild(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Adds an instantiated child based on the given original.
            </summary>
        </member>
        <member name="T:HFN.Common.IntExtensions">
            <summary>
            Contains various extension methods for ints.
            </summary>
        </member>
        <member name="M:HFN.Common.IntExtensions.ToFloat(System.Int32)">
            <summary>
            Converts the given <see cref="T:System.Int32"/> value to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="i">The <see cref="T:System.Int32"/> value to convert.</param>
        </member>
        <member name="M:HFN.Common.IntExtensions.ToByte(System.Int32)">
            <summary>
            Converts the given <see cref="T:System.Int32"/> value to a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="i">The <see cref="T:System.Int32"/> value to convert.</param>
        </member>
        <member name="T:HFN.Common.LayerMaskExtensions">
            <summary>
            Convenience class to handle <see cref="T:UnityEngine.LayerMask"/> functions.
            </summary>
        </member>
        <member name="T:HFN.Common.ListExtensions">
            <summary>
            Class containing extension methods for Lists.
            </summary>
        </member>
        <member name="M:HFN.Common.ListExtensions.Shuffle(System.Collections.IList)">
            <summary>
            Shuffle elements in a list.
            </summary>
        </member>
        <member name="M:HFN.Common.ListExtensions.ShuffleCopy``1(System.Collections.Generic.IList{``0})">
            <summary>
            Copy a list and return a new list with suffled elements.
            </summary>
        </member>
        <member name="M:HFN.Common.ListExtensions.ContainsIgnoreCase(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Returns true if the list contains a string value, ignoring case.
            </summary>
            <param name="list">List being examined.</param>
            <param name="value">The string value to search for.</param>
        </member>
        <member name="M:HFN.Common.ListExtensions.ContainsAny``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Returns true if the target list contains any of the values in a given list.
            </summary>
            <typeparam name="T">The type of the lists' contents.</typeparam>
            <param name="list">The <see cref="T:System.Collections.IList"/> to search for values in.</param>
            <param name="values">The <see cref="T:System.Collections.IList"/> of values to look for.</param>
        </member>
        <member name="M:HFN.Common.ListExtensions.IntersectionCount``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Returns the amount of values in the target <see cref="T:System.Collections.IList"/> that match any of the values in a given <see cref="T:System.Collections.IList"/>.
            </summary>
            <typeparam name="T">The type of the lists' contents.</typeparam>
            <param name="list">The <see cref="T:System.Collections.IList"/> to search for identical values in.</param>
            <param name="values">The <see cref="T:System.Collections.IList"/> of values to look for matches.</param>
        </member>
        <member name="M:HFN.Common.ListExtensions.GetMin(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns the minimum value in an <see cref="T:System.Collections.Generic.IList`1"/> of int values. If the list is empty, 0 will be returned.
            </summary>
            <param name="list"><see cref="!:IList&lt;int&gt;"/> to search.</param>
        </member>
        <member name="M:HFN.Common.ListExtensions.GetMax(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns the maximum value in an <see cref="T:System.Collections.Generic.IList`1"/> of int values. If the list is empty, 0 will be returned.
            </summary>
            <param name="list"><see cref="!:IList&lt;int&gt;"/> to search.</param>
        </member>
        <member name="M:HFN.Common.ListExtensions.GetMin(System.Collections.Generic.IList{System.Single})">
            <summary>
            Returns the minimum value in an <see cref="T:System.Collections.Generic.IList`1"/> of float values. If the list is empty, 0 will be returned.
            </summary>
            <param name="list"><see cref="!:IList&lt;float&gt;"/> to search.</param>
        </member>
        <member name="M:HFN.Common.ListExtensions.GetMax(System.Collections.Generic.IList{System.Single})">
            <summary>
            Returns the maximum value in an <see cref="T:System.Collections.Generic.IList`1"/> of float values. If the list is empty, 0 will be returned.
            </summary>
            <param name="list"><see cref="!:IList&lt;float&gt;"/> to search.</param>
        </member>
        <member name="T:HFN.Common.MathExtensions">
            <summary>
            Class containing functions to aid in mathematics related development.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.Invert(System.Single)">
            <summary>
            Returns the inverse of a given float (1 / number)
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.DistanceIgnoreX(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns the distance between two <see cref="T:UnityEngine.Vector3"/> values, ignoring the X value of each vector.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.DistanceIgnoreY(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns the distance between two <see cref="T:UnityEngine.Vector3"/> values, ignoring the Y value of each vector.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.DistanceIgnoreZ(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns the distance between two <see cref="T:UnityEngine.Vector3"/> values, ignoring the Z value of each vector.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.TriangleHypotenuse(System.Single,System.Single)">
            <summary>
            Finds the Hypotenuse of a triangle using the Pythagorean Theorum
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.TriangleLeg(System.Single,System.Single)">
            <summary>
            Finds the leg (side) of a triangle using the triangle's hypotenuse and the other side
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.TriangleSohAngle(System.Single,System.Single)">
            <summary>
            Finds an angle of a triangle given the length of the hypotenuse and the side opposite the desired angle
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.TriangleCahAngle(System.Single,System.Single)">
            <summary>
            Finds an angle of a triangle given the length of the hypotenuse and the side adjacent the desired angle
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.TriangleToaAngle(System.Single,System.Single)">
            <summary>
            Finds an angle of a triangle given the length of the sides adjacent and opposite the desired angle
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.RectCenterToEdgeDistance(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Checks the distance from the center of a rect to the edge, given an angle.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.RectEdgePointFromCenter(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Retrieves the coordinates of a point on a rect, given an angle (starts at the center)
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.GetPointOnCylinder(System.Single,System.Single,System.Single)">
            <summary>
            Gets a point on a cylinder's shell based on the given height, radius, of the cylinder, as well as the angle of the desired point.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.GetPointOnCylinder(System.Single,System.Single,System.Single,UnityEngine.Vector2)">
            <summary>
            Gets a point on a cylinder's shell based on the given height, radius, and center point of the cylinder, as well as the angle of the desired point.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.GetPointOnCircle(System.Single,System.Single)">
            <summary>
            Gets a point on a circle's exterior.
            </summary>
            <param name="angle">The angle for the point from the center of the circle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:HFN.Common.MathExtensions.GetSpherePoint(System.Single,System.Single,System.Single)">
            <summary>
            Gets the point on a sphere corresponding to angles X and Y using the specified radius.
            </summary>
        </member>
        <member name="M:HFN.Common.MathExtensions.GetSpherePoint(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Gets the point on a sphere corresponding to angles X and Y using the specified radius and origin.
            </summary>
        </member>
        <member name="T:HFN.Common.MeshExtensions">
            <summary>
            Class hosting functions that extend built in <see cref="T:UnityEngine.Mesh"/> functionality.
            </summary>
        </member>
        <member name="M:HFN.Common.MeshExtensions.CreatePrimitive(UnityEngine.PrimitiveType,System.Boolean)">
            <summary>
            Returns a primitive <see cref="T:UnityEngine.GameObject"/> of the specified <see cref="T:UnityEngine.PrimitiveType"/>.
            </summary>
            <param name="type">The type of primitive to create.</param>
            <param name="reverseNormals">Should the created primative's normals be reversed?</param>
        </member>
        <member name="M:HFN.Common.MeshExtensions.CreatePrimitive(UnityEngine.PrimitiveType,UnityEngine.Mesh)">
            <summary>
            Returns a primitive <see cref="T:UnityEngine.GameObject"/> of the specified <see cref="T:UnityEngine.PrimitiveType"/>.
            </summary>
            <param name="type">The type of primitive to create.</param>
            <param name="mesh">The mesh to replace the primitive's default mesh with.</param>
        </member>
        <member name="M:HFN.Common.MeshExtensions.CopyMesh(UnityEngine.Mesh)">
            <summary>
            Returns a copy of the target mesh.
            </summary>
            <param name="originalMesh">The original mesh to duplicate.</param>
        </member>
        <member name="M:HFN.Common.MeshExtensions.InvertMesh(UnityEngine.Mesh)">
            <summary>
            Returns a copy of the given <see cref="T:UnityEngine.Mesh"/> with its normals reversed.
            </summary>
            <param name="mesh">The <see cref="T:UnityEngine.Mesh"/> to create a normal reversed copy of.</param>
        </member>
        <member name="T:HFN.Common.MonoBehaviourExtensions">
            <summary>
            Class containing extension methods for the <see cref="T:UnityEngine.MonoBehaviour"/> class.
            </summary>
        </member>
        <member name="M:HFN.Common.MonoBehaviourExtensions.GetOrAddComponent``1(UnityEngine.Component,System.Boolean)">
            <summary>
            Returns the target component if it exists, or adds it if it does not.
            </summary>
            <typeparam name="T">The type of the component to add.</typeparam>
            <param name="c">The <see cref="T:UnityEngine.Component"/> to check for the desired component.</param>
            <param name="searchChildren">If true, search children for the component.</param>
        </member>
        <member name="M:HFN.Common.MonoBehaviourExtensions.CallLater(UnityEngine.MonoBehaviour,System.Single,System.Action)">
            <summary>
            Calls the given function after an initial delay.
            </summary>
            <param name="behaviour">The <see cref="T:UnityEngine.MonoBehaviour"/> calling the function.</param>
            <param name="delay">The delay before calling the given function.</param>
            <param name="callback">Function to call after a delay.</param>
        </member>
        <member name="T:HFN.Common.ObjectExtensions">
            <summary>
            Class containing extension methods for the <see cref="T:UnityEngine.Object"/> class.
            </summary>
        </member>
        <member name="M:HFN.Common.ObjectExtensions.Or``1(``0,``0)">
            <summary>
            Returns the given value if it is not null (or an empty string), otherwise returns a default value.
            </summary>
            <typeparam name="T">The type of the <see cref="T:UnityEngine.Object"/>.</typeparam>
            <param name="value">The value being examined.</param>
            <param name="defaultValue">The default value to return if the given <see cref="T:UnityEngine.Object"/> value is null.</param>
        </member>
        <member name="M:HFN.Common.ObjectExtensions.IsNull(System.Object)">
            <summary>
            Returns true if the given object is null.
            </summary>
        </member>
        <member name="T:HFN.Common.PhysicsExtensions">
            <summary>
            Class containing functions to expand built in Unity physics functionality.
            </summary>
        </member>
        <member name="F:HFN.Common.PhysicsExtensions.EMPTY_RAYCAST">
            <summary>
            Size of the RaycastHit array used by physics extensions when calculating raycasts that don't need to return hit values.
            </summary>
        </member>
        <member name="M:HFN.Common.PhysicsExtensions.RaycastWithAlpha(UnityEngine.Ray,HFN.Common.AlphaRaycastHit@,System.Single,System.Single)">
            <summary>
            Perform a raycast that considers the alpha of objects at their hit points when determining a raycast's results.
            </summary>
            <param name="ray">The <see cref="T:UnityEngine.Ray"/> to use when casting.</param>
            <param name="hit">The <see cref="T:UnityEngine.RaycastHit"/> to populate.</param>
            <param name="maxDistance">How far the raycast will travel.</param>
            <param name="alphaThreshold">The minimum alpha threshold at hit point to be considered valid.</param>
            <returns>True if the raycast hits an object with sufficient alpha at hit point.</returns>
        </member>
        <member name="M:HFN.Common.PhysicsExtensions.RaycastWithAlpha(UnityEngine.Ray,HFN.Common.AlphaRaycastHit@,System.Single,System.Int32,System.Single)">
            <summary>
            Perform a raycast that considers the alpha of objects at their hit points when determining a raycast's results.
            </summary>
            <param name="ray">The <see cref="T:UnityEngine.Ray"/> to use when casting.</param>
            <param name="hit">The <see cref="T:UnityEngine.RaycastHit"/> to populate.</param>
            <param name="maxDistance">How far the raycast will travel.</param>
            <param name="layermask">The layers to detect.</param>
            <param name="alphaThreshold">The minimum alpha threshold at hit point to be considered valid.</param>
            <returns>True if the raycast hits an object with sufficient alpha at hit point.</returns>
        </member>
        <member name="M:HFN.Common.PhysicsExtensions.RaycastAllWithAlpha(UnityEngine.Ray,System.Single,System.Single)">
            <summary>
            Perform a raycast all function that considers the alpha of objects at their hit points when determining a raycast's results.
            </summary>
            <param name="ray">The <see cref="T:UnityEngine.Ray"/> to use when casting.</param>
            <param name="maxDistance">How far the raycast will travel.</param>
            <param name="alphaThreshold">The minimum alpha threshold at hit point to be considered valid.</param>
        </member>
        <member name="M:HFN.Common.PhysicsExtensions.RaycastAllWithAlpha(UnityEngine.Ray,System.Single,System.Int32,System.Single)">
            <summary>
            Perform a raycast all function that considers the alpha of objects at their hit points when determining a raycast's results.
            </summary>
            <param name="ray">The <see cref="T:UnityEngine.Ray"/> to use when casting.</param>
            <param name="maxDistance">How far the raycast will travel.</param>
            <param name="layermask">The layers to detect.</param>
            <param name="alphaThreshold">The minimum alpha threshold at hit point to be considered valid.</param>
        </member>
        <member name="M:HFN.Common.PhysicsExtensions.RaycastWithAlphaNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit[],System.Int32[],System.Single[],System.Single,System.Int32,System.Single)">
            <summary>
            Non-garbage generating version of <see cref="M:HFN.Common.PhysicsExtensions.RaycastAllWithAlpha(UnityEngine.Ray,System.Single,System.Single)"/>.
            </summary>
            <param name="ray">The <see cref="T:UnityEngine.Ray"/> to use when casting.</param>
            <param name="results">Array of <see cref="T:UnityEngine.RaycastHit"/> values to populate.</param>
            <param name="resultIndexes">Array of indexes that indicate results by distance. Must be the same size as results.</param>
            <param name="resultDistances">Array of floats to populate and use when sorting hits by distance. Must be the same size as results.</param>
            <param name="maxDistance">How far the raycast will travel.</param>
            <param name="layermask">The layers to detect.</param>
            <param name="alphaThreshold">The minimum alpha threshold at hit point to be considered valid.</param>
        </member>
        <member name="M:HFN.Common.PhysicsExtensions.RaycastDistanceNonAlloc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit[],System.Int32@,System.Single,System.Int32)">
            <summary>
            Perform a non-garbage generating raycast and pass out the index for the closest hit.
            </summary>
            <param name="origin">Origin point of the raycast.</param>
            <param name="direction">Direction the raycast will travel in.</param>
            <param name="results">Array of <see cref="T:UnityEngine.RaycastHit"/> values to populate.</param>
            <param name="maxDistance">Maximum distance the raycast will check.</param>
            <param name="layermask">Mask for detecting hit objects with raycast.</param>
            <param name="closestIndex">Index of the closest <see cref="T:UnityEngine.RaycastHit"/> in the raycast results.</param>
            <returns>Number of results from the raycast.</returns>
        </member>
        <member name="M:HFN.Common.PhysicsExtensions.RaycastDistanceNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit[],System.Int32@,System.Single,System.Int32)">
            <summary>
            Perform a non-garbage generating raycast and pass out the index for the closest hit.
            </summary>
            <param name="ray"><see cref="T:UnityEngine.Ray"/> to use when raycasting.</param>
            <param name="results">Array of <see cref="T:UnityEngine.RaycastHit"/> values to populate.</param>
            <param name="maxDistance">Maximum distance the raycast will check.</param>
            <param name="layermask">Mask for detecting hit objects with raycast.</param>
            <param name="closestIndex">Index of the closest <see cref="T:UnityEngine.RaycastHit"/> in the raycast results.</param>
            <returns>Number of results from the raycast.</returns>
        </member>
        <member name="T:HFN.Common.RectTransformExtensions">
            <summary>
            Contains various extension methods for <see cref="T:UnityEngine.RectTransform"/> components.
            </summary>
        </member>
        <member name="M:HFN.Common.RectTransformExtensions.GetSize(UnityEngine.RectTransform)">
            <summary>
            Returns the size of the rect used by the target <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
            <param name="transform">The <see cref="T:UnityEngine.RectTransform"/> to grab the size of.</param>
        </member>
        <member name="M:HFN.Common.RectTransformExtensions.OverlapsScreenspace(UnityEngine.RectTransform,UnityEngine.RectTransform,UnityEngine.Camera)">
            <summary>
            Returns true if this <see cref="T:UnityEngine.RectTransform"/> overlaps with another <see cref="T:UnityEngine.RectTransform"/> in screenspace.
            </summary>
            <param name="target">The <see cref="T:UnityEngine.RectTransform"/> to check overlapping for.</param>
            <param name="camera">The camera to use for screenspace calculations. Will default to <see cref="P:UnityEngine.Camera.main"/> if null.</param>
        </member>
        <member name="M:HFN.Common.RectTransformExtensions.GetPaddingOffset(UnityEngine.RectOffset)">
            <summary>
            Returns the offset resulting from a <see cref="T:UnityEngine.RectOffset"/> padding value.
            </summary>
            <param name="padding">The padding used to calculate offset.</param>
        </member>
        <member name="T:HFN.Common.ReflectionExtensions">
            <summary>
            Class containing extension methods for System.Reflection classes.
            </summary>
        </member>
        <member name="M:HFN.Common.ReflectionExtensions.GetAttribute``1(System.Reflection.FieldInfo)">
            <summary>
            Returns an attribute of a given type set on a field.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.ReflectionExtensions.GetAttributes``1(System.Reflection.FieldInfo)">
            <summary>
            Returns an array containing all attributes of a given type set on a field.
            </summary>
            <typeparam name="T">The type of attributes to search for.</typeparam>
        </member>
        <member name="T:HFN.Common.StringBuilderExtensions">
            <summary>
            Extension class for System.Text.StringBuilder objects.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Trim(System.Text.StringBuilder,System.Char)">
            <summary>
            Trim chars from the beginning and end of a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="trimValue">The <see cref="T:System.Char"/> value to trim.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            Trim chars from the beginning of a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="trimValue">The <see cref="T:System.Char"/> value to trim.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            Trim chars from the end of a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="trimValue">The <see cref="T:System.Char"/> value to trim.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.IsNumber(System.Text.StringBuilder)">
            <summary>
            Returns true if the StringBuilder is a valid number. (Negative or positive with at most one point ( . )) 
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.IsInt(System.Text.StringBuilder)">
            <summary>
            Returns true if the StringBuilder is a valid int.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``1(System.Text.StringBuilder,System.String,``0,``0)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            </summary>
            <typeparam name="T"><see cref="T:System.IConvertible"/> derived type for the arguments.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``1(System.Text.StringBuilder,System.String,``0,``0,``0)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            </summary>
            <typeparam name="T"><see cref="T:System.IConvertible"/> derived type for the arguments.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
            <param name="arg2">Third argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``1(System.Text.StringBuilder,System.String,``0,``0,``0,``0)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            </summary>
            <typeparam name="T"><see cref="T:System.IConvertible"/> derived type for the arguments.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
            <param name="arg2">Third argument for the string formatting.</param>
            <param name="arg3">Fourth argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``1(System.Text.StringBuilder,System.String,``0,``0,``0,``0,``0)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            </summary>
            <typeparam name="T"><see cref="T:System.IConvertible"/> derived type for the arguments.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
            <param name="arg2">Third argument for the string formatting.</param>
            <param name="arg3">Fourth argument for the string formatting.</param>
            <param name="arg4">Fifth argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``1(System.Text.StringBuilder,System.String,``0)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            </summary>
            <typeparam name="A"><see cref="T:System.IConvertible"/> derived type for the argument.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">Argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``2(System.Text.StringBuilder,System.String,``0,``1)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            </summary>
            <typeparam name="A"><see cref="T:System.IConvertible"/> derived type for the first argument.</typeparam>
            <typeparam name="B"><see cref="T:System.IConvertible"/> derived type for the second argument.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``3(System.Text.StringBuilder,System.String,``0,``1,``2)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            </summary>
            <typeparam name="A"><see cref="T:System.IConvertible"/> derived type for the first argument.</typeparam>
            <typeparam name="B"><see cref="T:System.IConvertible"/> derived type for the second argument.</typeparam>
            <typeparam name="C"><see cref="T:System.IConvertible"/> derived type for the third argument.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
            <param name="arg2">Third argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``4(System.Text.StringBuilder,System.String,``0,``1,``2,``3)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            Code based on: http://www.gavpugh.com/2010/04/05/xnac-a-garbage-free-stringbuilder-format-method/
            </summary>
            <typeparam name="A"><see cref="T:System.IConvertible"/> derived type for the first argument.</typeparam>
            <typeparam name="B"><see cref="T:System.IConvertible"/> derived type for the second argument.</typeparam>
            <typeparam name="C"><see cref="T:System.IConvertible"/> derived type for the third argument.</typeparam>
            <typeparam name="D"><see cref="T:System.IConvertible"/> derived type for the fourth argument.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
            <param name="arg2">Third argument for the string formatting.</param>
            <param name="arg3">Fourth argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.FormatNonAlloc``5(System.Text.StringBuilder,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Formats a string inside a <see cref="T:System.Text.StringBuilder"/> without generating garbage.
            Code based on: http://www.gavpugh.com/2010/04/05/xnac-a-garbage-free-stringbuilder-format-method/
            </summary>
            <typeparam name="A"><see cref="T:System.IConvertible"/> derived type for the first argument.</typeparam>
            <typeparam name="B"><see cref="T:System.IConvertible"/> derived type for the second argument.</typeparam>
            <typeparam name="C"><see cref="T:System.IConvertible"/> derived type for the third argument.</typeparam>
            <typeparam name="D"><see cref="T:System.IConvertible"/> derived type for the fourth argument.</typeparam>
            <typeparam name="E"><see cref="T:System.IConvertible"/> derived type for the fifth argument.</typeparam>
            <param name="value"><see cref="T:System.Text.StringBuilder"/> being formatted.</param>
            <param name="key">String being formatted.</param>
            <param name="arg0">First argument for the string formatting.</param>
            <param name="arg1">Second argument for the string formatting.</param>
            <param name="arg2">Third argument for the string formatting.</param>
            <param name="arg3">Fourth argument for the string formatting.</param>
            <param name="arg4">Fifth argument for the string formatting.</param>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.ConcatFormatValue``1(System.Text.StringBuilder,``0,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Perform a garbage-free conversion of a generic type, and use the garbage-free Concat() to add to the given stringbuilder.
            </summary>
        </member>
        <member name="F:HFN.Common.StringBuilderExtensions.ms_defaultDecimalPlaces">
            <summary>
            Standard .NET formatting for decimal places
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.UInt32,System.UInt32,System.Char,System.UInt32)">
            <summary>
            Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Any base value allowed.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.UInt32)">
            <summary>
            Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Assume no padding and base ten.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.UInt32,System.UInt32)">
            <summary>
            Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Assume base ten.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.UInt32,System.UInt32,System.Char)">
            <summary>
            Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Assume base ten.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Int32,System.UInt32,System.Char,System.UInt32)">
            <summary>
            Convert a given signed integer value to a string and concatenate onto the stringbuilder. Any base value allowed.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Int32)">
            <summary>
            Convert a given signed integer value to a string and concatenate onto the stringbuilder. Assume no padding and base ten.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Int32,System.UInt32)">
            <summary>
            Convert a given signed integer value to a string and concatenate onto the stringbuilder. Assume base ten.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Int32,System.UInt32,System.Char)">
            <summary>
            Convert a given signed integer value to a string and concatenate onto the stringbuilder. Assume base ten.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Single,System.UInt32,System.UInt32,System.Char)">
            <summary>
            Convert a given float value to a string and concatenate onto the given stringbuilder.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Single)">
            <summary>
            Convert a given float value to a string and concatenate onto the given stringbuilder. Assumes five decimal places, and no padding.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Single,System.UInt32)">
            <summary>
            Convert a given float value to a string and concatenate onto the given stringbuilder. Assumes no padding.
            </summary>
        </member>
        <member name="M:HFN.Common.StringBuilderExtensions.Concat(System.Text.StringBuilder,System.Single,System.UInt32,System.UInt32)">
            <summary>
            Convert a given float value to a string and concatenate onto the given stringbuilder.
            </summary>
        </member>
        <member name="T:HFN.Common.StringExtensions">
            <summary>
            Class containing functions to expand basic string functionality.
            </summary>
        </member>
        <member name="M:HFN.Common.StringExtensions.CopyToClipboard(System.String)">
            <summary>
            Copy the given string to the clipboard.
            </summary>
            <param name="value">The string to copy to the clipboard.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.Or(System.String,System.String)">
            <summary>
            Returns a string value matching the passed string value if it is not empty or null, or a default value if it is.
            </summary>
            <param name="defaultValue">The default string value to return if the passed string is empty.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Returns true if the given string is empty or null.
            </summary>
            <param name="value">The string to check.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.IsNumber(System.String)">
            <summary>
            Returns true if the string is a valid number. (Negative or positive with at most one point ( . )) 
            </summary>
        </member>
        <member name="M:HFN.Common.StringExtensions.IsInt(System.String)">
            <summary>
            Returns true if the string is a valid float.
            </summary>
        </member>
        <member name="M:HFN.Common.StringExtensions.IsEqualTo(System.String,System.String)">
            <summary>
            Compares a string's trimmed value with another trimmed string and returns true if they match (ignoring case).
            </summary>
            <param name="other">The string to compare.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.Contains(System.String,System.Char)">
            <summary>
            Returns true if the given string contains a specific char.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> to search for.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.Capitalize(System.String)">
            <summary>
            Returns a string with a capitalized first char.
            </summary>
        </member>
        <member name="M:HFN.Common.StringExtensions.StartsWith(System.String,System.Char)">
            <summary>
            Returns true if the target <see cref="T:System.String"/> starts with the given <see cref="T:System.Char"/>.
            </summary>
            <param name="stringValue">The string to check the start value for.</param>
            <param name="value">The <see cref="T:System.Char"/> to check the target string for.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.EndsWithAny(System.String,System.String[])">
            <summary>
            Returns true if the string ends with any of the passed values.
            </summary>
            <param name="stringValue">The value to check end chars for.</param>
            <param name="values">The strings to check the target string for.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Returns a string with the given prefix string removed from it.
            </summary>
            <param name="trim">The string to trim from the start of the target string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Returns a string with the given sufix string removed from it.
            </summary>
            <param name="trim">The string to trim from the end of the target string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.FirstIndexOfAfter(System.String,System.Char,System.Int32)">
            <summary>
            Returns the index of the first char in a string that occurs after a given index.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> to search for.</param>
            <param name="startIndex">The char index to begin searching after.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToVector4(System.String,System.Char)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector4"/> parsed from the given string.
            </summary>
            <param name="delimiter">Character used to separate the vector values in the string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToVector4(System.String,UnityEngine.Vector4,System.Char)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector4"/> parsed from the given string.
            </summary>
            <param name="defaultValue">The default value to return if the string fails to parse properly.</param>
            <param name="delimiter">Character used to separate the vector values in the string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToVector3(System.String,System.Char)">
            <summary>
            Converts a string into a <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="delimiter">The delimiter character used in the string representation of the <see cref="T:UnityEngine.Vector3"/>.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToVector3(System.String,UnityEngine.Vector3,System.Char)">
            <summary>
            Converts a string into a <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="defaultValue">The default <see cref="T:UnityEngine.Vector3"/> value to use if the string fails to parse correctly.</param>
            <param name="delimiter">The delimiter character used in the string representation of the <see cref="T:UnityEngine.Vector3"/>.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToVector2(System.String,System.Char)">
            <summary>
            Converts a string into a <see cref="T:UnityEngine.Vector2"/>.
            </summary>
            <param name="delimiter">The delimiter character used in the string representation of the <see cref="T:UnityEngine.Vector2"/>.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToVector2(System.String,UnityEngine.Vector2,System.Char)">
            <summary>
            Converts a string into a <see cref="T:UnityEngine.Vector2"/>.
            </summary>
            <param name="defaultValue">The default <see cref="T:UnityEngine.Vector2"/> value to use if the string fails to parse correctly.</param>
            <param name="delimiter">The delimiter character used in the string representation of the <see cref="T:UnityEngine.Vector2"/>.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToIntArray(System.String,System.Char)">
            <summary>
            Converts a string into an array of ints.
            </summary>
            <param name="delimiter">The delimiter character used to separate int values in the original string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToArray(System.String,System.Char)">
            <summary>
            Returns an array based on the original string.
            </summary>
            <param name="delimiter">The delimiter character used to separate values in the original string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.IsTrue(System.String)">
            <summary>
            Returns true if the string could be parsed into a <see cref="T:System.Boolean"/> with a true value.
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.IsFalse(System.String)">
            <summary>
            Returns true if the string could be parsed into a <see cref="T:System.Boolean"/> with a false value.
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.IsBool(System.String)">
            <summary>
            Returns true if the string could be parsed into a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToBool(System.String,System.Boolean)">
            <summary>
            Converts a string into a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="s">The string to parse into a <see cref="T:System.Boolean"/>.</param>
            <param name="defaultValue">The default <see cref="T:System.Boolean"/> value to return if the string fails to parse.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToDelimitedString``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Returns a string representation of the given list, with values separated by the given delimiter string.
            Returns an empty string if a list with no elements is provided.
            </summary>
            <typeparam name="T">The list type.</typeparam>
            <param name="values">The list to output a string for.</param>
            <param name="delimiter">String to place between list values in the exported string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToDelimitedString``1(``0[],System.String)">
            <summary>
            Returns a string representation of the given array, with values separated by the given delimiter string.
            Returns an empty string if an array with no elements is provided.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="values">The array to output a string for.</param>
            <param name="delimiter">String to place between array values in the exported string.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToByte(System.String,System.Byte)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToShort(System.String,System.Int16)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            Parses a <see cref="T:System.String"/> into an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToLong(System.String,System.Int64)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToUnsignedShort(System.String,System.UInt16)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToUnsignedInt(System.String,System.UInt32)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToUnsignedLong(System.String,System.UInt64)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToFloat(System.String,System.Single)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToDouble(System.String,System.Double)">
            <summary>
            Parses a <see cref="T:System.String"/> value into a <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="defaultValue">The value to return if the string cannot be parsed.</param>
        </member>
        <member name="M:HFN.Common.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Parses a <see cref="T:System.String"/> value to an value of the target enum type.
            </summary>
            <typeparam name="TEnum">The enum type to parse to.</typeparam>
            <param name="value">The string value to be parsed.</param>
            <param name="defaultValue">The default value to return if the enum value cannot be parsed.</param>
        </member>
        <member name="T:HFN.Common.TransformExtensions">
            <summary>
            Contains various extension methods for <see cref="T:UnityEngine.Transform"/> components.
            </summary>
        </member>
        <member name="M:HFN.Common.TransformExtensions.SetParentTransform(UnityEngine.Transform,UnityEngine.Transform,System.Boolean)">
            <summary>
            Sets the parent transform of a transform.
            RectTransforms are stretched to fill their new parent by default.
            </summary>
        </member>
        <member name="M:HFN.Common.TransformExtensions.FindRecursive(UnityEngine.Transform,System.String)">
            <summary>
            Recursively checks for and returns a child <see cref="T:UnityEngine.Transform"/> with the given name.
            </summary>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> object to search under.</param>
            <param name="childName">The name of the child <see cref="T:UnityEngine.Transform"/> to find.</param>
        </member>
        <member name="M:HFN.Common.TransformExtensions.AddChild(UnityEngine.Transform,System.String)">
            <summary>
            Add a child object to the given <see cref="T:UnityEngine.Transform"/>.
            If the given transform is a <see cref="T:UnityEngine.RectTransform"/>, the new child will be stretched with a size delta of (0, 0).
            </summary>
            <param name="t">The <see cref="T:UnityEngine.Transform"/> to add the child to.</param>
            <param name="name">The name of the new child.</param>
        </member>
        <member name="M:HFN.Common.TransformExtensions.GetPath(UnityEngine.Transform)">
            <summary>
            Returns a string representing the path to the target transform from the root of the scene.
            </summary>
            <param name="target">The <see cref="T:UnityEngine.Transform"/> to grab the path for.</param>
        </member>
        <member name="T:HFN.Common.TypeExtensions">
            <summary>
            Class containing extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:HFN.Common.TypeExtensions.GetAttribute``1(System.Type)">
            <summary>
            Gets an attribute of a specific type from a given Type.
            </summary>
            <typeparam name="T">Type of the attribute to get.</typeparam>
            <param name="type"></param>
        </member>
        <member name="T:HFN.Common.UnityWebRequestExtensions">
            <summary>
            Class containing extension methods for the <see cref="T:UnityEngine.Networking.UnityWebRequest"/> class.
            </summary>
        </member>
        <member name="F:HFN.Common.UnityWebRequestExtensions.UNFINISHED_STATUS_CODE">
            <summary>
            Status code returned when an operation is still running.
            </summary>
        </member>
        <member name="F:HFN.Common.UnityWebRequestExtensions.SUCCESS_STATUS_CODE">
            <summary>
            Status code returned when an operation is successful.
            </summary>
        </member>
        <member name="F:HFN.Common.UnityWebRequestExtensions.UNKNOWN_STATUS_CODE">
            <summary>
            Status code returned when an operation completes with an unknown error.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityWebRequestExtensions.RetrieveStatusCode(UnityEngine.Networking.UnityWebRequest)">
            <summary>
            Returns the status code for the given completed <see cref="T:UnityEngine.Networking.UnityWebRequest"/>.
            If the request is not done, will return <see cref="F:HFN.Common.UnityWebRequestExtensions.UNFINISHED_STATUS_CODE"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityWebRequestExtensions.GetDebugInfo(UnityEngine.Networking.UnityWebRequest)">
            <summary>
            Returns debug data, based on the given <see cref="T:UnityEngine.Networking.UnityWebRequest"/>'s response.
            </summary>
        </member>
        <member name="T:HFN.Common.VectorExtensions">
            <summary>
            Contains various extension methods for Vectors.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.GetDirection(UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Gets a direction from a point based on X and Y rotations.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.GetLowestPointX(UnityEngine.Vector3[])">
            <summary>
            Returns the Vector3 point with the lowest X value.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.GetLowestPointY(UnityEngine.Vector3[])">
            <summary>
            Returns the Vector3 point with the lowest Y value.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.GetLowestPointZ(UnityEngine.Vector3[])">
            <summary>
            Returns the Vector3 point with the lowest Z value.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.GetHighestPointX(UnityEngine.Vector3[])">
            <summary>
            Returns the Vector3 point with the highest X value.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.GetHighestPointY(UnityEngine.Vector3[])">
            <summary>
            Returns the Vector3 point with the highest Y value.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.GetHighestPointZ(UnityEngine.Vector3[])">
            <summary>
            Returns the Vector3 point with the highest X value.
            </summary>
        </member>
        <member name="M:HFN.Common.VectorExtensions.Round(UnityEngine.Vector2)">
            <summary>
            Rounds a <see cref="T:UnityEngine.Vector2"/>'s values to the nearest whole number.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to round.</param>
        </member>
        <member name="M:HFN.Common.VectorExtensions.Round(UnityEngine.Vector3)">
            <summary>
            Rounds a <see cref="T:UnityEngine.Vector3"/>'s values to the nearest whole number.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to round.</param>
        </member>
        <member name="M:HFN.Common.VectorExtensions.Round(UnityEngine.Vector4)">
            <summary>
            Rounds a <see cref="T:UnityEngine.Vector4"/>'s values to the nearest whole number.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector4"/> to round.</param>
        </member>
        <member name="M:HFN.Common.VectorExtensions.RoundToInt(UnityEngine.Vector2)">
            <summary>
            Rounds a <see cref="T:UnityEngine.Vector2"/>'s values to the nearest int values.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to round.</param>
        </member>
        <member name="M:HFN.Common.VectorExtensions.RoundToInt(UnityEngine.Vector3)">
            <summary>
            Rounds a <see cref="T:UnityEngine.Vector3"/>'s values to the nearest int values.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to round.</param>
        </member>
        <member name="T:HFN.Common.AudioFileCreation">
            <summary>
            Class used to create audio files from <see cref="T:UnityEngine.AudioClip"/> assets.
            https://gist.github.com/darktable/2317063
            </summary>
        </member>
        <member name="M:HFN.Common.AudioFileCreation.Save(System.String,UnityEngine.AudioClip)">
            <summary>
            Creates an audio file from the given <see cref="T:UnityEngine.AudioClip"/>.
            </summary>
            <param name="filepath">The absolute path to the created audio file.</param>
            <param name="clip"><see cref="T:UnityEngine.AudioClip"/> to create an audio file from.</param>
        </member>
        <member name="M:HFN.Common.AudioFileCreation.TrimSilence(UnityEngine.AudioClip,System.Single)">
            <summary>
            Trims the silence from both ends of an <see cref="T:UnityEngine.AudioClip"/> and returns the modified result.
            </summary>
            <param name="clip">The clip to trim silence from.</param>
            <param name="min">The minimum sample threshold. Lower values are treated as silence.</param>
        </member>
        <member name="M:HFN.Common.AudioFileCreation.TrimSilence(System.Collections.Generic.List{System.Single},System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Trims the silence from both ends of an audio clip's data and returns the modified <see cref="T:UnityEngine.AudioClip"/> result.
            </summary>
            <param name="samples">List of samples for the clip.</param>
            <param name="min">The minimum sample threshold. Lower values are treated as silence.</param>
            <param name="channels">Number of channels per frame.</param>
            <param name="hz">The frequency of the clip in hertz.</param>
            <param name="stream">True if the pcmreadercallback generates data on the fly.</param>
        </member>
        <member name="T:HFN.Common.FileLocations">
            <summary>
            Common locations file interactions may take place in.
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.Custom">
            <summary>
            Custom directory.
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.DriveRoot">
            <summary>
            The root folder for the disk drive.
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.Desktop">
            <summary>
            The user's desktop folder.
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.Documents">
            <summary>
            The user's documents folder.
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.Users">
            <summary>
            The users folder (folder containing all users on the device)
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.ActiveUser">
            <summary>
            The root folder for the current user.
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.DataPath">
            <summary>
            The DataPath folder. (Project Assets folder in Editor, Build folder in standalone)
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.PersistentDataPath">
            <summary>
            The PersistantDataPath folder.
            </summary>
        </member>
        <member name="F:HFN.Common.FileLocations.StreamingAssets">
            <summary>
            The streaming assets folder.
            </summary>
        </member>
        <member name="T:HFN.Common.FileManager">
            <summary>
            Convenience class for accessing files and directories.
            </summary>
            <summary>
            Convenience class for accessing files and directories on standalone platforms.
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.AbsolutePath">
            <summary>
            Path to the <see cref="P:UnityEngine.Application.dataPath"/> folder, properly formatted for local or remote access.
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.AssetPath">
            <summary>
            Path to the Asset folder.
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.ProjectPath">
            <summary>
            Path to the project folder.
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.ProjectDirectoryPath">
            <summary>
            Path to the project folder itself (for its contents, use <see cref="P:HFN.Common.FileManager.ProjectPath"/>).
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.CombinePaths(System.String,System.String)">
            <summary>
            Combines two paths into one. (Usually used to combine a file name with something like <see cref="P:UnityEngine.Application.dataPath"/>.
            </summary>
            <param name="path1">First path to combine.</param>
            <param name="path2">Second path to combine.</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetLocalPath(System.String)">
            <summary>
            Converts an absolute path into a path relative to the project.
            ie: Assets/StreamingAssets/version.txt
            (If the path is outside the project, returns the the path unchanged)
            </summary>
            <param name="filePath">The absolute file path to get the local path for.</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetFileName(System.String,System.Boolean)">
            <summary>
            Gets the name of the file at the given path.
            Can include or exclude the extension as well.
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.GetFileDirectory(System.String,System.Boolean)">
            <summary>
            Returns a path for the folder containing the target file.
            </summary>
            <param name="filePath">The path to the target file.</param>
            <param name="folderPathOnly">If true, will return a path without a trailing '/' char.</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetFileExtension(System.String,System.Boolean)">
            <summary>
            Gets the extension of the file at the given path.
            </summary>
            <param name="relative">Is the given path relative to the project folder?</param>
        </member>
        <member name="M:HFN.Common.FileManager.LoadMainAssetFromBundle``1(System.String,System.String,System.Action{``0},System.Action)">
            <summary>
            Loads an asset from the <see cref="T:UnityEngine.AssetBundle"/> at the given URL.
            </summary>
            <typeparam name="T">Type of the asset to load.</typeparam>
            <param name="bundleUrl">The URL for the target <see cref="T:UnityEngine.AssetBundle"/>.</param>
            <param name="assetName">The name of the asset to load from the bundle.</param>
            <param name="onSuccess">Callback to invoke when the bundle is successfully loaded.</param>
            <param name="onFailure">Callback to invoke when the bundle fails to load.</param>
        </member>
        <member name="M:HFN.Common.FileManager.LoadImage(System.String,HFN.Common.FileManager.ImageLoadDelegate,HFN.Common.FileManager.TextLoadDelegate)">
            <summary>
            Loads an image file into a <see cref="T:UnityEngine.Texture2D"/>.
            </summary>
            <param name="path">Path (relative to the <see cref="P:UnityEngine.Application.dataPath"/> folder) </param>
            <param name="callback">Callback to invoke once the texture is fully loaded.</param>
            <param name="failCallback">Callback with <see cref="T:System.Int32"/> and <see cref="T:System.String"/> parameters that will be fired if the image cannot be loaded.</param>
        </member>
        <member name="M:HFN.Common.FileManager.LoadImage(System.String,HFN.Common.FileManager.ImageLoadDelegate,HFN.Common.FileManager.TextLoadDelegate,System.Boolean)">
            <summary>
            Loads an image file into a <see cref="T:UnityEngine.Texture2D"/>.
            </summary>
            <param name="path">Path (relative to the <see cref="P:UnityEngine.Application.dataPath"/> folder) </param>
            <param name="callback">Callback to invoke once the texture is fully loaded.</param>
            <param name="failCallback">Callback with <see cref="T:System.Int32"/> and <see cref="T:System.String"/> parameters that will be fired if the image cannot be loaded.</param>
            <param name="relative">If true, the path is expected to be relative to the <see cref="P:UnityEngine.Application.dataPath"/> folder.</param>
        </member>
        <member name="P:HFN.Common.FileManager.RootDrive">
            <summary>
            Path to the root drive.
            On Windows this is usually ( C:/ or D:/ )
            On Mac this is usually just ( / )
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.RootDrives">
            <summary>
            Names for the root drives on the computer. (ie "C:", "D:", etc)
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.DesktopPath">
            <summary>
            Path to the user's desktop folder.
            ie C:\Users\USERNAME\Desktop
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.DocumentsPath">
            <summary>
            Path to the current user's documents folder.
            ie C:\Users\USERNAME\Documents
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.UsersPath">
            <summary>
            The path to the root folder for all users on this device.
            ie C:/Users
            </summary>
        </member>
        <member name="P:HFN.Common.FileManager.ActiveUserPath">
            <summary>
            The path to the current user's folder.
            ie C:/Users/USERNAME
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.GetFolderLocation(HFN.Common.FileLocations)">
            <summary>
            Returns a string path for the target <see cref="T:HFN.Common.FileLocations"/> value.
            </summary>
            <param name="targetFolder">The folder to return a path to.</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetRelativePath(System.String,System.String)">
            <summary>
            Returns a relative path from the original absolute path to the target absolute path.
            </summary>
            <param name="origin">The absolute path to base the relative path on.</param>
            <param name="relativeTarget">The absolute path to get a relative path from the origin for.</param>
        </member>
        <member name="M:HFN.Common.FileManager.ClearCachedRootDrives">
            <summary>
            Clear the cached names for root drives on the computer.
            This is mostly useful if the player may navigate to thumb drives that weren't inserted at startup.
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.GetDirectories(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns all of the directories below the specified directory.
            </summary>
            <param name="path">Path to the directory whose sub-directories should be found.</param>
            <param name="relative">Is the given path relative to the project folder?</param>
            <param name="searchSubdirectories">Specifies whether the search operation should include folders from all subdirectories or only the target directory.</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetDirectories(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Returns all of the directories below the specified directory.
            </summary>
            <param name="path">Path to the directory whose sub-directories should be found.</param>
            <param name="relative">Is the given path relative to the project folder?</param>
            <param name="searchPattern">The search string to match against the names of subdirectories in path.</param>
            <param name="searchSubdirectories">Specifies whether the search operation should include folders from all subdirectories or only the target directory.</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetFiles(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Searches a given directory and returns paths for files that match the specified search pattern.
            </summary>
            <param name="path">Path for the directory to search.</param>
            <param name="relative">Is the directory's path relative to the project folder?</param>
            <param name="searchPattern">Search pattern to use when searching for files.</param>
            <param name="searchSubdirectories">Should folders below the target directory be searched through as well?</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetFiles(System.String,System.String[])">
            <summary>
            Gets the files at the given directory path.
            If the path is not a directory, returns the file path.
            </summary>
            <param name="path">The absolute file path to examine.</param>
            <param name="acceptedExtensions">The file extensions to allow. If empty will show all files (not including directories).</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetFiles(System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Gets the files at the given directory path.
            If the path is not a directory, returns the file path.
            (This does not return meta files unless the "meta" extension is explicitly searched for)
            </summary>
            <param name="path">The file path to examine.</param>
            <param name="relative">Is the given path relative to the project folder?</param>
            <param name="searchSubdirectories">Should folders below the target directory be searched through as well?</param>
            <param name="acceptedExtensions">The file extensions to allow. If empty will show all files (not including directories).</param>
        </member>
        <member name="M:HFN.Common.FileManager.DirectoryExists(System.String)">
            <summary>
            Checks if a directory exists at the specified path
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.FileExists(System.String)">
            <summary>
            Checks if a file exists at the specified path.
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.HasExtention(System.String,System.String)">
            <summary>
            Checks if the file at the specified path has the specified extention
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.CopyFile(System.String,System.String)">
            <summary>
            Copy a file to a new location.
            </summary>
            <param name="filePath">The file to copy.</param>
            <param name="destinationPath">The file to create from the copied file.</param>
        </member>
        <member name="M:HFN.Common.FileManager.DeleteFile(System.String)">
            <summary>
            Delete the file at the given path.
            </summary>
            <param name="filePath">Path for the file that will be deleted.</param>
        </member>
        <member name="M:HFN.Common.FileManager.HasAttribute(System.String,System.IO.FileAttributes)">
            <summary>
            Checks if the file at the specified path has the specified attribute.
            </summary>
            <param name="path">Path to the file.</param>
            <param name="attribute">The attribute to check for.</param>
        </member>
        <member name="M:HFN.Common.FileManager.GetFileAttributes(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> associated with the file at the given path.
            </summary>
            <param name="path">The file to retrieve attributes for.</param>
            <param name="relative">Is the given path relative to the project folder?</param>
        </member>
        <member name="M:HFN.Common.FileManager.IsReadOnly(System.String,System.Boolean)">
            <summary>
            Returns true if the file or folder at the target path is flagged as ReadOnly.
            </summary>
            <param name="path">The path to the file or folder.</param>
            <param name="relative">Is the given path relative to the project folder?</param>
        </member>
        <member name="M:HFN.Common.FileManager.CanWriteToFolder(System.String)">
            <summary>
            Returns true if the user can write to the target folder.
            </summary>
            <param name="folderPath">The path to the target folder.</param>
        </member>
        <member name="M:HFN.Common.FileManager.SetFileAttributes(System.String,System.IO.FileAttributes,System.Boolean)">
            <summary>
            Sets the <see cref="T:System.IO.FileAttributes"/> associated with the file at the given path.
            </summary>
            <param name="path">The file to set attributes for.</param>
            <param name="attributes">The attributes to set.</param>
            <param name="relative">Is the given path relative to the project folder?</param>
        </member>
        <member name="M:HFN.Common.FileManager.ReadText(System.String,System.Boolean)">
            <summary>
            Reads the given file's text into a usable string.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="relative">If true, the path is interpreted to be relative to the project folder.</param>
        </member>
        <member name="M:HFN.Common.FileManager.ReadLines(System.String,System.Boolean)">
            <summary>
            Reads the given file's text into usable strings, line by line.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="relative">If true, the path is interpreted to be relative to the project folder.</param>
        </member>
        <member name="M:HFN.Common.FileManager.WriteText(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes some text to a file. This will override whatever text is contained in the file if it already exists.
            Use <see cref="M:HFN.Common.FileManager.AppendText(System.String,System.String,System.Boolean,System.Boolean)"/> to add text to an file's contents without overwriting it completely.
            </summary>
            <seealso cref="M:HFN.Common.FileManager.AppendText(System.String,System.String,System.Boolean,System.Boolean)"/>
            <param name="path">The path to the file.</param>
            <param name="content">The text content to write to the file.</param>
            <param name="relative">If true, the path is interpreted to be relative to the project folder.</param>
            <param name="create">If true, a new file will be created if one doesn't exist at the given path.</param>
        </member>
        <member name="M:HFN.Common.FileManager.AppendText(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Appends some text to a file's existing contents.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="content">The text content to write to the file.</param>
            <param name="relative">If true, the path is interpreted to be relative to the project folder.</param>
            <param name="create">If true, a new file will be created if one doesn't exist at the given path.</param>
        </member>
        <member name="M:HFN.Common.FileManager.WriteLines(System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Writes the given lines of text to a file.
            </summary>
            <param name="path">The path to write the file to.</param>
            <param name="lines">The lines of text to write to the file. Each element in the array is a line.</param>
            <param name="relative">Is the given path relative to the project folder?</param>
            <param name="create">Create a file if one doesn't exist at the target path.</param>
        </member>
        <member name="M:HFN.Common.FileManager.CreateFile(System.String,System.Byte[])">
            <summary>
            Create a file at the given path containing the given bytes.
            </summary>
            <param name="path">The path for the file to create.</param>
            <param name="bytes">The bytes for the data to write to the file.</param>
        </member>
        <member name="M:HFN.Common.FileManager.CreateDirectory(System.String)">
            <summary>
            Creates a directory at the given path.
            </summary>
        </member>
        <member name="M:HFN.Common.FileManager.LoadImageBytes(System.String,System.Boolean)">
            <summary>
            Loads and image file's byte data.
            </summary>
            <param name="path">Path to the image file.</param>
            <param name="relative">If true, the path is expected to be relative to the <see cref="P:UnityEngine.Application.dataPath"/> folder.</param>
        </member>
        <member name="T:HFN.Common.FormationDimension">
            <summary>
            Enum determining the directions <see cref="T:HFN.Common.Formation"/> slots are positioned along.
            </summary>
        </member>
        <member name="T:HFN.Common.FormationShape">
            <summary>
            Enum determining the shape a <see cref="T:HFN.Common.Formation"/> object's slots are positioned in.
            </summary>
        </member>
        <member name="T:HFN.Common.Formation">
            <summary>
            Class used to handle positioning transforms around a given transform.
            </summary>
        </member>
        <member name="P:HFN.Common.Formation.IsUI">
            <summary>
            Is the formation transform a <see cref="T:UnityEngine.RectTransform"/>?
            </summary>
        </member>
        <member name="M:HFN.Common.Formation.AssignSlotTo(UnityEngine.Transform)">
            <summary>
            Assigns the given <see cref="T:UnityEngine.Transform"/> to occupy the first open slot on the formation.
            Returns the affected slot, or null if all existing slots are occupied.
            </summary>
            <param name="content">The <see cref="T:UnityEngine.Transform"/> to assign to occupy the first open slot.</param>
        </member>
        <member name="T:HFN.Common.FormationSlot">
            <summary>
            Slot for use in the <see cref="T:HFN.Common.Formation"/> class.
            </summary>
        </member>
        <member name="P:HFN.Common.FormationSlot.Child">
            <summary>
            The <see cref="T:UnityEngine.Transform"/> assigned to occupy this slot.
            </summary>
        </member>
        <member name="P:HFN.Common.FormationSlot.IsEmpty">
            <summary>
            Returns true if a <see cref="T:UnityEngine.Transform"/> has not been assigned to occupy this slot.
            </summary>
        </member>
        <member name="M:HFN.Common.FormationSlot.AssignTo(UnityEngine.Transform)">
            <summary>
            Assign the given <see cref="T:UnityEngine.Transform"/> to occupy the slot. Returns true if the target was successfully set, returns false if the slot was already occupied.
            Note: This will NOT parent the transform to this slot, nor will it automatically move the transform to this slot's position.
            </summary>
            <param name="child">The <see cref="T:UnityEngine.Transform"/> that will occupy the slot.</param>
        </member>
        <member name="M:HFN.Common.FormationSlot.Release">
            <summary>
            Releases the slot of it's <see cref="P:HFN.Common.FormationSlot.Child"/>.
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplayCursorPoint">
            <summary>
            Determines what point on the cursor is used for selection.
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplayCursorType">
            <summary>
            Determines how the cursor behaves.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayCursorType.Mouse">
            <summary>
            The cursor follows the mouse cursor.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayCursorType.ScreenCenter">
            <summary>
            The cursor follows the screen's center point.
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplayInteractionType">
            <summary>
            Determines how a <see cref="T:HFN.Common.GuiDisplay"/> handles player interactions.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayInteractionType.Basic">
            <summary>
            A single button press near the display
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayInteractionType.GUI">
            <summary>
            Actual interation with a gui on the display
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayInteractionType.Proximity">
            <summary>
            Within a set distance
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplayType">
            <summary>
            Determines if a <see cref="T:HFN.Common.GuiDisplay"/> can be interacted with.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayType.Basic">
            <summary>
            No user interaction.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayType.Interactive">
            <summary>
            Players can interact with the display.
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplay">
            <summary>
            Displays interactable UI on in game screens. (Think Doom 3's in-game computer displays)
            This is essentially an isolated UI system with calls similar to <see cref="T:HFN.Common.UIManager"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplay.baseCanvas">
            <summary>
            Canvas for display views.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplay.displayType">
            <summary>
            Sets how the display reacts to player input.
            Basic - No user interaction.
            Interactive - Players can interact with the display.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplay.interactionType">
            <summary>
            Sets if the display activates based on player interactions or proximity.
            Basic - A single button press near the display.
            GUI - Actual interaction with a GUI on the display.
            Proximity - Within a set distance.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplay.proximityZone">
            <summary>
            Proximity zone that will activate/deactivate the display when entered/exited.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplay.defaultView">
            <summary>
            Default view to display when activating the display.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplay.defaultCursorView">
            <summary>
            Default cursor view for display.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplay.viewPrefabs">
            <summary>
            Prefabs for this display's GuiDisplayViews.
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplay.ActivateDisplay">
            <summary>
            Activate the display and show default views.
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplay.DeactivateDisplay">
            <summary>
            Deactivate the display and close views.
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplay.OpenDisplayView``1(System.Boolean,``0)">
            <summary>
            Open a display view of the given type.
            </summary>
            <typeparam name="T">The type of the view to open.</typeparam>
            <param name="showCursor">If true, will try to open a cursor view when opening the target view.</param>
            <param name="viewPrefab">The prefab to instantiate for the target view if it doesn't already exist. If null, will search through the display's list of view prefabs.</param>
        </member>
        <member name="M:HFN.Common.GuiDisplay.CloseDisplayView``1">
            <summary>
            Close a display view of the given type.
            </summary>
            <typeparam name="T">The type of the view to close.</typeparam>
        </member>
        <member name="M:HFN.Common.GuiDisplay.ShowDisplayCursor``1">
            <summary>
            Open a display cursor view.
            </summary>
            <typeparam name="T">The type of the cursor view to open.</typeparam>
        </member>
        <member name="M:HFN.Common.GuiDisplay.HideDisplayCursor``1">
            <summary>
            Close a display cursor view of the given type.
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplay.GetDisplayView``1(``0)">
            <summary>
            Get a <see cref="T:HFN.Common.GuiDisplayView"/> referenced by this display.
            </summary>
            <typeparam name="T">The type of view to retrieve.</typeparam>
            <param name="viewPrefab">The prefab to instantiate if the view doesn't already exist. If null, will search through the display's list of view prefabs.</param>
        </member>
        <member name="T:HFN.Common.GuiDisplayCursor">
            <summary>
            Base class for cursors used in a <see cref="T:HFN.Common.GuiDisplay"/> system.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayCursor.point">
            <summary>
            The point on the cursor that is used to select objects.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayCursor.size">
            <summary>
            The size of the cursor.
            </summary>
        </member>
        <member name="P:HFN.Common.GuiDisplayCursor.Point">
            <summary>
            The point on the cursor that is used to select objects.
            </summary>
        </member>
        <member name="P:HFN.Common.GuiDisplayCursor.Size">
            <summary>
            The size of the cursor.
            </summary>
        </member>
        <member name="P:HFN.Common.GuiDisplayCursor.Sprite">
            <summary>
            The <see cref="T:UnityEngine.Sprite"/> shown on the cursor.
            </summary>
        </member>
        <member name="P:HFN.Common.GuiDisplayCursor.Color">
            <summary>
            The <see cref="T:UnityEngine.Color"/> tint of the cursor.
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplayCursorView">
            <summary>
            Base class for a <see cref="T:HFN.Common.GuiDisplayView"/> that shows a cursor on its <see cref="T:HFN.Common.GuiDisplay"/> canvas.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayCursorView.cursorType">
            <summary>
            How the cursor is positioned.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayCursorView.cursorParent">
            <summary>
            RectTransform to parent cursors to.
            </summary>
        </member>
        <member name="F:HFN.Common.GuiDisplayCursorView.cursorPrefab">
            <summary>
            Prefab to spawn for the cursor.
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplayCursorView.SimulateHoverEnter">
            <summary>
            Simulates a hover event for when the cursor is hovering over UI elements.
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplayCursorView.SimulateHoverExit">
            <summary>
            Simulates a hover event for when the cursor stops hovering over UI elements.
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplayCursorView.SimulatePress">
            <summary>
            Simulates an event for when the cursor is "pressed".
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplayCursorView.SimulateRelease">
            <summary>
            Simulates an event for when the cursor is "released".
            </summary>
        </member>
        <member name="M:HFN.Common.GuiDisplayCursorView.SimulateClick">
            <summary>
            Simulates an event for when the cursor is "clicked".
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplayView">
            <summary>
            Base class for UI shown on <see cref="T:HFN.Common.GuiDisplay"/> canvases.
            </summary>
        </member>
        <member name="P:HFN.Common.GuiDisplayView.Root">
            <summary>
            The root of the view that will be enabled / disabled when showing / hiding the view.
            </summary>
        </member>
        <member name="T:HFN.Common.GuiDisplayZone">
            <summary>
            Activates/deactivates a <see cref="T:HFN.Common.GuiDisplay"/> when the player enters/exits a specific area.
            </summary>
        </member>
        <member name="T:HFN.Common.SceneManager">
            <summary>
            Class handling loading scenes and transitioning to them.
            </summary>
        </member>
        <member name="P:HFN.Common.SceneManager.ActiveSceneName">
            <summary>
            The name of the currently loaded scene.
            </summary>
        </member>
        <member name="P:HFN.Common.SceneManager.ActiveScenePath">
            <summary>
            The path of the currently loaded scene, relative to the assets folder.
            </summary>
        </member>
        <member name="P:HFN.Common.SceneManager.ActiveSceneId">
            <summary>
            The <see cref="T:HFN.Common.SceneId"/> of the currently loaded scene.
            </summary>
        </member>
        <member name="M:HFN.Common.SceneManager.LoadScene(HFN.Common.SceneId,System.Action)">
            <summary>
            Loads the scene associated with the given <see cref="T:HFN.Common.SceneId"/>.
            </summary>
            <param name="id"><see cref="T:HFN.Common.SceneId"/> associated with the desired scene to load.</param>
            <param name="callback">Callback invoked when loading is finished.</param>
        </member>
        <member name="M:HFN.Common.SceneManager.LoadSceneAsync(HFN.Common.SceneId,System.Action)">
            <summary>
            Asynchronously loads the scene associated with the given <see cref="T:HFN.Common.SceneId"/>.
            </summary>
            <param name="id"><see cref="T:HFN.Common.SceneId"/> associated with the desired scene to load.</param>
            <param name="callback">Callback invoked when loading is finished.</param>
        </member>
        <member name="T:HFN.Common.LocalizedFont">
            <summary>
            Data associating specific fonts with specific languages.
            </summary>
        </member>
        <member name="F:HFN.Common.LocalizedFont.language">
            <summary>
            The language associated with the target font.
            </summary>
        </member>
        <member name="F:HFN.Common.LocalizedFont.font">
            <summary>
            The font associated with the target language.
            </summary>
        </member>
        <member name="T:HFN.Common.LocalizedFontCollection">
            <summary>
            Class containing font associations with specific languages. When <see cref="P:HFN.Common.LocalizationSettings.CurrentLanguage"/> is changed, <see cref="T:HFN.Common.LocalizedLabel"/>s will check if the new language has a specific font associated with it.
            </summary>
        </member>
        <member name="F:HFN.Common.LocalizedFontCollection.fallbackFont">
            <summary>
            Font used when a language has no specific font.
            </summary>
        </member>
        <member name="F:HFN.Common.LocalizedFontCollection.fonts">
            <summary>
            Fonts associated with specific languages.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizedFontCollection.CurrentFont">
            <summary>
            Returns the font associated with the current <see cref="P:HFN.Common.LocalizationSettings.CurrentLanguage"/> value, or a fallback font if no specific font is used.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizedFontCollection.GetFont(HFN.Common.LanguageCode)">
            <summary>
            Gets a font associated with the specified language, or a fallback font if no specific font is associated with the target language.
            </summary>
            <param name="language">The language to grab a specific font for.</param>
        </member>
        <member name="T:HFN.Common.LanguageCode">
            <summary>
            Enum showing standardized language codes.
            Based on: https://www.andiamo.co.uk/resources/iso-language-codes
            \image html Localization/LanguageCode01.png
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.None">
            <summary>
            No language.
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AF">
            <summary>
            Afrikaans
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_AE">
            <summary>
            Arabic (U.A.E.)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_BH">
            <summary>
            Arabic (Bahrain)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_DZ">
            <summary>
            Arabic (Algeria)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_EG">
            <summary>
            Arabic (Egypt)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_IQ">
            <summary>
            Arabic (Iraq)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_JO">
            <summary>
            Arabic (Jordan)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_KW">
            <summary>
            Arabic (Kuwait)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_LB">
            <summary>
            Arabic (Lebanon)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_LY">
            <summary>
            Arabic (Libya)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_MA">
            <summary>
            Arabic (Morocco)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_OM">
            <summary>
            Arabic (Oman)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_QA">
            <summary>
            Arabic (Qatar)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_SA">
            <summary>
            Arabic (Saudi Arabia)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_SY">
            <summary>
            Arabic (Syria)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_TN">
            <summary>
            Arabic (Tunisia)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.AR_YE">
            <summary>
            Arabic (Yemen)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.BE">
            <summary>
            Belarusian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.BG">
            <summary>
            Bulgarian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.CA">
            <summary>
            Catalan
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.CS">
            <summary>
            Czech
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.CY">
            <summary>
            Welsh
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.DA">
            <summary>
            Danish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.DE">
            <summary>
            German
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.DE_AT">
            <summary>
            German (Austria)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.DE_CH">
            <summary>
            German (Switzerland)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.DE_LI">
            <summary>
            German (Liechtenstein)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.DE_LU">
            <summary>
            German (Luvembourg)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EL">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN">
            <summary>
            English
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_AU">
            <summary>
            English (Austrailia)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_BZ">
            <summary>
            English (Belize)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_CA">
            <summary>
            English (Canada)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_GB">
            <summary>
            English (United Kingdom)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_IE">
            <summary>
            English (Ireland)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_JM">
            <summary>
            English (Jamaica)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_NZ">
            <summary>
            English (New Zealand)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_TT">
            <summary>
            English (Trinidad)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_US">
            <summary>
            English (United States)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EN_ZA">
            <summary>
            English (South Africa)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES">
            <summary>
            Spanish (Spain)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_AR">
            <summary>
            Spanish (Argentina)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_BO">
            <summary>
            Spanish (Bolivia)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_CL">
            <summary>
            Spanish (Chile)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_CO">
            <summary>
            Spanish (Colombia)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_CR">
            <summary>
            Spanish (Costa Rica)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_DO">
            <summary>
            Spanish (Dominican Republic)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_EC">
            <summary>
            Spanish (Ecuador)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_GT">
            <summary>
            Spanish (Guatemala)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_HN">
            <summary>
            Spanish (Honduras)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_MX">
            <summary>
            Spanish (Mexico)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_NI">
            <summary>
            Spanish (Nicaragua)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_PA">
            <summary>
            Spanish (Panama)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_PE">
            <summary>
            Spanish (Peru)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_PR">
            <summary>
            Spanish (Puerto Rico)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_PY">
            <summary>
            Spanish (Paraguay)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_SV">
            <summary>
            Spanish (El Salvador)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_UY">
            <summary>
            Spanish (Uruguay)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ES_VE">
            <summary>
            Spanish (Venezuela)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ET">
            <summary>
            Estonian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EU">
            <summary>
            Basque
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FA">
            <summary>
            Farsi
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FI">
            <summary>
            Finnish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FO">
            <summary>
            Faeroese
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FR">
            <summary>
            French
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FR_BE">
            <summary>
            French (Belgium)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FR_CA">
            <summary>
            French (Canada)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FR_CH">
            <summary>
            French (Switzerland)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.FR_LU">
            <summary>
            French (Luxembourg)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.GA">
            <summary>
            Irish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.GD">
            <summary>
            Gaelic (Scotland)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.HE">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.HI">
            <summary>
            Hindi
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.HR">
            <summary>
            Croatian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.HU">
            <summary>
            Hungarian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ID">
            <summary>
            Indonesian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.IS">
            <summary>
            Icelandic
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.IT">
            <summary>
            Italian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.IT_CH">
            <summary>
            Italian (Switzerland)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.JA">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.JI">
            <summary>
            Yiddish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.KO">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.KU">
            <summary>
            Kurdish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.LT">
            <summary>
            Lithuanian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.LV">
            <summary>
            Latvian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.MK">
            <summary>
            Macedonian (FYROM)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ML">
            <summary>
            Malayalam
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.MS">
            <summary>
            Malaysian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.MT">
            <summary>
            Maltese
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.NL">
            <summary>
            Dutch
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.NL_BE">
            <summary>
            Dutch (Belgium)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.NB">
            <summary>
            Norwegian (Bokmal)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.NN">
            <summary>
            Norwegian (Nynorsk)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.NO">
            <summary>
            Norwegian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.PA">
            <summary>
            Punjabi
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.PL">
            <summary>
            Polish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.PT">
            <summary>
            Portugese
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.PT_BR">
            <summary>
            Portugese (Brazil)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.RM">
            <summary>
            Rhaeto-Romanic
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.RO">
            <summary>
            Romanian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.RO_MD">
            <summary>
            Romanian (Republic of Moldova)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.RU">
            <summary>
            Russian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.RU_MD">
            <summary>
            Russian (Republic of Moldova)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SB">
            <summary>
            Sorbian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SK">
            <summary>
            Slovak
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SL">
            <summary>
            Slovenian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SQ">
            <summary>
            Albanian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SR">
            <summary>
            Serbian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SV">
            <summary>
            Swedish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SV_FI">
            <summary>
            Swedish (Finland)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.TH">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.TN">
            <summary>
            Tswana
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.TR">
            <summary>
            Turkish
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.TS">
            <summary>
            Tsonga
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.UK">
            <summary>
            Ukrainian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.UR">
            <summary>
            Urdu
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.VE">
            <summary>
            Venda
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.VI">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.XH">
            <summary>
            Xhosa
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ZH_CN">
            <summary>
            Chinese (PRC)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ZH_HK">
            <summary>
            Chinese (Hong Kong)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ZH_SG">
            <summary>
            Chinese (Singapore)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ZH_TW">
            <summary>
            Chinese (Taiwan)
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.ZU">
            <summary>
            Zulu
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.HAW">
            <summary>
            Hawaiian
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.EO">
            <summary>
            Esperanto
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.IO">
            <summary>
            Ido
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.TLH">
            <summary>
            Klingon
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.QYA">
            <summary>
            Quenya
            </summary>
        </member>
        <member name="F:HFN.Common.LanguageCode.SJN">
            <summary>
            Sindarin
            </summary>
        </member>
        <member name="T:HFN.Common.LanguageCodeUtility">
            <summary>
            Utility class for the <see cref="T:HFN.Common.LanguageCode"/> enum.
            </summary>
        </member>
        <member name="M:HFN.Common.LanguageCodeUtility.GetLanguageName(HFN.Common.LanguageCode)">
            <summary>
            Returns the name of a language using the given language code.
            </summary>
            <param name="code">The language code to get the language name for.</param>
        </member>
        <member name="M:HFN.Common.LanguageCodeUtility.GetLanguageGroup(HFN.Common.LanguageCode)">
            <summary>
            Returns the language group the given <see cref="T:HFN.Common.LanguageCode"/> is part of.
            ie both <see cref="F:HFN.Common.LanguageCode.EN_US"/> and <see cref="F:HFN.Common.LanguageCode.EN_GB"/> would return "English"
            </summary>
            <param name="code">The language code to get the language group for.</param>
        </member>
        <member name="T:HFN.Common.LocalizationManager">
            <summary>
            Class used to retrieve string values based on language code for localization.
            </summary>
            <seealso cref="T:HFN.Common.LocalizationSettings"/>
        </member>
        <member name="F:HFN.Common.LocalizationManager.debug">
            <summary>
            Settings for outputting debug information.
            </summary>
        </member>
        <member name="F:HFN.Common.LocalizationManager.settingsLogic">
            <summary>
            [Optional] Custom behaviour for loading and saving localization settings. If null, settings will be loaded and saved to PlayerPrefs.
            </summary>
        </member>
        <member name="F:HFN.Common.LocalizationManager.collections">
            <summary>
            List containing localized string collection scriptable objects.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationManager.ResetSingleton">
            <summary>
            Clear the list of <see cref="T:HFN.Common.LocalizedStringCollection"/> assets.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationManager.GetValue(System.String)">
            <summary>
            Get a localized string and return the value for the current language code set at <see cref="P:HFN.Common.LocalizationSettings.CurrentLanguage"/>.
            </summary>
            <param name="id">ID for the target localized string.</param>
        </member>
        <member name="M:HFN.Common.LocalizationManager.GetValue(System.String,HFN.Common.LanguageCode)">
            <summary>
            Get a localized string with the target <see cref="T:HFN.Common.LanguageCode"/>.
            </summary>
            <param name="id">ID for the target localized string.</param>
            <param name="languageCode"></param>
        </member>
        <member name="M:HFN.Common.LocalizationManager.GetString(System.String)">
            <summary>
            Get a <see cref="T:HFN.Common.LocalizedString"/> with the given ID.
            </summary>
            <param name="id">ID for the target localized string.</param>
        </member>
        <member name="M:HFN.Common.LocalizationManager.AddCollection(HFN.Common.LocalizedStringCollection)">
            <summary>
            Adds a <see cref="T:HFN.Common.LocalizedStringCollection"/> to the list of localized string collections.
            </summary>
            <param name="collection">Collection to add to the list of collections.</param>
        </member>
        <member name="M:HFN.Common.LocalizationManager.RemoveCollection(HFN.Common.LocalizedStringCollection)">
            <summary>
            Removes a <see cref="T:HFN.Common.LocalizedStringCollection"/> from the list of localized string collections.
            </summary>
            <param name="collection">Collection to remove from the list of collections.</param>
        </member>
        <member name="P:HFN.Common.LocalizationManager.Keys">
            <summary>
            List of all ID contained in all localized string collections contained by this manager.
            </summary>
        </member>
        <member name="T:HFN.Common.LocalizationSettings">
            <summary>
            Class containing settings for various localization related classes.
            </summary>
            <seealso cref="T:HFN.Common.LocalizationManager"/>
            <seealso cref="T:HFN.Common.LocalizationSettingsLogic"/>
        </member>
        <member name="F:HFN.Common.LocalizationSettings.LanguageChanged">
            <summary>
            Fired when the target language is changed.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizationSettings.SaveLoadLogic">
            <summary>
            Custom logic for loading and saving settings used for localization.
            If null, will default to loading and saving to PlayerPrefs.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizationSettings.CurrentLanguage">
            <summary>
            The current target <see cref="T:HFN.Common.LanguageCode"/>. When retrieving a localized string, this is the language that will be returned.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationSettings.ToLanguageCode(System.String)">
            <summary>
            Converts a standard language code string into a <see cref="T:HFN.Common.LanguageCode"/> enum value.
            If the value fails to parse, a default value of <see cref="F:HFN.Common.LanguageCode.EN_US"/> is returned.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationSettings.ToLanguageCodeString(HFN.Common.LanguageCode)">
            <summary>
            Returns a string representation of a <see cref="T:HFN.Common.LanguageCode"/> with standard language code format.
            Example: EN_US => EN-US
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationSettings.LoadSettings">
            <summary>
            Load localization settings.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationSettings.LoadSettingsAsync(System.Action{HFN.Common.LanguageCode})">
            <summary>
            Load localization settings asynchronously.
            </summary>
            <param name="callback">Callback to invoke once settings have been loaded.</param>
        </member>
        <member name="M:HFN.Common.LocalizationSettings.SaveSettings">
            <summary>
            Save localization settings. Returns true if the save process was successful.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationSettings.SaveSettingsAsync(System.Action{System.Boolean})">
            <summary>
            Save localization settings asynchronously.
            </summary>
            <param name="callback">Callback to invoke to return if the save operation was successful.</param>
        </member>
        <member name="T:HFN.Common.LocalizedLabel">
            <summary>
            Base class for localized labels.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizedLabel.Key">
            <summary>
            The string key for the target localized string to display with this label.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizedLabel.Text">
            <summary>
            The text shown on this label.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizedLabel.Refresh">
            <summary>
            Refreshes the label to show the appropriate text.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizedLabel.OnLanguageChanged(HFN.Common.LanguageCode)">
            <summary>
            Called when <see cref="P:HFN.Common.LocalizationSettings.CurrentLanguage"/> is changed.
            </summary>
            <param name="languageCode">The new target localization language code.</param>
        </member>
        <member name="T:HFN.Common.LocalizationSettingsLogic">
            <summary>
            Base class for logic that handles loading and saving localization settings.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationSettingsLogic.LoadSettings">
            <summary>
            Load localization settings. Returns the loaded <see cref="T:HFN.Common.LanguageCode"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizationSettingsLogic.SaveSettings(HFN.Common.LanguageCode)">
            <summary>
            Save localization settings. Returns true if the save process was a success.
            </summary>
            <param name="currentLanguage">The current language used for localization.</param>
        </member>
        <member name="M:HFN.Common.LocalizationSettingsLogic.LoadSettingsAsync(System.Action{HFN.Common.LanguageCode})">
            <summary>
            Load localization settings. Returns the loaded <see cref="T:HFN.Common.LanguageCode"/> via callback so this method can initiate asynchronous code.
            </summary>
            <param name="callback">Callback to invoke to return the loaded <see cref="T:HFN.Common.LanguageCode"/>.</param>
        </member>
        <member name="M:HFN.Common.LocalizationSettingsLogic.SaveSettingsAsync(HFN.Common.LanguageCode,System.Action{System.Boolean})">
            <summary>
            Save localization settings. Returns the success status via callback so this method can initiate asynchronous code.
            </summary>
            <param name="currentLanguage">The current language used for localization.</param>
            <param name="callback">Callback to invoke to return the success status of the save function.</param>
        </member>
        <member name="T:HFN.Common.LocalizedString">
            <summary>
            Class used to handle localization by storing string values for a key based on their associated <see cref="T:HFN.Common.LanguageCode"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.LocalizedString.FIELD_ID">
            <summary>
            The CSV field used to identify the string's key. Sheets must use this value as their key ID field in the first row.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizedString.CurrentValue">
            <summary>
            Returns the localized string value for the language specified by <see cref="P:HFN.Common.LocalizationSettings.CurrentLanguage"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.LocalizedString.GetValue(HFN.Common.LanguageCode)">
            <summary>
            Returns the localized string value for the specified language.
            </summary>
            <param name="languageCode">The language to retrieve a localized string for.</param>
        </member>
        <member name="M:HFN.Common.LocalizedString.SetValue(HFN.Common.LanguageCode,System.String)">
            <summary>
            Sets the string value for a given <see cref="T:HFN.Common.LanguageCode"/>.
            </summary>
            <param name="languageCode">The language to set a value for.</param>
            <param name="value">The value of the localized string for the target language.</param>
        </member>
        <member name="T:HFN.Common.LocalizedStringSelector">
            <summary>
            Convenience class for selecting localized string IDs in the inspector.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizedStringSelector.Key">
            <summary>
            The key for the target localized string.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizedStringSelector.Value">
            <summary>
            The value for the target localized string. This is based on <see cref="P:HFN.Common.LocalizationSettings.CurrentLanguage"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.LocalizedStringSelector.String">
            <summary>
            The raw <see cref="T:HFN.Common.LocalizedString"/> for the target localized string.
            </summary>
        </member>
        <member name="T:HFN.Common.CustomLogger">
            <summary>
            Class for performing custom logging on top of Unity's logging.
            </summary>
        </member>
        <member name="F:HFN.Common.CustomLogger.LogTypes.Default">
            <summary>
            Use the default Unity logger.
            </summary>
        </member>
        <member name="F:HFN.Common.CustomLogger.LogTypes.ProgressiveLogs">
            <summary>
            Create sequential log files each time the application is started, instead of overwriting the existing log file.
            </summary>
        </member>
        <member name="F:HFN.Common.CustomLogger.LogTypes.SteamingAssetsLog">
            <summary>
            Log to a file contained in StreamingAssets.
            </summary>
        </member>
        <member name="F:HFN.Common.CustomLogger.LogTypes.PersistentDataLog">
            <summary>
            Log to a file contained in the persistent data folder.
            </summary>
        </member>
        <member name="T:HFN.Common.CustomLoggerUtility">
            <summary>
            Utility class to handle functions related to custom logging.
            </summary>
        </member>
        <member name="T:HFN.Common.RendererMaterial">
            <summary>
            Class for conveniently selecting a <see cref="T:UnityEngine.Material"/> from a target <see cref="T:UnityEngine.Renderer"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.RendererMaterial.renderer">
            <summary>
            The renderer to grab materials from.
            </summary>
        </member>
        <member name="F:HFN.Common.RendererMaterial.materialIndex">
            <summary>
            The index of the target material on the target renderer.
            </summary>
        </member>
        <member name="P:HFN.Common.RendererMaterial.Material">
            <summary>
            The instance of the material on the target renderer.
            </summary>
        </member>
        <member name="P:HFN.Common.RendererMaterial.SharedMaterial">
            <summary>
            The material asset on the target renderer.
            </summary>
        </member>
        <member name="T:HFN.Common.ExtendedMonoBehaviour">
            <summary>
            Extends and optimizes the base MonoBehaviour class.
            </summary>
        </member>
        <member name="P:HFN.Common.ExtendedMonoBehaviour.transform">
            <summary>
            The <see cref="T:UnityEngine.Transform"/> attached to this GameObject.
            </summary>
        </member>
        <member name="P:HFN.Common.ExtendedMonoBehaviour.gameObject">
            <summary>
            The game object this component is attached to. A component is always attached to a game object.
            </summary>
        </member>
        <member name="T:HFN.Common.IExtendedMonoBehaviour">
            <summary>
            Interface for components caching .transform and .gameObject to implement.
            </summary>
        </member>
        <member name="P:HFN.Common.IExtendedMonoBehaviour.transform">
            <summary>
            The <see cref="T:UnityEngine.Transform"/> attached to this GameObject.
            </summary>
        </member>
        <member name="P:HFN.Common.IExtendedMonoBehaviour.gameObject">
            <summary>
            The game object this component is attached to. A component is always attached to a game object.
            </summary>
        </member>
        <member name="T:HFN.Common.IRectMonoBehaviour">
            <summary>
            Interface for components caching .transform as a <see cref="T:UnityEngine.RectTransform"/> value.
            </summary>
        </member>
        <member name="P:HFN.Common.IRectMonoBehaviour.rectTransform">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> attached to this GameObject.
            </summary>
        </member>
        <member name="T:HFN.Common.RectMonoBehaviour">
            <summary>
            Extended <see cref="T:UnityEngine.MonoBehaviour"/> with a <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.RectMonoBehaviour.rectTransform">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> attached to this GameObject.
            </summary>
        </member>
        <member name="P:HFN.Common.NetworkSettings.Instance">
             Proxy port and address are never loaded from PlayerPrefs... so I'm not sure why they're written to it.
             It seems like system proxy settings are always detected, but never actually changed for more
             than the current session if done through the settings menu.
            
        </member>
        <member name="T:HFN.Common.HttpService">
            <summary>
            Class allowing convenient calls to perform GET and POST HTTP methods.
            </summary>
        </member>
        <member name="T:HFN.Common.UnityWebRequestService">
            <summary>
            Convenience class for making web requests using the <see cref="T:UnityEngine.Networking.UnityWebRequest"/> class.
            </summary>
        </member>
        <member name="T:HFN.Common.WWWService">
            <summary>
            Convenience class for making web requests using the <see cref="T:UnityEngine.WWW"/> class.
            </summary>
        </member>
        <member name="T:HFN.Common.ParticleCollection">
            <summary>
            Collection of <see cref="T:HFN.Common.ParticleData"/> used by <see cref="T:HFN.Common.ParticleManager"/> when spawning <see cref="T:HFN.Common.ParticleController"/> objects.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleCollection.GetParticleIds">
            <summary>
            Get a list of IDs for all systems in this collection.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleCollection.GetParticleNames">
            <summary>
            Get a list of names for all systems in this collection.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleCollection.Find(System.Int32)">
            <summary>
            Find the system with the given ID.
            </summary>
            <param name="id">The ID to search for.</param>
        </member>
        <member name="M:HFN.Common.ParticleCollection.Find(System.String)">
            <summary>
            Find the system with the given name.
            </summary>
            <param name="name">The name to search for.</param>
        </member>
        <member name="T:HFN.Common.ParticleData">
            <summary>
            Class containing data used by <see cref="T:HFN.Common.ParticleCollection"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.ParticleData.id">
            <summary>
            The int ID of the referenced <see cref="T:HFN.Common.ParticleController"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.ParticleData.name">
            <summary>
            The display name for the referenced <see cref="T:HFN.Common.ParticleController"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.ParticleData.system">
            <summary>
            The actual <see cref="T:HFN.Common.ParticleController"/> referenced for this data.
            </summary>
        </member>
        <member name="T:HFN.Common.ParticleController">
            <summary>
            Wrapper class to access <see cref="T:UnityEngine.ParticleSystem"/> functionality and cache values to improve performance.
            </summary>
        </member>
        <member name="F:HFN.Common.ParticleController.recycleOnDisable">
            <summary>
            Should the controller recycle itself if it is disabled?
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleController.CachedGameObject">
            <summary>
            Cached <see cref="T:UnityEngine.GameObject"/> for this controller.
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleController.CachedTransform">
            <summary>
            Cached <see cref="T:UnityEngine.Transform"/> for this controller.
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleController.Subsystems">
            <summary>
            All <see cref="T:HFN.Common.ParticleControllerSystem"/> components on and below this controller.
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleController.MainSystem">
            <summary>
            The topmost <see cref="T:HFN.Common.ParticleControllerSystem"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleController.CachedParticleSystems">
            <summary>
            All <see cref="T:UnityEngine.ParticleSystem"/> components on and below this object.
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleController.MainParticleSystem">
            <summary>
            The topmost <see cref="T:UnityEngine.ParticleSystem"/> that controls child <see cref="T:UnityEngine.ParticleSystem"/>s.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleController.IsAlive">
            <summary>
            Does the system have (or will produce) any live particles?
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleController.IsAlive(System.Boolean)">
            <summary>
            Does the system have (or will produce) any live particles?
            </summary>
            <param name="withChildren">Should the system check child <see cref="T:UnityEngine.ParticleSystem"/>s.</param>
        </member>
        <member name="M:HFN.Common.ParticleController.Play">
            <summary>
            Starts the system.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleController.Play(System.Boolean)">
            <summary>
            Starts the system.
            </summary>
            <param name="withChildren">Should the system affect child <see cref="T:UnityEngine.ParticleSystem"/>s.</param>
        </member>
        <member name="M:HFN.Common.ParticleController.Pause">
            <summary>
            Pauses the system so no new particles are emitted and existing particles are not updated.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleController.Pause(System.Boolean)">
            <summary>
            Pauses the system so no new particles are emitted and existing particles are not updated.
            </summary>
            <param name="withChildren">Should the system affect child <see cref="T:UnityEngine.ParticleSystem"/>s.</param>
        </member>
        <member name="M:HFN.Common.ParticleController.Stop">
            <summary>
            Stops playing the particle system.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleController.Stop(System.Boolean)">
            <summary>
            Stops playing the particle system.
            </summary>
            <param name="withChildren">Should the system affect child <see cref="T:UnityEngine.ParticleSystem"/>s.</param>
        </member>
        <member name="M:HFN.Common.ParticleController.Stop(System.Boolean,UnityEngine.ParticleSystemStopBehavior)">
            <summary>
            Stops playing the particle system.
            </summary>
            <param name="withChildren">Should the system affect child <see cref="T:UnityEngine.ParticleSystem"/>s.</param>
            <param name="stopBehavior">How should the system stop?</param>
        </member>
        <member name="M:HFN.Common.ParticleController.Clear">
            <summary>
            Remove all particles in the system.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleController.Clear(System.Boolean)">
            <summary>
            Remove all particles in the system.
            </summary>
            <param name="withChildren">Should the system affect child <see cref="T:UnityEngine.ParticleSystem"/>s.</param>
        </member>
        <member name="M:HFN.Common.ParticleController.InitializeSubsystems">
            <summary>
            Initializes all <see cref="T:HFN.Common.ParticleControllerSystem"/> components on and below this controller.
            This should not be called multiple times unless this controller's child systems have changed.
            </summary>
        </member>
        <member name="T:HFN.Common.ParticleControllerSystem">
            <summary>
            Class containing data on a <see cref="T:UnityEngine.ParticleSystem"/>'s position in a <see cref="T:HFN.Common.ParticleController"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.ParticleControllerSystem.id">
            <summary>
            The system's position in the owning ParticleController.
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleControllerSystem.IsAlive">
            <summary>
            Does the system have (or will produce) any live particles?
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleControllerSystem.IsPlaying">
            <summary>
            Is the system playing currently?
            </summary>
        </member>
        <member name="P:HFN.Common.ParticleControllerSystem.IsEmitting">
            <summary>
            Is the system currently emitting particles?
            Will return false if the system is paused or has been stopped by passing the StopEmitting flag.
            </summary>
        </member>
        <member name="T:HFN.Common.ParticleIdAttribute">
            <summary>
            Attribute allowing inspector based selection of specific <see cref="T:HFN.Common.ParticleController"/> systems.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleIdAttribute.#ctor">
            <summary>
            Attribute allowing inspector based selection of specific <see cref="T:HFN.Common.ParticleController"/> systems.
            </summary>
        </member>
        <member name="T:HFN.Common.ParticleSubsystemIdAttribute">
            <summary>
            Attribute allowing inspector based selection of specific <see cref="T:HFN.Common.ParticleController"/> subsystems.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleSubsystemIdAttribute.#ctor(System.String)">
            <summary>
            Attribute allowing inspector based selection of specific <see cref="T:HFN.Common.ParticleController"/> subsystems.
            </summary>
            <param name="particleIdVarName">The name of the field on the object for the target <see cref="T:HFN.Common.ParticleController"/> ID.</param>
        </member>
        <member name="T:HFN.Common.ParticleManager">
            <summary>
            Class to automatically manage instantiating and recycling <see cref="T:UnityEngine.ParticleSystem"/> objects.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleManager.ResetSingleton">
            <summary>
            Clears the unity object pool of all prefabs the manager has ever spawned.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleManager.GetParticleIds">
            <summary>
            Returns the pariticle IDs for all particles in the manager's collections.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleManager.GetParticleNames">
            <summary>
            Returns the names for all particles in the manager's collections.
            </summary>
        </member>
        <member name="M:HFN.Common.ParticleManager.Find(System.Int32)">
            <summary>
            Find the first <see cref="T:HFN.Common.ParticleData"/> with an ID matching the given particle ID.
            </summary>
            <param name="particleId">The ID to search for.</param>
        </member>
        <member name="M:HFN.Common.ParticleManager.Find(System.String)">
            <summary>
            Find the first <see cref="T:HFN.Common.ParticleData"/> with a name matching the given particle name.
            </summary>
            <param name="particleName">The name to search for.</param>
        </member>
        <member name="M:HFN.Common.ParticleManager.Play(System.Int32,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Create and play a <see cref="T:HFN.Common.ParticleController"/> from a <see cref="T:HFN.Common.ParticleData"/> matching the given ID.
            </summary>
            <param name="id">The ID of the <see cref="T:HFN.Common.ParticleData"/> containing the <see cref="T:HFN.Common.ParticleController"/> to use.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the spawned effect to.</param>
            <param name="offsetPosition">Offset from the parent to position the spawned effect at.</param>
            <param name="offsetRotationEuler">Rotation offset (as an Euler angle) from the parent to align the spawned effect to.</param>
        </member>
        <member name="M:HFN.Common.ParticleManager.Play(System.Int32,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Create and play a <see cref="T:HFN.Common.ParticleController"/> from a <see cref="T:HFN.Common.ParticleData"/> matching the given ID.
            </summary>
            <param name="id">The ID of the <see cref="T:HFN.Common.ParticleData"/> containing the <see cref="T:HFN.Common.ParticleController"/> to use.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the spawned effect to.</param>
            <param name="offsetPosition">Offset from the parent to position the spawned effect at.</param>
            <param name="offsetRotation">Rotation offset from the parent to align the spawned effect to.</param>
        </member>
        <member name="M:HFN.Common.ParticleManager.Play(System.String,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Create and play a <see cref="T:HFN.Common.ParticleController"/> from a <see cref="T:HFN.Common.ParticleData"/> matching the given name.
            </summary>
            <param name="name">The name of the <see cref="T:HFN.Common.ParticleData"/> containing the <see cref="T:HFN.Common.ParticleController"/> to use.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the spawned effect to.</param>
            <param name="offsetPosition">Offset from the parent to position the spawned effect at.</param>
            <param name="offsetRotationEuler">Rotation offset (as an Euler angle) from the parent to align the spawned effect to.</param>
        </member>
        <member name="M:HFN.Common.ParticleManager.Play(System.String,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Create and play a <see cref="T:HFN.Common.ParticleController"/> from a <see cref="T:HFN.Common.ParticleData"/> matching the given name.
            </summary>
            <param name="name">The name of the <see cref="T:HFN.Common.ParticleData"/> containing the <see cref="T:HFN.Common.ParticleController"/> to use.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the spawned effect to.</param>
            <param name="offsetPosition">Offset from the parent to position the spawned effect at.</param>
            <param name="offsetRotation">Rotation offset from the parent to align the spawned effect to.</param>
        </member>
        <member name="M:HFN.Common.ParticleManager.Play(HFN.Common.ParticleData,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Create and play a <see cref="T:HFN.Common.ParticleController"/> from the passed <see cref="T:HFN.Common.ParticleData"/>.
            </summary>
            <param name="data">The <see cref="T:HFN.Common.ParticleData"/> containing the <see cref="T:HFN.Common.ParticleController"/> to use.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the spawned effect to.</param>
            <param name="offsetPosition">Offset from the parent to position the spawned effect at.</param>
            <param name="offsetRotationEuler">Rotation offset (as an Euler angle) from the parent to align the spawned effect to.</param>
        </member>
        <member name="M:HFN.Common.ParticleManager.Play(HFN.Common.ParticleData,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Create and play a <see cref="T:HFN.Common.ParticleController"/> from the passed <see cref="T:HFN.Common.ParticleData"/>.
            </summary>
            <param name="data">The <see cref="T:HFN.Common.ParticleData"/> containing the <see cref="T:HFN.Common.ParticleController"/> to use.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the spawned effect to.</param>
            <param name="offsetPosition">Offset from the parent to position the spawned effect at.</param>
            <param name="offsetRotation">Rotation offset from the parent to align the spawned effect to.</param>
        </member>
        <member name="T:HFN.Common.ParticleSystemAutoClear">
            <summary>
            Class that automatically clears a particle system before playing it.
            </summary>
        </member>
        <member name="T:HFN.Common.ParticleSystemAutoRecycle">
            <summary>
            Class that will automatically recycle a particle system when it stops playing.
            </summary>
        </member>
        <member name="T:HFN.Common.ColliderEventDispatcher">
             Note: OnCollision events will only be dispatched if one of the GameObjects involved
             		 has a non-kinematic rigidbody attached.
            
        </member>
        <member name="T:HFN.Common.GameObjectPool">
            <summary>
            Class handling pooling for a specific prefab.
            </summary>
        </member>
        <member name="F:HFN.Common.GameObjectPool.PreClear">
            <summary>
            Event fired immediately before the pool is cleared.
            </summary>
        </member>
        <member name="F:HFN.Common.GameObjectPool.id">
            <summary>
            Unique ID for the pool.
            </summary>
        </member>
        <member name="F:HFN.Common.GameObjectPool.contents">
            <summary>
            All pooled objects.
            </summary>
        </member>
        <member name="F:HFN.Common.GameObjectPool.used">
            <summary>
            Pooled objects that are currently enabled and in use.
            </summary>
        </member>
        <member name="F:HFN.Common.GameObjectPool.free">
            <summary>
            Pooled objects that are currently disabled and not in use.
            </summary>
        </member>
        <member name="P:HFN.Common.GameObjectPool.ID">
            <summary>
            Unique ID for the pool.
            </summary>
        </member>
        <member name="M:HFN.Common.GameObjectPool.LogTagId">
            <summary>
            Logs the tag's ID to the console.
            </summary>
        </member>
        <member name="M:HFN.Common.GameObjectPool.Create``1(System.String,System.Object,UnityEngine.Transform)">
            <summary>
            Create a <see cref="T:HFN.Common.GameObjectPool"/> of the given type.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the new pool.</typeparam>
            <param name="name">The name of the pool.</param>
            <param name="id">The unique ID for the pool.</param>
            <param name="parent">The parent <see cref="T:UnityEngine.Transform"/> for the pool.</param>
        </member>
        <member name="M:HFN.Common.GameObjectPool.Preload(UnityEngine.GameObject,System.Int32,HFN.Common.PoolPreloadType,System.Int32,System.Action)">
            <summary>
            Preload pool objects for a prefab.
            Useful in situations where a lot of pool requests may happen at once so you can ready the pool ahead of time.
            </summary>
            <param name="prefab">The prefab to preload instances for.</param>
            <param name="amount">The amount of preloaded instance to create.</param>
            <param name="method">How the preloading is spaced out.</param>
            <param name="interval">Interval used for spaced out preloading. Measured in number of objects per second or frames.</param>
            <param name="completionCallback">[Optional] Callback to invoke once the preloading is complete.</param>
        </member>
        <member name="M:HFN.Common.GameObjectPool.Request``1(``0,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given type from the pool.
            </summary>
            <typeparam name="T">The <see cref="T:UnityEngine.Component"/> on the pooled object to return.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.GameObjectPool.Request(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.GameObjectPool.Recycle(UnityEngine.GameObject,System.Single)">
            <summary>
            Recycles the passed <see cref="T:UnityEngine.GameObject"/> back into its pool.
            </summary>
            <param name="instance">The instanced object to recycle.</param>
            <param name="delay">Delay before the recycle happens.</param>
        </member>
        <member name="M:HFN.Common.GameObjectPool.Clear">
            <summary>
            Delete the pool's contents and clear its lists.
            </summary>
        </member>
        <member name="M:HFN.Common.GameObjectPool.CullMissingObjects">
            <summary>
            Remove any null values from the pool's contents.
            </summary>
        </member>
        <member name="M:HFN.Common.GameObjectPool.PlaceObject(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Position the given object under the target parent. This will also adjust the child's layer to match the parent's.
            </summary>
            <param name="child">The <see cref="T:UnityEngine.Transform"/> to position.</param>
            <param name="parent"><see cref="T:UnityEngine.Transform"/> to parent to target to.</param>
            <param name="position">Local position of the child.</param>
            <param name="rotation">Local rotation on the child.</param>
        </member>
        <member name="T:HFN.Common.PoolManager">
            <summary>
            Class to handle <see cref="T:UnityEngine.GameObject"/> pooling.
            </summary>
        </member>
        <member name="P:HFN.Common.PoolManager.Exists">
            <summary>
            Is there an instance of the <see cref="T:HFN.Common.PoolManager"/>?
            </summary>
        </member>
        <member name="P:HFN.Common.PoolManager.Debugging">
            <summary>
            Debug settings for the pooling system.
            </summary>
        </member>
        <member name="M:HFN.Common.PoolManager.Create``1(System.String)">
            <summary>
            Create and return a new <see cref="T:HFN.Common.PoolManager"/>.
            </summary>
            <param name="name">Name for the new <see cref="T:HFN.Common.PoolManager"/>.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Create``1(System.String,UnityEngine.Transform,System.Boolean)">
            <summary>
            Create and return a new <see cref="T:HFN.Common.PoolManager"/>.
            </summary>
            <param name="name">Name for the new <see cref="T:HFN.Common.PoolManager"/>.</param>
            <param name="parent">The new pool's parent.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.MovePools(HFN.Common.PoolManager)">
            <summary>
            Moves the pools under the <see cref="T:HFN.Common.PoolManager"/> instance to the passed manager. This will reparent the pools and populate their content appropriately.
            </summary>
            <param name="newPool">The <see cref="T:HFN.Common.PoolManager"/> to move the instance's pools to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.AddPool(HFN.Common.GameObjectPool)">
            <summary>
            Parents the given <see cref="T:HFN.Common.GameObjectPool"/> to the <see cref="T:HFN.Common.PoolManager"/> instance.
            </summary>
            <param name="pool">The <see cref="T:HFN.Common.GameObjectPool"/> to parent and connect to the <see cref="T:HFN.Common.PoolManager"/> instance. The pool's ID is used for its key in the pools dictionary.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.AddPool(System.Object,HFN.Common.GameObjectPool)">
            <summary>
            Parents the given <see cref="T:HFN.Common.GameObjectPool"/> to the <see cref="T:HFN.Common.PoolManager"/> instance.
            </summary>
            <param name="id">The id for the pool.</param>
            <param name="pool">The <see cref="T:HFN.Common.GameObjectPool"/> to parent and connect to the <see cref="T:HFN.Common.PoolManager"/> instance.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.GetPool(System.Object)">
            <summary>
            Get the <see cref="T:HFN.Common.GameObjectPool"/> associated with the given ID.
            </summary>
            <param name="id">The ID for the target <see cref="T:HFN.Common.GameObjectPool"/>.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.GetPool``1(System.Object)">
            <summary>
            Get the <see cref="T:HFN.Common.GameObjectPool"/> derived pool associated with the given ID.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="id">The ID for the target <see cref="T:HFN.Common.GameObjectPool"/>.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.GetPool(UnityEngine.GameObject)">
            <summary>
            Get the <see cref="T:HFN.Common.GameObjectPool"/> associated with the given <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> being pooled by the target <see cref="T:HFN.Common.GameObjectPool"/>.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.GetPool``1(UnityEngine.GameObject)">
            <summary>
            Get the <see cref="T:HFN.Common.GameObjectPool"/> derived pool associated with the given <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> being pooled by the target <see cref="T:HFN.Common.GameObjectPool"/>.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.ClearAll">
            <summary>
            Clears all pools and deletes their contents.
            </summary>
        </member>
        <member name="M:HFN.Common.PoolManager.ClearUnused">
            <summary>
            Clears all pools with none of their instances used.
            </summary>
        </member>
        <member name="M:HFN.Common.PoolManager.Clear(UnityEngine.GameObject)">
            <summary>
            Clears a pool using the given <see cref="T:UnityEngine.GameObject"/> and deletes its contents.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to search for in existing pools.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Clear(System.Object)">
            <summary>
            Clears a pool using the given ID and deletes its contents.
            </summary>
            <param name="poolId">ID to search for in existing pools.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Preload(UnityEngine.GameObject,System.Int32,HFN.Common.PoolPreloadType,System.Int32,System.Action)">
            <summary>
            Preload pool objects for a prefab.
            Useful in situations where a lot of pool requests may happen at once so you can ready the pool ahead of time.
            </summary>
            <param name="prefab">The prefab to preload instances for.</param>
            <param name="amount">The amount of preloaded instance to create.</param>
            <param name="method">How the preloading is spaced out.</param>
            <param name="interval">Interval used for spaced out preloading. Measured in number of objects per second or frames.</param>
            <param name="completionCallback">[Optional] Callback to invoke once the preloading is complete.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Preload``1(UnityEngine.GameObject,System.Int32,HFN.Common.PoolPreloadType,System.Int32,System.Action)">
            <summary>
            Preload pool objects for a prefab.
            Useful in situations where a lot of pool requests may happen at once so you can ready the pool ahead of time.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The prefab to preload instances for.</param>
            <param name="amount">The amount of preloaded instance to create.</param>
            <param name="method">How the preloading is spaced out.</param>
            <param name="interval">Interval used for spaced out preloading. Measured in whole seconds or frames.</param>
            <param name="completionCallback">[Optional] Callback to invoke once the preloading is complete.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(``0)">
            <summary>
            Request an instance of the given prefab from the pool.
            </summary>
            <param name="prefab">The prefab to request an instance of.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(``0,UnityEngine.Transform)">
            <summary>
            Request an instance of the given prefab from the pool.
            </summary>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(``0,UnityEngine.Vector3)">
            <summary>
            Request an instance of the given prefab from the pool.
            </summary>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given prefab from the pool.
            </summary>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
            <param name="rotation">The rotation to align the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(``0,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given prefab from the pool.
            </summary>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``2(``0)">
            <summary>
            Request an instance of the given prefab from the pool. If the pool doesn't exist, create a pool of type U.
            </summary>
            <typeparam name="U"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The prefab to request an instance of.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``2(``0,UnityEngine.Transform)">
            <summary>
            Request an instance of the given prefab from the pool. If the pool doesn't exist, create a pool of type U.
            </summary>
            <typeparam name="U"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``2(``0,UnityEngine.Vector3)">
            <summary>
            Request an instance of the given prefab from the pool. If the pool doesn't exist, create a pool of type U.
            </summary>
            <typeparam name="U"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``2(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given prefab from the pool. If the pool doesn't exist, create a pool of type U.
            </summary>
            <typeparam name="U"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
            <param name="rotation">The rotation to align the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``2(``0,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given prefab from the pool. If the pool doesn't exist, create a pool of type U.
            </summary>
            <typeparam name="U"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The prefab to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request(UnityEngine.GameObject)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request(UnityEngine.GameObject,UnityEngine.Transform)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request(UnityEngine.GameObject,UnityEngine.Vector3)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
            <param name="rotation">The rotation to align the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(UnityEngine.GameObject)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool. If the pool doesn't exist, create a pool of type T.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(UnityEngine.GameObject,UnityEngine.Transform)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool. If the pool doesn't exist, create a pool of type T.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(UnityEngine.GameObject,UnityEngine.Vector3)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool. If the pool doesn't exist, create a pool of type T.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool. If the pool doesn't exist, create a pool of type T.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="position">The position to place the requested object at.</param>
            <param name="rotation">The rotation to align the requested object to.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request``1(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool. If the pool doesn't exist, create a pool of type T.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Recycle(UnityEngine.GameObject,System.Single)">
            <summary>
            Recycles the passed <see cref="T:UnityEngine.GameObject"/> back into its pool.
            </summary>
            <param name="instance">The instanced object to recycle.</param>
            <param name="delay">Delay before the recycle happens.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.AddPool_Internal(System.Object,HFN.Common.GameObjectPool)">
            <summary>
            Parents the given <see cref="T:HFN.Common.GameObjectPool"/> to the <see cref="T:HFN.Common.PoolManager"/> instance.
            </summary>
            <param name="id">The id for the pool.</param>
            <param name="pool">The <see cref="T:HFN.Common.GameObjectPool"/> to parent and connect to the <see cref="T:HFN.Common.PoolManager"/> instance.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.ClearAll_Internal">
            <summary>
            Clears all pools and deletes their contents.
            </summary>
        </member>
        <member name="M:HFN.Common.PoolManager.ClearUnused_Internal">
            <summary>
            Clears all pools with none of their instances used.
            </summary>
        </member>
        <member name="M:HFN.Common.PoolManager.Clear_Internal(UnityEngine.GameObject)">
            <summary>
            Clears a pool using the given <see cref="T:UnityEngine.GameObject"/> and deletes its contents.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to search for in existing pools.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Clear_Internal(System.Object)">
            <summary>
            Clears a pool using the given ID and deletes its contents.
            </summary>
            <param name="poolId">ID to search for in existing pools.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Preload_Internal(UnityEngine.GameObject,System.Int32,HFN.Common.PoolPreloadType,System.Int32,System.Action)">
            <summary>
            Preload pool objects for a prefab.
            Useful in situations where a lot of pool requests may happen at once so you can ready the pool ahead of time.
            </summary>
            <param name="prefab">The prefab to preload instances for.</param>
            <param name="amount">The amount of preloaded instance to create.</param>
            <param name="method">How the preloading is spaced out.</param>
            <param name="interval">Interval used for spaced out preloading. Measured in number of objects per second or frames.</param>
            <param name="completionCallback">[Optional] Callback to invoke once the preloading is complete.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Preload_Internal``1(UnityEngine.GameObject,System.Int32,HFN.Common.PoolPreloadType,System.Int32,System.Action)">
            <summary>
            Preload pool objects for a prefab.
            Useful in situations where a lot of pool requests may happen at once so you can ready the pool ahead of time.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The prefab to preload instances for.</param>
            <param name="amount">The amount of preloaded instance to create.</param>
            <param name="method">How the preloading is spaced out.</param>
            <param name="interval">Interval used for spaced out preloading. Measured in whole seconds or frames.</param>
            <param name="completionCallback">[Optional] Callback to invoke once the preloading is complete.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request_Internal(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Request_Internal``1(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Request an instance of the given <see cref="T:UnityEngine.GameObject"/> from the pool.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to request an instance of.</param>
            <param name="parent">The <see cref="T:UnityEngine.Transform"/> to parent the requested object to.</param>
            <param name="position">The position to place the requested object at (offset from the parent).</param>
            <param name="rotation">The rotation to align the requested object to (offset from the parent).</param>
        </member>
        <member name="M:HFN.Common.PoolManager.Recycle_Internal(UnityEngine.GameObject,System.Single)">
            <summary>
            Recycles the passed <see cref="T:UnityEngine.GameObject"/> back into its pool.
            </summary>
            <param name="instance">The instanced object to recycle.</param>
            <param name="delay">Delay before the recycle happens.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.GetPool_Internal``1(System.Object)">
            <summary>
            Get the <see cref="T:HFN.Common.GameObjectPool"/> associated with the given ID.
            </summary>
            <param name="id">The ID for the target <see cref="T:HFN.Common.GameObjectPool"/>.</param>
        </member>
        <member name="M:HFN.Common.PoolManager.GetPool_Internal``1(UnityEngine.GameObject)">
            <summary>
            Get the <see cref="T:HFN.Common.GameObjectPool"/> derived pool associated with the given <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T"><see cref="T:HFN.Common.GameObjectPool"/> derived type of the target pool.</typeparam>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> being pooled by the target <see cref="T:HFN.Common.GameObjectPool"/>.</param>
        </member>
        <member name="T:HFN.Common.PoolPreloadType">
            <summary>
            Enum used when determining how to preload a <see cref="T:HFN.Common.GameObjectPool"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.PoolPreloadType.Instant">
            <summary>
            The preloading is done all at once.
            </summary>
        </member>
        <member name="F:HFN.Common.PoolPreloadType.OverTime">
            <summary>
            The preloading is spaced out over time intervals.
            </summary>
        </member>
        <member name="F:HFN.Common.PoolPreloadType.OverFrames">
            <summary>
            The preloading is spaced out over frame intervals.
            </summary>
        </member>
        <member name="T:HFN.Common.UnityObjectPoolTag">
            <summary>
            Class containing data used in <see cref="T:HFN.Common.PoolManager"/> for pooling.
            </summary>
        </member>
        <member name="F:HFN.Common.UnityObjectPoolTag.poolId">
            <summary>
            The ID for this object's pool.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityObjectPoolTag.LogTagId">
            <summary>
            Logs the tag's ID to the console.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityObjectPoolTag.Apply(UnityEngine.GameObject,System.Object)">
            <summary>
            Adds a <see cref="T:HFN.Common.UnityObjectPoolTag"/> component to the passed game object and set its pool ID.
            </summary>
            <param name="go">The game object to apply the tag to.</param>
            <param name="id">The ID for the pool this tag's object belongs to.</param>
        </member>
        <member name="M:HFN.Common.UnityObjectPoolTag.Get(UnityEngine.GameObject)">
            <summary>
            Gets the <see cref="T:HFN.Common.UnityObjectPoolTag"/> component on the passed game object.
            </summary>
            <param name="go">The game object to get the tag component from.</param>
        </member>
        <member name="M:HFN.Common.UnityObjectPoolTag.GetPoolId(UnityEngine.GameObject)">
            <summary>
            Returns the pool ID for the <see cref="T:HFN.Common.UnityObjectPoolTag"/> attached to the passed game object.
            </summary>
            <param name="go">The game object to grab the associated pool ID from.</param>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.normalizedHitCoord">
            <summary>
            Normalized value where the raycast hit an object's collider.
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.pixelCoord">
            <summary>
            Pixel coordinate on the texture being sampled for alpha.
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.pixelColor">
            <summary>
            Color of the pixel on the texture being sampled for alpha.
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.point">
            <summary>
              <para>The impact point in world space where the ray hit the collider.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.normal">
            <summary>
              <para>The normal of the surface the ray hit.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.barycentricCoordinate">
            <summary>
              <para>The barycentric coordinate of the triangle we hit.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.distance">
            <summary>
              <para>The distance from the ray's origin to the impact point.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.triangleIndex">
            <summary>
              <para>The index of the triangle that was hit.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.textureCoord">
            <summary>
              <para>The uv texture coordinate at the collision location.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.textureCoord2">
            <summary>
              <para>The secondary uv texture coordinate at the impact point.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.lightmapCoord">
            <summary>
              <para>The uv lightmap coordinate at the impact point.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.collider">
            <summary>
              <para>The Collider that was hit.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.rigidbody">
            <summary>
              <para>The Rigidbody of the collider that was hit. If the collider is not attached to a rigidbody then it is null.</para>
            </summary>
        </member>
        <member name="P:HFN.Common.AlphaRaycastHit.transform">
            <summary>
              <para>The Transform of the rigidbody or collider that was hit.</para>
            </summary>
        </member>
        <member name="T:HFN.Common.Raycaster">
            <summary>
            Automatically handles raycasting and accessing raycast information.
            </summary>
        </member>
        <member name="T:HFN.Common.Raycaster.MouseCastDirection">
            <summary>
            Determines how the <see cref="T:HFN.Common.Raycaster"/> calculates ray direction when casting based on the mouse's position.
            </summary>
        </member>
        <member name="F:HFN.Common.Raycaster.MouseCastDirection.CameraForward">
            <summary>
            Cast in the forward direction of the camera.
            </summary>
        </member>
        <member name="F:HFN.Common.Raycaster.MouseCastDirection.CursorAngled">
            <summary>
            Cast in an angle from the camera to the cursor.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport">
            <summary>
            Uses Viewport center to detect a GameObject being cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport``1">
            <summary>
            Uses Viewport center to detect an object of specified class T being cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport(System.Single)">
            <summary>
            Uses Viewport center to detect a GameObject being cast against.
            Can specify casting distance.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport``1(System.Single)">
            <summary>
            Uses Viewport center to detect an object of specified class T being cast against.
            Can specify casting distance.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport(System.Single,System.Int32,System.Int32)">
            <summary>
            Uses Viewport center to detect a GameObject being cast against.
            Can specify casting distance and target/blocking layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport``1(System.Single,System.Int32,System.Int32)">
            <summary>
            Uses Viewport center to detect an object of specified class T being cast against.
            Can specify casting distance and target/blocking layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport(UnityEngine.Vector3,System.Single)">
            <summary>
            Uses custom point on Viewport to detect a GameObject being cast against.
            Can specify casting distance.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport``1(UnityEngine.Vector3,System.Single)">
            <summary>
            Uses custom point on Viewport to detect an object of specified class T being cast against.
            Can specify casting distance.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport(UnityEngine.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
            Uses custom point on Viewport to detect a GameObject being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastViewport``1(UnityEngine.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
            Uses custom point on Viewport to detect an object of specified class T being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastMouse">
            <summary>
            Uses mouse position to detect a GameObject being cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastMouse``1">
            <summary>
            Uses mouse position to detect an object of specified class T being cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastMouse(System.Single)">
            <summary>
            Uses mouse position to detect a GameObject being cast against.
            Can specify casting distance.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastMouse``1(System.Single)">
            <summary>
            Uses mouse position to detect an object of specified class T being cast against.
            Can specify casting distance.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastMouse(System.Single,System.Int32,System.Int32)">
            <summary>
            Uses mouse position to detect a GameObject being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastMouse``1(System.Single,System.Int32,System.Int32)">
            <summary>
            Uses mouse position to detect an object of specified class T being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform">
            <summary>
            Uses Raycaster specified transform as origin of ray to detect a GameObject being cast against.
            If the target transform has not been set up, will use the Transform of the Raycaster game object.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform``1">
            <summary>
            Uses Raycaster specified transform as origin of ray to detect an object of specified class T being cast against.
            If the target transform has not been set up, will use the Transform of the Raycaster game object.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform(UnityEngine.Transform)">
            <summary>
            Uses specified transform as origin of ray to detect a GameObject being cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform``1(UnityEngine.Transform)">
            <summary>
            Uses specified transform as origin of ray to detect an object of specified class T being cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform(UnityEngine.Transform,System.Single)">
            <summary>
            Uses specified transform as origin of ray to detect a GameObject being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform``1(UnityEngine.Transform,System.Single)">
            <summary>
            Uses specified transform as origin of ray to detect an object of specified class T being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform(UnityEngine.Transform,System.Single,System.Int32,System.Int32)">
            <summary>
            Uses specified transform as origin of ray to detect a GameObject being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.CastTransform``1(UnityEngine.Transform,System.Single,System.Int32,System.Int32)">
            <summary>
            Uses specified transform as origin of ray to detect an object of specified class T being cast against.
            Can specify casting distance and layers.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.Cast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Detects a GameObject being cast against.
            Can specify ray origin, direction, and range.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.Cast``1(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Detects an object of class T being cast against.
            Can specify ray origin, direction, and range.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.Cast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
            Detects a GameObject being cast against.
            Can specify ray origin, direction, cast distance, and layers to cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.Cast(UnityEngine.Ray,System.Single,System.Int32,System.Int32)">
            <summary>
            Detects a GameObject being cast against.
            Can specify the used ray, cast distance, and layers to cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.Cast``1(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
            Detects an object of class T being cast against.
            Can specify ray origin, direction, cast distance, and layers to cast against.
            </summary>
        </member>
        <member name="M:HFN.Common.Raycaster.Cast``1(UnityEngine.Ray,System.Single,System.Int32,System.Int32)">
            <summary>
            Detects an object of class T being cast against.
            Can specify the used ray, cast distance, and layers to cast against.
            </summary>
        </member>
        <member name="T:HFN.Common.RaycastOrigin">
            <summary>
            Determines the origin point when <see cref="T:HFN.Common.Raycaster"/> creates raycasts.
            </summary>
        </member>
        <member name="F:HFN.Common.RaycastOrigin.Viewport">
            <summary>
            Use a point on the screen.
            </summary>
        </member>
        <member name="F:HFN.Common.RaycastOrigin.MousePointer">
            <summary>
            Use the mouse cursor.
            </summary>
        </member>
        <member name="F:HFN.Common.RaycastOrigin.Transform">
            <summary>
            Use a transform's position.
            </summary>
        </member>
        <member name="F:HFN.Common.RaycastOrigin.Custom">
            <summary>
            Custom solution.
            </summary>
        </member>
        <member name="T:HFN.Common.SceneCollection">
            <summary>
            Asset mapping <see cref="T:HFN.Common.SceneId"/> values to actual scenes.
            </summary>
        </member>
        <member name="M:HFN.Common.SceneCollection.GetSceneName(HFN.Common.SceneId)">
            <summary>
            Returns the scene associated with the given <see cref="T:HFN.Common.SceneId"/>.
            </summary>
            <param name="id">The ID associated with the deisred scene.</param>
        </member>
        <member name="M:HFN.Common.SceneCollection.GetSceneId(System.String)">
            <summary>
            
            </summary>
            <param name="sceneName"></param>
        </member>
        <member name="T:HFN.Common.SceneCollectionData">
            <summary>
            Struct containing data used by <see cref="T:HFN.Common.SceneCollection"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.SceneCollectionData.sceneId">
            <summary>
            The ID for the target scene.
            </summary>
        </member>
        <member name="F:HFN.Common.SceneCollectionData.scenePath">
            <summary>
            Path to the target scene.
            </summary>
        </member>
        <member name="T:HFN.Common.SceneId">
            <summary>
            <see cref="T:HFN.Common.CollectionItem"/> used for representing Unity scenes.
            </summary>
        </member>
        <member name="T:HFN.Common.ScreenshotCamera">
            <summary>
            Component to add to cameras to take screenshots.
            </summary>
        </member>
        <member name="P:HFN.Common.ScreenshotCamera.CachedCamera">
            <summary>
            Camera component attached to this script's gameobject.
            </summary>
        </member>
        <member name="P:HFN.Common.ScreenshotCamera.IncludeInScreenshot">
            <summary>
            Returns true if this camera should be included in the exported screenshot.
            </summary>
        </member>
        <member name="M:HFN.Common.ScreenshotCamera.TakeScreenshot(System.Boolean)">
            <summary>
            Takes a screenshot. Can optionally save the screenshot to disk.
            </summary>
        </member>
        <member name="M:HFN.Common.ScreenshotCamera.CheckValues">
            <summary>
            Updates this screenshot camera to use the proper values for screenshots.
            </summary>
        </member>
        <member name="M:HFN.Common.ScreenshotCamera.SetValues">
            <summary>
            Updates the values for screenshots to match this camera's settings.
            </summary>
        </member>
        <member name="M:HFN.Common.ScreenshotCamera.GetSavePath">
            <summary>
            Returns the path to the folder containing the save location for the screenshot.
            </summary>
        </member>
        <member name="T:HFN.Common.ScreenshotUtility">
            <summary>
            Class handling backend functionality for taking screenshots.
            </summary>
        </member>
        <member name="T:HFN.Common.ScreenshotUtility.EncodingType">
            <summary>
            The encoding method used for the saved screenshot.
            </summary>
        </member>
        <member name="T:HFN.Common.ScreenshotUtility.ResolutionType">
            <summary>
            Enum containing preset resolutions to use when taking a screenshot.
            </summary>
        </member>
        <member name="T:HFN.Common.ScreenshotUtility.SaveLocation">
            <summary>
            Location to save screenshots to.
            </summary>
        </member>
        <member name="F:HFN.Common.ScreenshotUtility.SaveLocation.Default">
            <summary>
            Default location (project root in editor, Application.DataPath in builds)
            </summary>
        </member>
        <member name="F:HFN.Common.ScreenshotUtility.defaultOutputPath">
            <summary>
            Path to the deafult output folder's contents.
            </summary>
        </member>
        <member name="F:HFN.Common.ScreenshotUtility.cameras">
            <summary>
            List of all active <see cref="T:HFN.Common.ScreenshotCamera"/>s.
            </summary>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.AddCamera(HFN.Common.ScreenshotCamera)">
            <summary>
            Adds a <see cref="T:HFN.Common.ScreenshotCamera"/> to the list of active cameras.
            </summary>
            <param name="camera">The <see cref="T:HFN.Common.ScreenshotCamera"/> to add to the list of active cameras.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.RemoveCamera(HFN.Common.ScreenshotCamera)">
            <summary>
            Removes a <see cref="T:HFN.Common.ScreenshotCamera"/> from the list of active cameras.
            </summary>
            <param name="camera">The <see cref="T:HFN.Common.ScreenshotCamera"/> to remove from the list of active cameras.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(HFN.Common.ScreenshotUtility.ResolutionType,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given resolution.
            </summary>
            <param name="resolution">The resolution to take the screenshot at.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(HFN.Common.ScreenshotUtility.ResolutionType,HFN.Common.ScreenshotUtility.EncodingType,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given resolution and encoding.
            </summary>
            <param name="resolution">The resolution to take the screenshot at.</param>
            <param name="encoding">How the screenshot should be encoded.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(HFN.Common.ScreenshotUtility.ResolutionType,HFN.Common.ScreenshotUtility.EncodingType,System.String,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given resolution and encoding then save it to the specified folder.
            </summary>
            <param name="resolution">The resolution to take the screenshot at.</param>
            <param name="encoding">How the screenshot should be encoded.</param>
            <param name="savePath">The folder to save the screenshot to.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(HFN.Common.ScreenshotUtility.ResolutionType,HFN.Common.ScreenshotUtility.EncodingType,System.Boolean,System.String,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given resolution and encoding then save it to the specified folder.
            </summary>
            <param name="resolution">The resolution to take the screenshot at.</param>
            <param name="encoding">How the screenshot should be encoded.</param>
            <param name="save">If true, will save the screenshot to disk.</param>
            <param name="savePath">The folder to save the screenshot to.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(System.Int32,System.Int32,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given width and height.
            </summary>
            <param name="customWidth">The width of the screenshot.</param>
            <param name="customHeight">The height of the screenshot.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(System.Int32,System.Int32,HFN.Common.ScreenshotUtility.EncodingType,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given width, height, and encoding.
            </summary>
            <param name="customWidth">The width of the screenshot.</param>
            <param name="customHeight">The height of the screenshot.</param>
            <param name="encoding">How the screenshot should be encoded.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(System.Int32,System.Int32,HFN.Common.ScreenshotUtility.EncodingType,System.Boolean,System.String,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given width, height, and encoding then save it to the specified forlder if desired.
            </summary>
            <param name="customWidth">The width of the screenshot.</param>
            <param name="customHeight">The height of the screenshot.</param>
            <param name="encoding">How the screenshot should be encoded.</param>
            <param name="saveScreenToDisk">If true, will save the screenshot to disk.</param>
            <param name="savePath">The folder to save the screenshot to.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeScreenshot(System.Collections.Generic.List{UnityEngine.Camera},System.Int32,System.Int32,HFN.Common.ScreenshotUtility.EncodingType,System.Boolean,System.String,System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a screenshot with the given width, height, and encoding, using the given cameras, then save it to the specified forlder if desired.
            </summary>
            <param name="cameras">The cameras to take a screenshot with.</param>
            <param name="customWidth">The width of the screenshot.</param>
            <param name="customHeight">The height of the screenshot.</param>
            <param name="encoding">How the screenshot should be encoded.</param>
            <param name="saveScreenToDisk">If true, will save the screenshot to disk.</param>
            <param name="savePath">The folder to save the screenshot to.</param>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="M:HFN.Common.ScreenshotUtility.TakeTempScreenshot(System.Action{UnityEngine.Texture2D})">
            <summary>
            Take a temporary screenshot (useful for showing the screenshot on screen, but not saving out an actual file)
            </summary>
            <param name="onScreenTaken">Callback to invoke to pass the screenshot back once it is taken.</param>
        </member>
        <member name="T:HFN.Common.BinarySemaphore">
            <summary>
            Convenience class for easily creating a binary semaphore that returns whatever the value was last set to.
            </summary>
        </member>
        <member name="F:HFN.Common.BinarySemaphore.value">
            <summary>
            The value for the semaphore.
            </summary>
        </member>
        <member name="F:HFN.Common.BinarySemaphore.initialValue">
            <summary>
            The initial value for the semaphore.
            </summary>
        </member>
        <member name="P:HFN.Common.BinarySemaphore.Value">
            <summary>
            Returns the most recent value this semaphore was set to.
            </summary>
        </member>
        <member name="M:HFN.Common.BinarySemaphore.Reset">
            <summary>
            Reset the semaphore to its initial value.
            </summary>
        </member>
        <member name="T:HFN.Common.CountingSemaphore">
            <summary>
            Convenience class for easily creating semaphores and tracking boolean values.
            </summary>
        </member>
        <member name="F:HFN.Common.CountingSemaphore.count">
            <summary>
            The current value for the semaphore.
            </summary>
        </member>
        <member name="F:HFN.Common.CountingSemaphore.initialValue">
            <summary>
            The initial value for the semaphore.
            </summary>
        </member>
        <member name="M:HFN.Common.CountingSemaphore.#ctor(System.Int32)">
            <summary>
            Contructor that sets the initial value of the semaphore.
            A value of 0 or greater returns a true value, while negative values return false.
            </summary>
            <param name="count">The initial value of the semaphore.</param>
        </member>
        <member name="P:HFN.Common.CountingSemaphore.Value">
            <summary>
            The value for the semaphore.
            If there are more false values than true values, false is returned. Otherwise, returns true.
            </summary>
        </member>
        <member name="M:HFN.Common.CountingSemaphore.Reset">
            <summary>
            Reset the semaphore to its initial value.
            </summary>
        </member>
        <member name="T:HFN.Common.ISemaphore">
            <summary>
            Interface for semaphores to implement. 
            </summary>
        </member>
        <member name="T:HFN.Common.ShaderPropertyType">
            <summary>
            Runtime wrapper for ShaderUtil.ShaderPropertyType.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderPropertyType.None">
            <summary>
            Any property type.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderPropertyType.Color">
            <summary>
            Color Property.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderPropertyType.Vector">
            <summary>
            Vector Property.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderPropertyType.Float">
            <summary>
            Float Property.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderPropertyType.Range">
            <summary>
            Range Property.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderPropertyType.TexEnv">
            <summary>
            Texture Property.
            </summary>
        </member>
        <member name="T:HFN.Common.ShaderReference">
            <summary>
            Convenience class for easily grabbing <see cref="T:UnityEngine.Shader"/> references.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderReference.shaderName">
            <summary>
            The name of the target <see cref="T:UnityEngine.Shader"/> reference.
            </summary>
        </member>
        <member name="F:HFN.Common.ShaderReference.shader">
            <summary>
            The actual <see cref="T:UnityEngine.Shader"/> reference.
            </summary>
        </member>
        <member name="T:HFN.Common.Client">
            <summary>
            Convenience class to retrive singletons and basic application related info.
            </summary>
        </member>
        <member name="F:HFN.Common.Client.simulatePlatform">
            <summary>
            Should the client behave as if it is running on a platform other than the editor?
            </summary>
        </member>
        <member name="F:HFN.Common.Client.simulatedPlatform">
            <summary>
            What the platform identifier should return when running in the editor.
            </summary>
        </member>
        <member name="F:HFN.Common.Client.targetFramerate">
            <summary>
            Framerate to lock the application to initially. Setting to 0 will unlock the framerate.
            </summary>
        </member>
        <member name="F:HFN.Common.Client.editorPlatformIdentifier">
            <summary>
            String representation of the build platform the editor is targeting.
            Set by ClientEditorUtility.
            </summary>
        </member>
        <member name="F:HFN.Common.Client.editorOsIdentifier">
            <summary>
            String representation of the OS the editor is running on.
            Set by ClientEditorUtility.
            </summary>
        </member>
        <member name="P:HFN.Common.Client.EditorPlatformIdentifier">
            <summary>
            The string identifier for the current target build platform.
            Should only be set by ClientEditorUtility.
            </summary>
        </member>
        <member name="P:HFN.Common.Client.EditorOsIdentifier">
            <summary>
            The string identifier for the OS running the editor.
            Should only be set by ClientEditorUtility.
            </summary>
        </member>
        <member name="M:HFN.Common.Client.As``1">
            <summary>
            Return the instance of the client as a given <see cref="T:HFN.Common.Client"/> derived class.
            </summary>
            <typeparam name="T">The type to cast the <see cref="T:HFN.Common.Client"/> instance to.</typeparam>
        </member>
        <member name="P:HFN.Common.Client.Exists">
            <summary>
            Return true if there is an instance of a <see cref="T:HFN.Common.Client"/> object.
            </summary>
        </member>
        <member name="M:HFN.Common.Client.Contains``1">
            <summary>
            Returns true if the target type is spawned under client.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
        </member>
        <member name="M:HFN.Common.Client.Get``1">
            <summary>
            Get an <see cref="T:HFN.Common.ISingleton"/> object of the specified type below the client.
            </summary>
        </member>
        <member name="M:HFN.Common.Client.Set``1(``0)">
            <summary>
            Sets a value for cached singletons.
            </summary>
            <typeparam name="T">The type of the singleton value to set.</typeparam>
            <param name="singleton">The singleton reference to set.</param>
        </member>
        <member name="M:HFN.Common.Client.Remove``1(``0)">
            <summary>
            Remove a singleton reference from the cached singletons.
            </summary>
            <typeparam name="T">The type of the singleton value to remove.</typeparam>
            <param name="singleton">The singleton reference to remove.</param>
        </member>
        <member name="M:HFN.Common.Client.ResetClient(System.Boolean)">
            <summary>
            Reset the <see cref="T:HFN.Common.Client"/> object and its child singletons.
            </summary>
            <param name="destroy">If true, will destroy the client object.</param>
        </member>
        <member name="M:HFN.Common.Client.Pause(System.Boolean,System.Boolean)">
            <summary>
            Set pause flags to pause or resume the game.
            </summary>
            <param name="isPaused">Determines if the game will be paused or unpaused.</param>
            <param name="updateTimescale">If true, timescale will be set to 0 when pausing and 1 when unpausing.</param>
        </member>
        <member name="P:HFN.Common.Client.IsPaused">
            <summary>
            Returns true if the <see cref="T:HFN.Common.VariableManager"/> has the <see cref="F:HFN.Common.VariableId.Is_Game_Paused"/> bool set to true.
            </summary>
        </member>
        <member name="P:HFN.Common.Client.IsRunning">
            <summary>
            Returns true if the applicaion is playing and not quitting.
            </summary>
        </member>
        <member name="P:HFN.Common.Client.OperatingSystemIdentifier">
            <summary>
            Returns a string identifying the operating system used by the device.
            </summary>
        </member>
        <member name="P:HFN.Common.Client.PlatformIdentifier">
            <summary>
            Returns a string representation of the build platform for the application.
            </summary>
        </member>
        <member name="T:HFN.Common.ClientConfig">
            <summary>
            Class used as a centralized area to access various values for Client related scripts.
            </summary>
        </member>
        <member name="F:HFN.Common.ClientConfig.DEFAULT_SERVER_ROOT">
            <summary>
            The default root URL to use when attempting to reach the server.
            By default, this is "https://ecodev.hfnelson.com"
            </summary>
        </member>
        <member name="F:HFN.Common.ClientConfig.DEFAULT_SERVER_PORT">
            <summary>
            The default port to use when attempting to reach the server.
            Should use 443 for https | 80 for http
            By default, this is 443
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.ServerUri">
            <summary>
            The URI to use when connecting to the server. This is made up of {<see cref="F:HFN.Common.ClientConfig.KEY_SERVER_ROOT"/>}:{<see cref="F:HFN.Common.ClientConfig.KEY_SERVER_PORT"/>}/{<see cref="F:HFN.Common.ClientConfig.KEY_SERVER_PATH"/>}
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.VersionFilePath">
            <summary>
            Path to the version file contained in the project's streaming assets path.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.IsLoaded">
            <summary>
            Returns true if the client config has loaded its state properly.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.IsOffline">
            <summary>
            Returns true if the config is set to offline mode.
            WebGL, Android, and iOS builds are always online.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.IsDebuggingEnabled">
            <summary>
            Returns true if the client config has flagged debugging to be true.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.IsAccountCreationEnabled">
            <summary>
            Returns true if the client config has flagged account creation to be true.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.UseLocalAssetBundles">
            <summary>
            Returns true if the client config specifies that asset bundles should be loaded from local bundles instead of downloaded online.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.InternalDataDirectory">
            <summary>
            Returns the path to the streaming assets folder, formatting for the target platform.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.PlayerDataDirectory">
            <summary>
            Returns the path to the persistent data folder.
            </summary>
        </member>
        <member name="P:HFN.Common.ClientConfig.AssetBundlesDirectory">
            <summary>
            Returns the path to the folder to stream asset bundles from.
            This is usually a folder marked 'AssetBundles' in the streaming assets folder.
            In the editor, it is a folder called 'AssetBundles' in the root Assets folder.
            </summary>
        </member>
        <member name="T:HFN.Common.ISingleton">
            <summary>
            Interface for singletons to implement.
            </summary>
        </member>
        <member name="T:HFN.Common.AtlasSpriteSelector">
            <summary>
            Convenience class to select sprites packed into <see cref="T:UnityEngine.U2D.SpriteAtlas"/> assets via the inspector.
            Sprites with underscores in their names will be displayed with nested menus.
            </summary>
            \image html UI/AtlasSpriteSelector01.png "Sprite selection showing standard and nested sprite names.
        </member>
        <member name="F:HFN.Common.AtlasSpriteSelector.atlas">
            <summary>
            The <see cref="T:UnityEngine.U2D.SpriteAtlas"/> to pull sprites from.
            </summary>
        </member>
        <member name="F:HFN.Common.AtlasSpriteSelector.id">
            <summary>
            The name of the sprite to pull from the atlas.
            </summary>
        </member>
        <member name="M:HFN.Common.AtlasSpriteSelector.GetSprite">
            <summary>
            Gets the specified <see cref="T:UnityEngine.Sprite"/> from the target atlas.
            </summary>
        </member>
        <member name="M:HFN.Common.AtlasSpriteSelector.ClearSprite">
            <summary>
            Clears the reference to the atlased sprite.
            Useful for memory management.
            </summary>
        </member>
        <member name="T:HFN.Common.RendererSpriteMapper">
            <summary>
            Base class for <see cref="T:HFN.Common.SpriteMapper"/> classes that affect <see cref="T:UnityEngine.SpriteRenderer"/> components.
            </summary>
        </member>
        <member name="P:HFN.Common.RendererSpriteMapper.Renderer">
            <summary>
            <see cref="T:UnityEngine.SpriteRenderer"/> component associated with this mapper.
            </summary>
        </member>
        <member name="T:HFN.Common.SpriteMapper">
            <summary>
            Base class for ensuring correct loading of sprites from atlases into target sprite based components.
            </summary>
        </member>
        <member name="M:HFN.Common.SpriteMapper.Refresh">
            <summary>
            Refresh the sprite shown.
            </summary>
        </member>
        <member name="M:HFN.Common.SpriteMapper.Initialize">
            <summary>
            Assigns an event listener to the <see cref="T:UnityEngine.U2D.SpriteAtlasManager"/> class to listen for <see cref="T:UnityEngine.U2D.SpriteAtlas"/>es being loaded.
            </summary>
        </member>
        <member name="M:HFN.Common.SpriteMapper.Denitialize">
            <summary>
            Removes an event listener to the <see cref="T:UnityEngine.U2D.SpriteAtlasManager"/> class to listen for <see cref="T:UnityEngine.U2D.SpriteAtlas"/>es being loaded.
            </summary>
        </member>
        <member name="T:HFN.Common.RendererSpriteAtlasMapper">
            <summary>
            Class that enforces <see cref="T:UnityEngine.SpriteRenderer"/> sprites that are part of a <see cref="T:UnityEngine.U2D.SpriteAtlas"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.RendererSpriteAtlasMapper.sprite">
            <summary>
            The sprite to map to the associated image.
            </summary>
        </member>
        <member name="M:HFN.Common.RendererSpriteAtlasMapper.Refresh">
            <summary>
            Refresh the sprite shown on the target image.
            </summary>
        </member>
        <member name="T:HFN.Common.SystemInfoUtility">
            <summary>
            Contains several utility functions to log info on the device playing an app.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.SystemProfile">
            <summary>
            Returns a string detailing system information.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsDeviceName">
            <summary>
            Name of the graphics device.
            This is name of the user's graphics card, as reported by the graphics driver.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsDeviceID">
            <summary>
            PCI device ID of the graphics card.
            (Only supported on Windows / OSX / Linux)
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsDeviceType">
            <summary>
            Graphics API type used by the graphics device.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsDeviceVersion">
            <summary>
            Graphics API type and driver version used by the graphic device.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsDeviceVendor">
            <summary>
            Vendor of the graphics device as reported by the graphics driver.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsDeviceVendorID">
            <summary>
            PCI vendor ID of the graphics card.
            Uniquely identifies a particular graphics card maker.
            The number is the same across operating systems and driver versions.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsShaderLevel">
            <summary>
            Graphics device shader capability level.
            Possible values are:
            50 - Shader Model 5.0 (DX11.0)
            41 - Shader Model 4.1 (DX10.1)
            40 - Shader Model 4.0 (DX10.0)
            30 - Shader Model 3.0
            20 - Shader Model 2.x
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.GraphicsMemory">
            <summary>
            Amount of video memory available (in megabytes).
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.ProcessorType">
            <summary>
            Processor name.
            Returns N/A on platforms not supporting this property.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.ProcessorFrequency">
            <summary>
            Nominal processor (CPU) frequency in MHz.
            Returns 0 if unknown.
            Platforms not supporting this include: iOS, WebGL, and Tizen.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.ProcessorCount">
            <summary>
            Number of logical processors reported by the OS.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.DeviceModel">
            <summary>
            Model of the device.
            Name format depends on the device OS.
            If the model name is not available, a generic name like "PC" will be returned.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.OperatingSystem">
            <summary>
            OS name and version.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.SystemMemory">
            <summary>
            Amount of system memory available (in megabytes).
            This function is not supported on Windows Store apps and will return 0.
            </summary>
        </member>
        <member name="P:HFN.Common.SystemInfoUtility.SupportsComputeShaders">
            <summary>
            Are compute shaders supported by the device?
            </summary>
        </member>
        <member name="T:HFN.Common.VersioningUtility">
            <summary>
            Convenience class for referencing version data.
            </summary>
        </member>
        <member name="F:HFN.Common.VersioningUtility.VERSION_FILE">
            <summary>
            The name of the generated version file when setting the current version number.
            </summary>
        </member>
        <member name="F:HFN.Common.VersioningUtility.DefaultVersion">
            <summary>
            The default version number to use if no version number has been set in a version file.
            By default: 1.0.0
            </summary>
        </member>
        <member name="P:HFN.Common.VersioningUtility.VersionFilePath">
            <summary>
            Path to the version file.
            By default: version.txt under the streaming assets folder.
            </summary>
        </member>
        <member name="P:HFN.Common.VersioningUtility.BuildVersion">
            <summary>
            The current version set in the version file or a default version value (<see cref="F:HFN.Common.VersioningUtility.DefaultVersion"/>) if a version file doesn't exist.
            </summary>
        </member>
        <member name="T:HFN.Common.TerrainTreeData">
            <summary>
            Data associated with tree brush position values for trees painted onto a terrain.
            </summary>
        </member>
        <member name="T:HFN.Common.AxisDirection">
            <summary>
            Determines axes in 3D space that will be observed.
            </summary>
        </member>
        <member name="F:HFN.Common.AxisDirection.None">
            <summary>
            No axis is used.
            </summary>
        </member>
        <member name="F:HFN.Common.AxisDirection.Everything">
            <summary>
            Use the X, Y, and Z axes.
            </summary>
        </member>
        <member name="T:HFN.Common.AxisDirection2D">
            <summary>
            Determines axes in 2D space that will be observed.
            </summary>
        </member>
        <member name="F:HFN.Common.AxisDirection2D.None">
            <summary>
            No axis is used.
            </summary>
        </member>
        <member name="F:HFN.Common.AxisDirection2D.X">
            <summary>
            Use the X axis.
            </summary>
        </member>
        <member name="F:HFN.Common.AxisDirection2D.Y">
            <summary>
            Use the Y axis.
            </summary>
        </member>
        <member name="F:HFN.Common.AxisDirection2D.Everything">
            <summary>
            Use both the X and Y axes.
            </summary>
        </member>
        <member name="T:HFN.Common.RectScaleType">
            <summary>
            Enum used to determine how scaled RectTransforms scale to fill available space.
            </summary>
        </member>
        <member name="F:HFN.Common.RectScaleType.ScaleToFill">
            <summary>
            Scale until all available space is filled.
            </summary>
        </member>
        <member name="F:HFN.Common.RectScaleType.ScaleToFit">
            <summary>
            Scale until either the width or height (whichever is smaller) of the available space is filled.
            </summary>
        </member>
        <member name="T:HFN.Common.ScaledRectTransform">
            <summary>
            Resizes a <see cref="T:UnityEngine.RectTransform"/> to fill the maximum amount of space based on its parent <see cref="T:UnityEngine.RectTransform"/>'s dimensions.
            </summary>
        </member>
        <member name="F:HFN.Common.ScaledRectTransform.scaleType">
            <summary>
            How the RectTransform will scale in relation to its parent rect.\n\n
            ScaleToFill - Scale the RectTransform until the entire parent RectTransform is filled.\n\n
            ScaleToFit - Scale the RectTransform to use the maximum amount of space without extending past the parent RectTransform's bounds.\n\n
            </summary>
        </member>
        <member name="F:HFN.Common.ScaledRectTransform.aspectRatio">
            <summary>
            Aspect ratio for the RectTransform to scale along.
            </summary>
        </member>
        <member name="F:HFN.Common.ScaledRectTransform.padding">
            <summary>
            Padding distance to apply from the parent RectTransform's bounds.
            </summary>
        </member>
        <member name="F:HFN.Common.ScaledRectTransform.pivot">
            <summary>
            Pivot for the image.
            </summary>
        </member>
        <member name="T:HFN.Common.AudioTweenVolume">
            <summary>
            Tweener for an <see cref="T:UnityEngine.AudioSource"/>'s volume parameter.
            </summary>
        </member>
        <member name="F:HFN.Common.AudioTweenVolume.startVolume">
            <summary>
            Volume for the AudioSource when the tween starts playing.
            </summary>
        </member>
        <member name="F:HFN.Common.AudioTweenVolume.endVolume">
            <summary>
            Volume for the AudioSource when the tween finishes playing.
            </summary>
        </member>
        <member name="M:HFN.Common.AudioTweenVolume.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its target <see cref="T:UnityEngine.AudioSource"/>'s volume based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.CameraTweener">
            <summary>
            Base class for tweens controlling <see cref="T:UnityEngine.Camera"/> settings.
            </summary>
        </member>
        <member name="P:HFN.Common.CameraTweener.CachedCamera">
            <summary>
            The camera attached to this tween.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenCameraFov">
            <summary>
            Tweener for a camera's Field of View.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraFov.startFov">
            <summary>
            FOV for the camera when the tween starts playing.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraFov.endFov">
            <summary>
            FOV for the camera when the tween finishes playing.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenCameraFov.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its target <see cref="T:UnityEngine.Camera"/>'s fieldOfView based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenCameraOrthoSize">
            <summary>
            Tweener for a camera's orthographic size.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraOrthoSize.startSize">
            <summary>
            Orthographic size for the camera when the tween starts playing.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraOrthoSize.endSize">
            <summary>
            Orthographic size for the camera when the tween finishes playing.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenCameraOrthoSize.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its target <see cref="T:UnityEngine.Camera"/>'s orthographicSize based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenCameraViewportWH">
            <summary>
            Tweener for the width and height of the camera's drawn rect on the screen.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraViewportWH.startValue">
            <summary>
            Start value for the width and height of the camera rect. (0, 0) is completely invisible and (1, 1) is fully visable as normal.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraViewportWH.endValue">
            <summary>
            End value for the width and height of the camera rect. (0, 0) is completely invisible and (1, 1) is fully visable as normal.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenCameraViewportWH.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its target <see cref="T:UnityEngine.Camera"/>'s rect width and height values based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenCameraViewportXY">
            <summary>
            Tweener for the X and Y position of the camera's drawn rect on the screen.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraViewportXY.startValue">
            <summary>
            Start value for the X and Y position of the camera rect. (0, 0) is the bottom left and (1, 1) is the top right.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCameraViewportXY.endValue">
            <summary>
            End value for the X and Y position of the camera rect. (0, 0) is the bottom left and (1, 1) is the top right.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenCameraViewportXY.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its target <see cref="T:UnityEngine.Camera"/>'s rect X and Y values based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.CoreTweener">
            <summary>
            Base class for tweening classes.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.wrapMode">
            <summary>
            Determines how the tween wraps after finishing.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.loopCount">
            <summary>
            Number of times the tween should loop. If set to 0, will loop forever. When wrap mode is set to PingPong, a loop is counted as one full forwards and backwards play of the tween.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.curve">
            <summary>
            Curve to evaluate tweening along.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.ignoreTimeScale">
            <summary>
            If true, will ignore timescale when tweening.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.playAtStart">
            <summary>
            If true, will automatically play the tween at Start().
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.duration">
            <summary>
            How long the tween takes to execute once.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.startDelay">
            <summary>
            Initial delay before the tween plays.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.OnTweenStart">
            <summary>
            Event fired when the tween starts playing.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.OnTweenFinish">
            <summary>
            Event fired when the tween finishes playing.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.tweenStarted">
            <summary>
            Has the tween started playing?
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.tweenPaused">
            <summary>
            Is the tween paused?
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.tweenForward">
            <summary>
            Determines if the tween should play forwards or backwards.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.tweenLoopCount">
            <summary>
            Number of loop counts remaining for the tween.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.tweenDuration">
            <summary>
            The current duration of the tween.
            </summary>
        </member>
        <member name="F:HFN.Common.CoreTweener.tweenPosition">
            <summary>
            The normalized position of the tween.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.TweenPosition">
            <summary>
            The current tween position as evaluated along the curve.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.TweenPositionRaw">
            <summary>
            Unadjusted normalized position of the tween.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.IsPlaying">
            <summary>
            Is the tween currently playing?
            NOTE: This will return true if the tween is paused.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.IsPaused">
            <summary>
            Is the tween currently paused.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.DrivenByObject">
            <summary>
            Object driving properties on this tween.
            This should only be manipulated through the <see cref="T:HFN.Common.Internal.DrivenTweenTracker"/> class.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.DrivenProperties">
            <summary>
            Properties being driven by an external object.
            This should only be manipulated through the <see cref="T:HFN.Common.Internal.DrivenTweenTracker"/> class.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.onTweenStart">
            <summary>
            Event fired when the tween starts.
            </summary>
        </member>
        <member name="P:HFN.Common.CoreTweener.onTweenFinish">
            <summary>
            Event fired when the tween finishes playing.
            </summary>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceStartValue">
            <summary>
            Force the tween to set its value based on the start of the tween curve.
            Use ForceStartValue(bool) to allow the tween's position to be set in addition to setting the tween value.
            </summary>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceEndValue">
            <summary>
            Force the tween to set its value based on the end of the tween curve.
            Use ForceEndValue(bool) to allow the tween's position to be set in addition to setting the tween value.
            </summary>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceMaxValue">
            <summary>
            Force the tween to set its value based on the highest keyframe of the tween curve.
            Use ForceMaxValue(bool) to allow the tween's position to be set in addition to setting the tween value.
            </summary>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceMinValue">
            <summary>
            Force the tween to set its value based on the lowest keyframe of the tween curve.
            Use ForceMinValue(bool) to allow the tween's position to be set in addition to setting the tween value.
            </summary>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceStartValue(System.Boolean)">
            <summary>
            Force the tween to set its value based on the start of the tween curve.
            </summary>
            <param name="updateTweenPosition">If true, will update the tween position value.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceEndValue(System.Boolean)">
            <summary>
            Force the tween to set its value based on the end of the tween curve.
            </summary>
            <param name="updateTweenPosition">If true, will update the tween position value.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceMaxValue(System.Boolean)">
            <summary>
            Force the tween to set its value based on the highest keyframe of the tween curve.
            </summary>
            <param name="updateTweenPosition">If true, will update the tween position value.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceMinValue(System.Boolean)">
            <summary>
            Force the tween to set its value based on the lowest keyframe of the tween curve.
            </summary>
            <param name="updateTweenPosition">If true, will update the tween position value.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its value based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.StartTween(System.Boolean,HFN.Common.TweenPlaybackMode,System.Action)">
            <summary>
            Play the tween.
            </summary>
            <param name="resetTween">If true, will start the tween from the beginning.</param>
            <param name="playback">Playback method to evaluate values along.</param>
            <param name="callback">Callback to invoke when the tween finishes.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.StartTween(System.Boolean,HFN.Common.TweenPlaybackMode,System.Single,System.Action)">
            <summary>
            Play the tween with a given duration.
            </summary>
            <param name="resetTween">If true, will start the tween from the beginning.</param>
            <param name="playback">Playback method to evaluate values along.</param>
            <param name="tweenDuration">The duration of the tween.</param>
            <param name="callback">Callback to invoke when the tween finishes.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.StopTween(System.Boolean)">
            <summary>
            Stop the tween.
            </summary>
            <param name="resetTween">If true, will reset the tween to its initial values.</param>
        </member>
        <member name="M:HFN.Common.CoreTweener.PauseTween">
            <summary>
            Pause the tween.
            </summary>
        </member>
        <member name="M:HFN.Common.CoreTweener.ResetTween(HFN.Common.TweenPlaybackMode)">
            <summary>
            Resets tween values.
            </summary>
        </member>
        <member name="T:HFN.Common.Internal.DrivenTweenTracker">
            <summary>
            Class used to drive inspector values of <see cref="T:HFN.Common.CoreTweener"/> components, similar to Unity's DrivenRectTransformTracker.
            </summary>
        </member>
        <member name="M:HFN.Common.Internal.DrivenTweenTracker.Add(UnityEngine.Object,HFN.Common.CoreTweener,HFN.Common.Internal.DrivenTweenProperties)">
            <summary>
            Add a <see cref="T:HFN.Common.CoreTweener"/> to be driven.
            </summary>
            <param name="driver">The object to drive properties.</param>
            <param name="tween">The tween to be driven.</param>
            <param name="drivenProperties">The properties to be driven.</param>
        </member>
        <member name="M:HFN.Common.Internal.DrivenTweenTracker.Clear">
            <summary>
            Clear the list of <see cref="T:HFN.Common.CoreTweener"/> components being driven.
            </summary>
        </member>
        <member name="T:HFN.Common.Internal.DrivenTweenProperties">
            <summary>
            Enum determining what fields of a <see cref="T:HFN.Common.CoreTweener"/> are driven by another object. 
            </summary>
        </member>
        <member name="F:HFN.Common.Internal.DrivenTweenProperties.None">
            <summary>
            No properties are driven.
            </summary>
        </member>
        <member name="F:HFN.Common.Internal.DrivenTweenProperties.All">
            <summary>
            All properties are driven.
            </summary>
        </member>
        <member name="F:HFN.Common.Internal.DrivenTweenProperties.IgnoreTimeScale">
            <summary>
            The <see cref="F:HFN.Common.CoreTweener.ignoreTimeScale"/> value is driven.
            </summary>
        </member>
        <member name="F:HFN.Common.Internal.DrivenTweenProperties.PlayAtStart">
            <summary>
            The <see cref="F:HFN.Common.CoreTweener.playAtStart"/> value is driven.
            </summary>
        </member>
        <member name="F:HFN.Common.Internal.DrivenTweenProperties.Duration">
            <summary>
            The <see cref="F:HFN.Common.CoreTweener.duration"/> value is driven.
            </summary>
        </member>
        <member name="F:HFN.Common.Internal.DrivenTweenProperties.StartDelay">
            <summary>
            The <see cref="F:HFN.Common.CoreTweener.startDelay"/> value is driven.
            </summary>
        </member>
        <member name="T:HFN.Common.Internal.DropListBase">
            <summary>
            Base class for <see cref="T:HFN.Common.DropList`1"/> values. Should not be derived from. Derive from <see cref="T:HFN.Common.DropList`1"/> instead to make custom drag lists.
            </summary>
        </member>
        <member name="P:HFN.Common.Internal.DropListBase.Count">
            <summary>
            The number of elements contained by the list.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenAnchorType">
            <summary>
            Enum determining which <see cref="T:UnityEngine.RectTransform"/> anchors are affected when tweening anchor values.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenAnchorType.Min">
            <summary>
            The min anchor values for a <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenAnchorType.Max">
            <summary>
            The max anchor values for a <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenPlaybackMode">
            <summary>
            Determines how a tween plays.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPlaybackMode.Default">
            <summary>
            Play the tween from start to end.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPlaybackMode.Reverse">
            <summary>
            Play the tween from end to start.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPlaybackMode.Inverted">
            <summary>
            Play the tween from start to end, with target values flipped.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenPositionMode">
            <summary>
            Determines how tweens dealing with positioning will calculate their values.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPositionMode.RelativeToSelf">
            <summary>
            The tween calculations are relative to the object with the tween component.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPositionMode.RelativeToParent">
            <summary>
            The tween calculations are relative to the object's parent.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPositionMode.Absolute">
            <summary>
            The tween calculations are in world space.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenPositionType">
            <summary>
            Enum determining how tween transform values are calculated.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPositionType.LocalSpace">
            <summary>
            Calculate transform values based on parent transform values.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPositionType.WorldSpace">
            <summary>
            Calculate transform values independent of parent transform values.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenWrapMode">
            <summary>
            Enum for determining how a <see cref="T:HFN.Common.CoreTweener"/> derived script should wrap when tweening.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenWrapMode.Once">
            <summary>
            The tween only plays once.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenWrapMode.Loop">
            <summary>
            The tween will loop back to the start upon reaching the end of the tween.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenWrapMode.PingPong">
            <summary>
            The tween will play then reverse upon reaching the end.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenGroup">
            <summary>
            Class that can group various tweens together and handle playing them in one convenient place.
            </summary>
            \image html Tweening/TweenGroup01.png "TweenGroup inspector with syncDurations enabled."
            \image html Tweening/TweenGroup02.png "Inspector for a tween affected by a TweenGroup."
        </member>
        <member name="F:HFN.Common.TweenGroup.playAtStart">
            <summary>
            If true, will automatically play the tweens at Start().
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.ignoreTimeScale">
            <summary>
            If true, tweens will ignore timescale when tweening.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.syncDurations">
            <summary>
            If true, will force all tweens in this group to use the same duration.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.duration">
            <summary>
            Duration for all tweens in this group. Only applied if syncDurations is true.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.syncStartDelay">
            <summary>
            If true, will force all tweens in this group to use the same start delay.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.startDelay">
            <summary>
            Initial delay before the tweens play.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.tweens">
            <summary>
            The tweens controlled by this group.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.OnTweensStart">
            <summary>
            Fired when the tweens in this group start playing.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGroup.OnTweensFinish">
            <summary>
            Fired when the tweens in this group finish playing.
            </summary>
        </member>
        <member name="P:HFN.Common.TweenGroup.onTweensStart">
            <summary>
            Fired when the tweens in this group start playing.
            </summary>
        </member>
        <member name="P:HFN.Common.TweenGroup.onTweensFinish">
            <summary>
            Fired when the tweens in this group finish playing.
            </summary>
        </member>
        <member name="P:HFN.Common.TweenGroup.IsPlaying">
            <summary>
            Returns true if any tweens in the group are playing.
            </summary>
        </member>
        <member name="P:HFN.Common.TweenGroup.FastTweenPosition">
            <summary>
            Returns the tween position of the first tween in the group. (Useful when all tweens have the same duration)
            </summary>
        </member>
        <member name="P:HFN.Common.TweenGroup.AverageTweenPosition">
            <summary>
            Returns the average tween position of all tweens in the group.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenGroup.StartTweens(System.Boolean,HFN.Common.TweenPlaybackMode,System.Action,System.Action{System.Int32})">
            <summary>
            Start the tweens controlled by this group.
            </summary>
            <param name="resetTweens">If true, will start the tweens from the beginning.</param>
            <param name="playback">Playback method to evaluate values along.</param>
            <param name="callback">Callback to invoke after all tweens have finished playing.</param>
            <param name="individualCallback">Callback to invoke when each tween has finished playing. Returns the index of the tween being played.</param>
        </member>
        <member name="M:HFN.Common.TweenGroup.StartTweens(System.Single,HFN.Common.TweenPlaybackMode,System.Action,System.Action{System.Int32})">
            <summary>
            Start the tweens controlled by the group.
            </summary>
            <param name="tweenPosition">The position to start the tween at.</param>
            <param name="playback">Playback method to evaluate values along.</param>
            <param name="callback">Callback to invoke after all tweens have finished playing.</param>
            <param name="individualCallback">Callback to invoke when each tween has finished playing. Returns the index of the tween being played.</param>
        </member>
        <member name="M:HFN.Common.TweenGroup.PauseTweens">
            <summary>
            Pause the tweens controlled by the group.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenGroup.StopTweens(System.Boolean)">
            <summary>
            Stop the tweens controlled by the group.
            </summary>
            <param name="resetTweens">Reset the tweens after stopping them.</param>
        </member>
        <member name="M:HFN.Common.TweenGroup.RefreshTweenDrivers">
            <summary>
            [Editor Only] Refresh the properties being driven on this group's tweens.
            </summary>
        </member>
        <member name="T:HFN.Common.MaterialTweener">
            <summary>
            Base class for tweeners targeting renderer materials.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenMaterialColor">
            <summary>
            Tweens a renderer's material color.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialColor.targetColor">
            <summary>
            Shader keyword for the target color value.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialColor.startColor">
            <summary>
            The color to start tweening from.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialColor.endColor">
            <summary>
            The color to tween to.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenMaterialColor.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set the specified color value on its target material based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenMaterialOffset">
            <summary>
            Tweens a texture's offset on a renderer's material.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialOffset.targetTexture">
            <summary>
            Shader keyword for the target texture.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialOffset.startValue">
            <summary>
            Start value for the material offset value.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialOffset.endValue">
            <summary>
            End value for the material offset value.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenMaterialOffset.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set the specified texture value's offset on the target material based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenMaterialScale">
            <summary>
            Tweens a texture scale on a renderer's material.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialScale.targetTexture">
            <summary>
            Shader keyword for the target texture.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialScale.startValue">
            <summary>
            Start value for the main texture's scale.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenMaterialScale.endValue">
            <summary>
            End value for the main texture's scale.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenMaterialScale.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set the specified texture's scale value on the target material based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.SpriteTweener">
            <summary>
            Base class for tweeners targeting <see cref="T:UnityEngine.SpriteRenderer"/> components.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenSpriteColor">
            <summary>
            Tweens a <see cref="T:UnityEngine.SpriteRenderer"/>'s color.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenSpriteColor.startColor">
            <summary>
            The color to start tweening from.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenSpriteColor.endColor">
            <summary>
            The color to tween to.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenSpriteColor.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its <see cref="T:UnityEngine.SpriteRenderer"/>'s color based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenTimescale">
            <summary>
            Tweens the current Time.timeScale value.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenTimescale.startScale">
            <summary>
            The timescale when the tween starts playing.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenTimescale.endScale">
            <summary>
            The timescale when the tween finishes playing.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenTimescale.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set <see cref="P:UnityEngine.Time.timeScale"/> based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TransformTweener">
            <summary>
            Base class for tweeners dealing with <see cref="T:UnityEngine.Transform"/> parameters.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenPosition">
            <summary>
            Tweens a Transform's position.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenPosition.positionType">
            <summary>
            Determines if position is calculated via local space or world space.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenPosition.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its <see cref="T:UnityEngine.Transform"/> position based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenRotation">
            <summary>
            Tweens a Transform's rotation value.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenRotation.positionType">
            <summary>
            Determines if rotation is calculated via local space or world space.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenRotation.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its <see cref="T:UnityEngine.Transform"/> rotation based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenScale">
            <summary>
            Tweens a Transform's local scale value.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenScale.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its <see cref="T:UnityEngine.Transform"/> scale based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenCanvasGroupAlpha">
            <summary>
            Tween a <see cref="T:UnityEngine.CanvasGroup"/>'s alpha.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCanvasGroupAlpha.startAlpha">
            <summary>
            Alpha for the group when the tween starts playing.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenCanvasGroupAlpha.endAlpha">
            <summary>
            Alpha for the group when the tween finishes playing.
            </summary>
        </member>
        <member name="P:HFN.Common.TweenCanvasGroupAlpha.Group">
            <summary>
            The <see cref="T:UnityEngine.CanvasGroup"/> affected by the tween.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenCanvasGroupAlpha.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its <see cref="T:UnityEngine.CanvasGroup"/>'s alpha based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.RectTransformTweener">
            <summary>
            Base class for tweeners dealing with <see cref="T:UnityEngine.RectTransform"/> components.
            </summary>
        </member>
        <member name="P:HFN.Common.RectTransformTweener.rectTransform">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> component attached to this tween.
            </summary>
        </member>
        <member name="T:HFN.Common.RectTransformValueTweener">
            <summary>
            Base class for tweens handling <see cref="T:UnityEngine.RectTransform"/> values.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenAnchoredPosition">
            <summary>
            Tweens a <see cref="T:UnityEngine.RectTransform"/>'s anchored position.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenAnchoredPosition.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its target <see cref="T:UnityEngine.RectTransform"/>'s anchoredPosition based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenAnchorOffset">
            <summary>
            Tweens a <see cref="T:UnityEngine.RectTransform"/>'s anchor offset.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenAnchorOffset.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its <see cref="T:UnityEngine.RectTransform"/>'s anchor values based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenPivotOffset">
            <summary>
            Tweens a <see cref="T:UnityEngine.RectTransform"/>'s pivot point.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenPivotOffset.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its <see cref="T:UnityEngine.RectTransform"/>'s pivot value based on the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.TweenSizeDelta">
            <summary>
            Tweens a <see cref="T:UnityEngine.RectTransform"/>'s size delta.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenSizeDelta.ForceTweenPosition(System.Single,HFN.Common.TweenPlaybackMode)">
            <summary>
            Force the tween to set its target <see cref="T:UnityEngine.RectTransform"/>'s sizeDelta at the given tween position.
            </summary>
            <param name="tweenPosition">Normalized position in the tween to force values to.</param>
            <param name="playbackMethod">Playback method to evaluate values along.</param>
        </member>
        <member name="T:HFN.Common.HFN_ColorBlock">
            <summary>
            Custom implementation of Unity's ColorBlock script to remove need for UnityEngine.UI references.
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.normalColor">
            <summary>
            The normal color for this color block.
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.highlightedColor">
            <summary>
            The highlight color for this color block.
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.pressedColor">
            <summary>
            The pressed color for this color block.
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.selectedColor">
            <summary>
            The selected color for this color block.
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.disabledColor">
            <summary>
            The disabled color for this color block.
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.colorMultiplier">
            <summary>
            Multiplier applied to colors (allows brightening greater then base color).
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.fadeDuration">
            <summary>
            How long a color transition between states should take.
            </summary>
        </member>
        <member name="P:HFN.Common.HFN_ColorBlock.defaultColorBlock">
            <summary>
            Simple getter for a code generated default ColorBlock.
            </summary>
        </member>
        <member name="T:HFN.Common.DragConfinementType">
            <summary>
            Determines how <see cref="T:HFN.Common.DraggableBase"/> should be confined.
            </summary>
        </member>
        <member name="F:HFN.Common.DragConfinementType.None">
            <summary>
            No confinement.
            </summary>
        </member>
        <member name="F:HFN.Common.DragConfinementType.ConfineToParent">
            <summary>
            The draggable is smaller than the parent <see cref="T:UnityEngine.RectTransform"/> and should be confined to its visual bounds.
            ie The left side cannot be dragged left past the parent's left bound, the top cannot be dragged up past the parent's top bound, etc.
            </summary>
        </member>
        <member name="F:HFN.Common.DragConfinementType.ConfineToRegion">
            <summary>
            The draggable is larger than the parent <see cref="T:UnityEngine.RectTransform"/> and should not be allowed to drag itself completely outside its parent bounds.
            ie The left side cannot be dragged right past the parent's left bound, the top cannot be dragged down past the parent's top bound, etc.
            </summary>
        </member>
        <member name="T:HFN.Common.DraggableBase">
            <summary>
            Base class for components using UI drag functionality.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.canDrag">
            <summary>
            If true, the draggable can be dragged around.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.snapToPointer">
            <summary>
            If true, the draggable will snap to the pointer's position in <see cref="!:OnBeginDrag(PointerEventData)"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.confinement">
            <summary>
            Determines if the draggeble can be dragged past the parent RectTransform's bounds.
            None: No confinement.
            Confine To Parent: The draggable is smaller than the parent and cannot be dragged beyond the parent's bounds.
            Confine To Region: The draggable is larger than the parent and will always have part of itself be visible inside the parent RectTransform.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.useInertia">
            <summary>
            If true, the draggable can be'flung' and will gradually slow down.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.decelerationRate">
            <summary>
            Rate that the draggable velocity will decelerate.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.stopDistance">
            <summary>
            Distance from the parent's bounds that inertia will snap to 0. Only used if <see cref="F:HFN.Common.DraggableBase.confinement"/> has been set.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.useUnscaledTime">
            <summary>
            If true, inertia calculations will ignore timescale.
            </summary>
        </member>
        <member name="F:HFN.Common.DraggableBase.group">
            <summary>
            The <see cref="T:UnityEngine.CanvasGroup"/> 
            </summary>
        </member>
        <member name="P:HFN.Common.DraggableBase.Group">
            <summary>
            The <see cref="T:UnityEngine.CanvasGroup"/> associated with this draggable object.
            </summary>
        </member>
        <member name="P:HFN.Common.DraggableBase.CanvasTransform">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> for the draggable's root <see cref="T:UnityEngine.Canvas"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.DraggableBase.ParentTransform">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> the draggable is parented to.
            </summary>
        </member>
        <member name="P:HFN.Common.DraggableBase.DragParent">
            <summary>
            [Optional] <see cref="T:UnityEngine.RectTransform"/> to parent the draggable to while it is dragging. Usefull when you need the dragged object to draw over other UI elements.
            </summary>
        </member>
        <member name="P:HFN.Common.DraggableBase.IsOverlay">
            <summary>
            Returns true if the root canvas is set to render in ScreenSpaceOverlay mode.
            </summary>
        </member>
        <member name="M:HFN.Common.DraggableBase.RefreshParentReferences">
            <summary>
            Refreshes references to various components on this draggable's root <see cref="T:UnityEngine.Canvas"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.DraggableBase.SnapToPointerPosition(UnityEngine.Vector2)">
            <summary>
            Positions the draggable object at the pointer's position.
            </summary>
            <param name="eventPosition">The position of the pointer.</param>
        </member>
        <member name="M:HFN.Common.DraggableBase.Confine(HFN.Common.DragConfinementType)">
            <summary>
            Clamps the draggable's anchored position so it is contained within the parent.
            ie If the position is too far right, it will be clamped to the right side of the parent rect.
            </summary>
            <param name="type">The confinement method to evaluate the draggable with.</param>
        </member>
        <member name="M:HFN.Common.DraggableBase.Confine(UnityEngine.Vector2,HFN.Common.DragConfinementType)">
            <summary>
            Adjusts a <see cref="T:UnityEngine.Vector2"/> delta value so it will not cause the draggable to move beyond its parent's bounds.
            </summary>
            <param name="delta">The delta to adjust.</param>
            <param name="type">The confinement method to evaluate the draggable with.</param>
        </member>
        <member name="M:HFN.Common.DraggableBase.ConfinePosition(UnityEngine.Vector2,HFN.Common.DragConfinementType)">
            <summary>
            Clamps a position value to remain within the parent <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
            <param name="pos">The anchored position value to clamp.</param>
            <param name="type">The confinement method to evaluate the draggable with.</param>
        </member>
        <member name="M:HFN.Common.DraggableBase.AdjustDelta(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Adjusts and returns the delta value passed a pointer's movements so that UI scaling doesn't cause tracking issues.
            </summary>
            <param name="delta">The delta value representing the pointer's movements.</param>
            <param name="adjustForScaling">If true, the delta will be adjusted for Canvas scaling.</param>
        </member>
        <member name="M:HFN.Common.DraggableBase.AdjustDelta(UnityEngine.Vector2,System.Boolean,UnityEngine.Vector2,System.Single)">
            <summary>
            Adjusts and returns the delta value passed from a pointer's movements so that UI scaling doesn't cause tracking issues.
            </summary>
            <param name="delta">The delta value representing the pointer's movements.</param>
            <param name="adjustForScaling">If true, the delta will be adjusted for Canvas scaling.</param>
            <param name="referenceResolution">Resolution being used by the parent canvas.</param>
            <param name="widthHeightRatio">The normalized ratio of the canvas' width to its height.</param>
        </member>
        <member name="T:HFN.Common.AspectRatioType">
            <summary>
            Enum representing common aspect ratios.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType.Custom">
            <summary>
            A custom aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._5x4">
            <summary>
            5:4 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._4x3">
            <summary>
            4:3 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._3x2">
            <summary>
            3:2 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._16x10">
            <summary>
            16:10 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._16x9">
            <summary>
            16:9 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._4x5">
            <summary>
            4:5 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._3x4">
            <summary>
            3:4 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._2x3">
            <summary>
            2:3 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._10x16">
            <summary>
            10:16 aspect ratio
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioType._9x16">
            <summary>
            9:16 aspect ratio
            </summary>
        </member>
        <member name="T:HFN.Common.EventTriggerTypeFlags">
            <summary>
            Version of <see cref="!:UnityEngine.EventSystems.EventTriggerType"/> that supports flags.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.PointerEnter">
            <summary>
            Intercepts a IPointerEnterHandler.OnPointerEnter.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.PointerExit">
            <summary>
            Intercepts a IPointerExitHandler.OnPointerExit.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.PointerDown">
            <summary>
            Intercepts a IPointerDownHandler.OnPointerDown.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.PointerUp">
            <summary>
            Intercepts a IPointerUpHandler.OnPointerUp.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.PointerClick">
            <summary>
            Intercepts a IPointerClickHandler.OnPointerClick.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Drag">
            <summary>
            Intercepts a IDragHandler.OnDrag.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Drop">
            <summary>
            Intercepts a IDropHandler.OnDrop.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Scroll">
            <summary>
            Intercepts a IScrollHandler.OnScroll.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.UpdateSelected">
            <summary>
            Intercepts a IUpdateSelectedHandler.OnUpdateSelected.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Select">
            <summary>
            Intercepts a ISelectHandler.OnSelect.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Deselect">
            <summary>
            Intercepts a IDeselectHandler.OnDeselect.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Move">
            <summary>
            Intercepts a IMoveHandler.OnMove.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.InitializePotentialDrag">
            <summary>
            Intercepts IInitializePotentialDrag.InitializePotentialDrag.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.BeginDrag">
            <summary>
            Intercepts IBeginDragHandler.OnBeginDrag.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.EndDrag">
            <summary>
            Intercepts IEndDragHandler.OnEndDrag.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Submit">
            <summary>
            Intercepts ISubmitHandler.Submit.
            </summary>
        </member>
        <member name="F:HFN.Common.EventTriggerTypeFlags.Cancel">
            <summary>
            Intercepts ICancelHandler.OnCancel.
            </summary>
        </member>
        <member name="T:HFN.Common.AspectRatioLayoutElement">
            <summary>
            Layout element controlling <see cref="T:UnityEngine.RectTransform"/> values based on aspect ratios.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutElement.layoutData">
            <summary>
            Layout data for various aspect ratios.
            This is an array since the data shouldn't change at runtime and arrays are faster to iterate through.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutElement.ComponentReference">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> object that implements <see cref="T:HFN.Common.IAspectRatioLayoutElement"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutElement.DrivenComponent">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> object being driven by the <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> component.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutElement.AspectRatio">
            <summary>
            The current aspect ratio used by the element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.GetSupportedAspectRatios">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.GetSupportedAspectRatioTypes">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.SupportsAspectRatio(System.Single,System.Single)">
            <summary>
            Returns true if the given width and height aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.SupportsAspectRatio(System.Single)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.SupportsAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.AddAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Adds values for the specified aspect ratio. Returns true if the aspect ratio was successfully added.
            If the target aspect ratio already exists, nothing will be added.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.UpdateAspectRatio(HFN.Common.AspectRatioType,UnityEngine.Vector2)">
            <summary>
            Updates values for the specified aspect ratio. Returns true if the aspect ratio was successfully updated.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
            <param name="aspectRatio">The actual aspect ratio (ie 16:9).</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.UpdateLayout(System.Single,System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Update the layout element to use the appropriate values for the screen's aspect ratio. Returns true if the target aspect ratio is supported or false if it is not.
            </summary>
            <param name="width">The width of the screen.</param>
            <param name="height">The height of the screen.</param>
            <param name="fallbackData">Fallback data for aspect ratios, in case the given aspect ratio is not supported.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.UpdateLayout(System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Update the layout element to use the appropriate values for the screen's aspect ratio. Returns true if the target aspect ratio is supported or false if it is not.
            </summary>
            <param name="aspectRatio">The aspect ratio for the screen, calculated by (width / height).</param>
            <param name="fallbackData">Fallback data for aspect ratios, in case the given aspect ratio is not supported.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutElement.RefreshLayout(HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Refresh the layout element to use the current aspect ratio's values.
            </summary>
            <param name="fallbackData">Fallback data for aspect ratios, in case the current aspect ratio is not supported.</param>
        </member>
        <member name="T:HFN.Common.AspectRatioLayoutManager">
            <summary>
            Class managing <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> components.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutManager.handleEvents">
            <summary>
            If true, the manager should listen for events to automatically update when the aspect ratio changes.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutManager.aspectManagerType">
            <summary>
            How the <see cref="T:HFN.Common.AspectRatioManager"/> firing aspect ratio changed events is referenced.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutManager.aspectManager">
            <summary>
            The <see cref="T:HFN.Common.AspectRatioManager"/> being listened to for aspect ratio changes.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutManager.fallbackData">
            <summary>
            Fallback data for aspect ratios.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutManager.layoutElements">
            <summary>
            <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> components that should be controlled by this manager.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutManager.ComponentReference">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> object that implements <see cref="T:HFN.Common.IAspectRatioLayoutElement"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutManager.DrivenComponent">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> object being driven by the <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> component.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutManager.AspectRatio">
            <summary>
            The current aspect ratio used by the element.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutManager.HandleEvents">
            <summary>
            If true, the manager should attempt to subscribe to <see cref="E:HFN.Common.AspectRatioManager.AspectRatioChanged"/> to automatically update when the aspect ratio changes.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutManager.AspectManager">
            <summary>
            The <see cref="T:HFN.Common.AspectRatioManager"/> being listened to for aspect ratio changes.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutManager.FallbackData">
            <summary>
            Fallback data for aspect ratios.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLayoutManager.LayoutElements">
            <summary>
            <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> components controlled by this object.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.GetSupportedAspectRatios">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.GetSupportedAspectRatioTypes">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.SupportsAspectRatio(System.Single,System.Single)">
            <summary>
            Returns true if the given width and height aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.SupportsAspectRatio(System.Single)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.SupportsAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.AddAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Adds values for the specified aspect ratio. Returns true if the aspect ratio was successfully added.
            If the target aspect ratio already exists, nothing will be added.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.UpdateAspectRatio(HFN.Common.AspectRatioType,UnityEngine.Vector2)">
            <summary>
            Updates values for the specified aspect ratio. Returns true if the aspect ratio was successfully updated.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
            <param name="aspectRatio">The actual aspect ratio (ie 16:9).</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.UpdateLayout(System.Single,System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Refresh layout elements based on the given width and height.
            </summary>
            <param name="width">Width of the target aspect ratio.</param>
            <param name="height">Height of the target aspect ratio.</param>
            <param name="fallbackData">Fallback data for aspect ratios.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.UpdateLayout(System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Refresh layout elements based on the given aspect ratio.
            </summary>
            <param name="aspectRatio">Aspect ratio to update layout components for.</param>
            <param name="fallbackData">Fallback data for aspect ratios.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.RefreshLayout(HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Refresh layout elements based on the current aspect ratio.
            </summary>
            <param name="fallbackData">Fallback data for aspect ratios.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutManager.RefreshLayoutReferences">
            <summary>
            Grabs references for <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> components below this object.
            </summary>
        </member>
        <member name="T:HFN.Common.AspectRatioManager">
            <summary>
            Centralized class for firing events when the screen aspect ratio is refreshed.
            </summary>
        </member>
        <member name="E:HFN.Common.AspectRatioManager.AspectRatioChanged">
            <summary>
            Event fired when the current aspect ratio is changed.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioManager.CurrentAspectRatio">
            <summary>
            The aspect ratio currently in use.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioManager.RefreshAspectRatio">
            <summary>
            Refresh the current aspect ratio based on the screen's width and height.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioManager.RefreshAspectRatio(System.Single,System.Single)">
            <summary>
            Refresh the current aspect ratio based on the given width and height.
            </summary>
            <param name="width">Width of the screen resolution.</param>
            <param name="height">Height of the screen resolution.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioManager.RefreshAspectRatio(System.Single)">
            <summary>
            Refresh the current aspect ratio based on the given aspect ratio.
            </summary>
            <param name="aspectRatio">Aspect ratio to update to (calculated by width / height).</param>
        </member>
        <member name="T:HFN.Common.AspectRatioLayoutInfo">
            <summary>
            Info for <see cref="T:UnityEngine.RectTransform"/> values.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutInfo.targetAspectRatio">
            <summary>
            The target aspect ratio for this layout info.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLayoutInfo.aspectRatio">
            <summary>
            The actual width and height values for the aspect ratio.
            </summary>
        </member>
        <member name="T:HFN.Common.BaseLayoutInfo">
            <summary>
            <see cref="T:UnityEngine.RectTransform"/> values for use in various layout operations.
            </summary>
        </member>
        <member name="M:HFN.Common.BaseLayoutInfo.UpdateLayoutInfo(UnityEngine.RectTransform)">
            <summary>
            Update info values based on the given <see cref="T:UnityEngine.RectTransform"/>'s values.
            </summary>
            <param name="target">The <see cref="T:UnityEngine.RectTransform"/> to pull values from.</param>
        </member>
        <member name="M:HFN.Common.BaseLayoutInfo.UpdateRectTransform(UnityEngine.RectTransform)">
            <summary>
            Apply these values to the given <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
            <param name="target">The <see cref="T:UnityEngine.RectTransform"/> to adjust values on.</param>
        </member>
        <member name="T:HFN.Common.RectTransformLayoutInfo">
            <summary>
            Version of <see cref="T:HFN.Common.BaseLayoutInfo"/> that contains a reference to the target <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
        </member>
        <member name="F:HFN.Common.RectTransformLayoutInfo.target">
            <summary>
            The RectTransform to affect for layout operations.
            </summary>
        </member>
        <member name="M:HFN.Common.RectTransformLayoutInfo.UpdateLayoutInfo">
            <summary>
            Update info values based on the target <see cref="T:UnityEngine.RectTransform"/>'s values.
            </summary>
        </member>
        <member name="M:HFN.Common.RectTransformLayoutInfo.UpdateRectTransform">
            <summary>
            Apply layout values to the target <see cref="T:UnityEngine.RectTransform"/>.
            </summary>
        </member>
        <member name="T:HFN.Common.AspectRatioManagerType">
            <summary>
            Determines how <see cref="T:HFN.Common.IAspectRatioManager"/> components should reference an <see cref="T:HFN.Common.AspectRatioManager"/> component to listen for aspect ratio changes.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioManagerType.Client">
            <summary>
            Reference the <see cref="T:HFN.Common.AspectRatioManager"/> below the <see cref="T:HFN.Common.Client"/> object.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioManagerType.Reference">
            <summary>
            Reference a <see cref="T:HFN.Common.AspectRatioManager"/> component directly.
            </summary>
        </member>
        <member name="T:HFN.Common.IAspectRatioIsolator">
            <summary>
            Interface to derive from when an object's values should not be considerered by the parent <see cref="T:HFN.Common.IAspectRatioManager"/>.
            </summary>
        </member>
        <member name="T:HFN.Common.IAspectRatioLayoutElement">
            <summary>
            Base interface for objects that should react to device aspect ratios.
            </summary>
        </member>
        <member name="P:HFN.Common.IAspectRatioLayoutElement.ComponentReference">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> object that implements <see cref="T:HFN.Common.IAspectRatioLayoutElement"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.IAspectRatioLayoutElement.DrivenComponent">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> being driven by the <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> component.
            </summary>
        </member>
        <member name="P:HFN.Common.IAspectRatioLayoutElement.AspectRatio">
            <summary>
            The current aspect ratio used by the element.
            </summary>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.GetSupportedAspectRatios">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.GetSupportedAspectRatioTypes">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.SupportsAspectRatio(System.Single,System.Single)">
            <summary>
            Returns true if the given width and height aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.SupportsAspectRatio(System.Single)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.SupportsAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.AddAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Adds values for the specified aspect ratio. Returns true if the aspect ratio was successfully added.
            If the target aspect ratio already exists, nothing will be added.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.UpdateAspectRatio(HFN.Common.AspectRatioType,UnityEngine.Vector2)">
            <summary>
            Updates values for the specified aspect ratio. Returns true if the aspect ratio was successfully updated.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
            <param name="aspectRatio">The actual aspect ratio (ie 16:9).</param>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.UpdateLayout(System.Single,System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Update the layout element to use the appropriate values for the screen's aspect ratio. Returns true if the target aspect ratio is supported or false if it is not.
            </summary>
            <param name="width">The width of the screen.</param>
            <param name="height">The height of the screen.</param>
            <param name="fallbackData">Fallback data for aspect ratios, in case the given aspect ratio is not supported.</param>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.UpdateLayout(System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Update the layout element to use the appropriate values for the screen's aspect ratio. Returns true if the target aspect ratio is supported or false if it is not.
            </summary>
            <param name="aspectRatio">The aspect ratio for the screen, calculated by (width / height).</param>
            <param name="fallbackData">Fallback data for aspect ratios, in case the given aspect ratio is not supported.</param>
        </member>
        <member name="M:HFN.Common.IAspectRatioLayoutElement.RefreshLayout(HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Refresh the layout element to use the current aspect ratio's values.
            </summary>
            <param name="fallbackData">Fallback data for aspect ratios, in case the current aspect ratio is not supported.</param>
        </member>
        <member name="T:HFN.Common.IAspectRatioManager">
            <summary>
            Interface for classes that control values based on the current screen aspect ratio.
            </summary>
        </member>
        <member name="P:HFN.Common.IAspectRatioManager.HandleEvents">
            <summary>
            If true, the manager should attempt to subscribe to <see cref="E:HFN.Common.AspectRatioManager.AspectRatioChanged"/> to automatically update when the aspect ratio changes.
            </summary>
        </member>
        <member name="P:HFN.Common.IAspectRatioManager.AspectManager">
            <summary>
            The <see cref="T:HFN.Common.AspectRatioManager"/> being listened to for aspect ratio changes.
            </summary>
        </member>
        <member name="P:HFN.Common.IAspectRatioManager.FallbackData">
            <summary>
            Fallback data for aspect ratios.
            </summary>
        </member>
        <member name="P:HFN.Common.IAspectRatioManager.LayoutElements">
            <summary>
            <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> components controlled by this object.
            </summary>
        </member>
        <member name="M:HFN.Common.IAspectRatioManager.RefreshLayoutReferences">
            <summary>
            Grabs references for <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> components below this object.
            </summary>
        </member>
        <member name="T:HFN.Common.AspectRatioLabel">
            <summary>
            Base class for labels changing their text based on aspect ratio values.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioLabel.strings">
            <summary>
            Strings displayed for various aspect ratios.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLabel.Text">
            <summary>
            The text shown on the label.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLabel.DrivenComponent">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> being driven by the <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> component.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLabel.ComponentReference">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> object that implements <see cref="T:HFN.Common.IAspectRatioLayoutElement"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.AspectRatioLabel.AspectRatio">
            <summary>
            The current aspect ratio used by the element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.GetSupportedAspectRatios">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.GetSupportedAspectRatioTypes">
            <summary>
            Returns an array of aspect ratios supported by this element. Mostly used for editor purposes.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.SupportsAspectRatio(System.Single,System.Single)">
            <summary>
            Returns true if the given width and height aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.SupportsAspectRatio(System.Single)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.SupportsAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Returns true if the given aspect ratio is supported by this element.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.AddAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Adds values for the specified aspect ratio. Returns true if the aspect ratio was successfully added.
            If the target aspect ratio already exists, nothing will be added.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.UpdateAspectRatio(HFN.Common.AspectRatioType,UnityEngine.Vector2)">
            <summary>
            Updates values for the specified aspect ratio. Returns true if the aspect ratio was successfully updated.
            </summary>
            <param name="targetAspectRatio">The type for the aspect ratio.</param>
            <param name="aspectRatio">The actual aspect ratio (ie 16:9).</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.UpdateLayout(System.Single,System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Update the layout element to use the appropriate values for the screen's aspect ratio. Returns true if the target aspect ratio is supported or false if it is not.
            </summary>
            <param name="width">The width of the screen.</param>
            <param name="height">The height of the screen.</param>
            <param name="fallbackData">Fallback data for aspect ratios, in case the given aspect ratio is not supported.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.UpdateLayout(System.Single,HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Update the layout element to use the appropriate values for the screen's aspect ratio. Returns true if the target aspect ratio is supported or false if it is not.
            </summary>
            <param name="aspectRatio">The aspect ratio for the screen, calculated by (width / height).</param>
            <param name="fallbackData">Fallback data for aspect ratios, in case the given aspect ratio is not supported.</param>
        </member>
        <member name="M:HFN.Common.AspectRatioLabel.RefreshLayout(HFN.Common.AspectRatioFallbackCollection)">
            <summary>
            Refresh the layout element to use the current aspect ratio's values.
            </summary>
            <param name="fallbackData">Fallback data for aspect ratios, in case the current aspect ratio is not supported.</param>
        </member>
        <member name="T:HFN.Common.AspectRatioString">
            <summary>
            Contains data for text shown on labels at a specific aspect ratio.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioString.targetAspectRatio">
            <summary>
            The target aspect ratio for this layout info.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioString.aspectRatio">
            <summary>
            The actual numerical values for the aspect ratio.
            </summary>
        </member>
        <member name="F:HFN.Common.AspectRatioString.text">
            <summary>
            The text to show on a label.
            </summary>
        </member>
        <member name="T:HFN.Common.AspectRatioStringCollection">
            <summary>
            Contains data for text shown on labels at specific aspect ratios.
            </summary>
        </member>
        <member name="T:HFN.Common.AspectRatioLayoutUtility">
            <summary>
            Utility class for <see cref="T:HFN.Common.IAspectRatioLayoutElement"/> classes and aspect ratio related functionality.
            </summary>
        </member>
        <member name="M:HFN.Common.AspectRatioLayoutUtility.GetAspectRatio(HFN.Common.AspectRatioType)">
            <summary>
            Returns a <see cref="T:UnityEngine.Vector2"/> representing width and height values for various common aspect ratios.
            </summary>
            <param name="aspectRatio">The aspect ratio to get width and height values for.</param>
        </member>
        <member name="T:HFN.Common.OrientationComponent">
            <summary>
            Base class for objects that need to react to mobile orientation changes.
            </summary>
        </member>
        <member name="P:HFN.Common.OrientationComponent.CurrentOrientation">
            <summary>
            The current <see cref="T:UnityEngine.ScreenOrientation"/> of the component.
            </summary>
        </member>
        <member name="T:HFN.Common.IOrientable">
            <summary>
            Base interface for objects that should react to device screen orientation.
            </summary>
        </member>
        <member name="M:HFN.Common.IOrientable.Orient(UnityEngine.ScreenOrientation)">
            <summary>
            Sets the current orientation and performs any resulting actions.
            </summary>
            <param name="orientation">The <see cref="T:UnityEngine.ScreenOrientation"/> to set as the current orientation.</param>
        </member>
        <member name="P:HFN.Common.IOrientable.CurrentOrientation">
            <summary>
            The current orientation of the device's screen.
            </summary>
        </member>
        <member name="P:HFN.Common.IOrientable.ComponentReference">
            <summary>
            Reference to the <see cref="T:UnityEngine.Component"/> or other object that implements <see cref="T:HFN.Common.IOrientable"/>.
            </summary>
        </member>
        <member name="T:HFN.Common.IOrientableIsolator">
            <summary>
            Interface to derive from when an object's child RectTransforms should not be considered by the parent <see cref="T:HFN.Common.OrientationManager"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.IOrientableIsolator.ManageSelf">
            <summary>
            Should this object's RectTransform be managed by the object?
            </summary>
        </member>
        <member name="T:HFN.Common.IOrientableManager">
            <summary>
            Interface containing functions that manage updating child <see cref="T:HFN.Common.IOrientable"/> components.
            </summary>
        </member>
        <member name="M:HFN.Common.IOrientableManager.RefreshInfo(System.Boolean)">
            <summary>
            Grabs information for <see cref="T:HFN.Common.IOrientable"/> and <see cref="!:RectTransform"/> components below this object.
            </summary>
            <param name="landscape">Is the current screen orientation a landscape orientation?</param>
        </member>
        <member name="M:HFN.Common.IOrientableManager.RefreshInfo(System.Boolean,System.Collections.Generic.List{HFN.Common.OrientationInfo})">
            <summary>
            Grabs information for <see cref="T:HFN.Common.IOrientable"/> and <see cref="!:RectTransform"/> components below this object.
            </summary>
            <param name="landscape">Is the current screen orientation a landscape orientation?</param>
            <param name="oldInfo">Existing orientation info for child <see cref="!:RectTransform"/> components.</param>
        </member>
        <member name="T:HFN.Common.OrientationInfo">
            <summary>
            Data for <see cref="T:UnityEngine.RectTransform"/> components in landscape and portrait orientations.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.target">
            <summary>
            The <see cref="T:UnityEngine.RectTransform"/> to apply layout values to.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.landscapeAnchorMin">
            <summary>
            The normalized position in the parent rectangle that the lower left corner is anchored to in landscape mode.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.landscapeAnchorMax">
            <summary>
            The normalized position in the parent rectangle that the upper right corner is anchored to in landscape mode.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.landscapePivot">
            <summary>
            The pivot point in landscape mode, specified in normalized values between 0 and 1. The pivot point is the origin of the target rectangle. Rotation and scaling are around this point.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.landscapeSizeDelta">
            <summary>
            The size of the RectTransform in landscape mode, relative to the distances between the anchors.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.landscapePosition">
            <summary>
            The 3D position of the pivot of this RectTransform in landscape mode, relative to the anchor reference point.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.landscapeRotation">
            <summary>
            Local rotation for the RectTransform in landscape mode.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.landscapeScale">
            <summary>
            Local scale for the RectTransform in landscape mode.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.portraitAnchorMin">
            <summary>
            The normalized position in the parent rectangle that the lower left corner is anchored to in portrait mode.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.portraitAnchorMax">
            <summary>
            The normalized position in the parent rectangle that the upper right corner is anchored to in portrait mode.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.portraitPivot">
            <summary>
            The pivot point in portrait mode, specified in normalized values between 0 and 1. The pivot point is the origin of the target rectangle. Rotation and scaling are around this point.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.portraitSizeDelta">
            <summary>
            The size of the RectTransform in portrait mode, relative to the distances between the anchors.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.portraitPosition">
            <summary>
            The 3D position of the pivot of this RectTransform in portrait mode, relative to the anchor reference point.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.portraitRotation">
            <summary>
            Local rotation for the RectTransform in portrait mode.
            </summary>
        </member>
        <member name="F:HFN.Common.OrientationInfo.portraitScale">
            <summary>
            Local scale for the RectTransform in portrait mode.
            </summary>
        </member>
        <member name="T:HFN.Common.OrientationManager">
            <summary>
            Class used to detect mobile screen orientation and fire events when it changes.
            </summary>
        </member>
        <member name="E:HFN.Common.OrientationManager.OrientationChanged">
            <summary>
            Fired when the orientation manager changes orientation.
            Passes the new orientation as a <see cref="T:UnityEngine.ScreenOrientation"/> value.
            </summary>
        </member>
        <member name="P:HFN.Common.OrientationManager.CurrentOrientation">
            <summary>
            The current <see cref="T:UnityEngine.ScreenOrientation"/> value.
            </summary>
        </member>
        <member name="P:HFN.Common.OrientationManager.ComponentReference">
            <summary>
            Reference to this <see cref="T:HFN.Common.IOrientable"/>'s Component.
            </summary>
        </member>
        <member name="P:HFN.Common.OrientationManager.ManageSelf">
            <summary>
            Should the manager handle its own RectTransform? Not needed if the manager's RectTransform will stretch to fill its parent canvas.
            </summary>
        </member>
        <member name="P:HFN.Common.OrientationManager.IsLandscapeOriented">
            <summary>
            Convenience bool to see if the current screen orientation is any of the landscape orientations.
            </summary>
        </member>
        <member name="M:HFN.Common.OrientationManager.AddOrientable(HFN.Common.IOrientable)">
            <summary>
            Adds the given <see cref="T:HFN.Common.IOrientable"/> to this manager's list of orientation components.
            </summary>
            <param name="target">The <see cref="T:HFN.Common.IOrientable"/> to add.</param>
        </member>
        <member name="M:HFN.Common.OrientationManager.RemoveOrientable(HFN.Common.IOrientable)">
            <summary>
            Removes the given <see cref="T:HFN.Common.IOrientable"/> from this manager's list of orientation components.
            </summary>
            <param name="target">The <see cref="T:HFN.Common.IOrientable"/> to remove.</param>
        </member>
        <member name="M:HFN.Common.OrientationManager.SetParentManager(HFN.Common.OrientationManager)">
            <summary>
            Sets this manager's parent <see cref="T:HFN.Common.OrientationManager"/>.
            </summary>
            <param name="manager">The new parent <see cref="T:HFN.Common.OrientationManager"/></param>
        </member>
        <member name="T:HFN.Common.HFN_SetPropertyUtility">
            <summary>
            Class for internal UnityEngine.UI functionality.
            Basically just duplicate code of an existing UnityEngine.UI class because Unity loves locking down things programmers may want to access.
            </summary>
        </member>
        <member name="T:HFN.Common.GameView">
            <summary>
            Base class for menus used by the <see cref="T:HFN.Common.UIManager"/> system.
            </summary>
        </member>
        <member name="F:HFN.Common.GameView.id">
            <summary>
            Unique ID for the view.
            </summary>
        </member>
        <member name="F:HFN.Common.GameView.root">
            <summary>
            Root object for the view that will be enabled and disabled to open and close the menu.
            </summary>
        </member>
        <member name="F:HFN.Common.GameView.drawOrder">
            <summary>
            The draw order for menus. Higher numbers will draw over lower ones.
            </summary>
        </member>
        <member name="F:HFN.Common.GameView.trackOpenState">
            <summary>
            If true, the view will be closed when Open() is called on another view with a true closeOthers value.
            </summary>
        </member>
        <member name="F:HFN.Common.GameView.destroyOnClose">
            <summary>
            If true, the view game object will be destroyed when the view is closed.
            </summary>
        </member>
        <member name="F:HFN.Common.GameView.openViews">
            <summary>
            List of currently open views.
            </summary>
        </member>
        <member name="P:HFN.Common.GameView.Id">
            <summary>
            Unique ID for the view.
            </summary>
        </member>
        <member name="P:HFN.Common.GameView.DrawOrder">
            <summary>
            The draw order for the menu. Higher numbers will draw over lower ones.
            </summary>
        </member>
        <member name="P:HFN.Common.GameView.IsOpen">
            <summary>
            Is the menu currently open and visible?
            </summary>
        </member>
        <member name="P:HFN.Common.GameView.ViewRoot">
            <summary>
            Root object for the view that will be enabled and disabled to open and close the menu.
            </summary>
        </member>
        <member name="M:HFN.Common.GameView.Open(System.Boolean,HFN.Common.GameView)">
            <summary>
            Open the view.
            </summary>
            <param name="closeOthers">If true, will close other open views that have their <see cref="F:HFN.Common.GameView.trackOpenState"/> values set to true.</param>
            <param name="previousView">The view that was previously open before this view.</param>
        </member>
        <member name="M:HFN.Common.GameView.Close(System.Boolean)">
            <summary>
            Close the view.
            </summary>
            <param name="openPrevious">If true, will open the previous view this view had been assigned.</param>
        </member>
        <member name="M:HFN.Common.GameView.Toggle(System.Boolean,HFN.Common.GameView,System.Boolean)">
            <summary>
            Opens the view if it is closed and closes the view if it is open.
            </summary>
            <param name="closeOthers">[Open Parameter] If true, will close other open views that have their <see cref="F:HFN.Common.GameView.trackOpenState"/> values set to true.</param>
            <param name="previousView">[Open Parameter] The view that was previously open before this view.</param>
            <param name="openPrevious">[Close Parameter] If true, will open the previous view this view had been assigned.</param>
        </member>
        <member name="M:HFN.Common.GameView.CloseOpenViews">
            <summary>
            Closes currently open <see cref="T:HFN.Common.GameView"/>s (and removes null values from the list of open views).
            </summary>
        </member>
        <member name="T:HFN.Common.GameViewId">
            <summary>
            Pseudo enum for determining <see cref="T:HFN.Common.GameView"/> IDs.
            </summary>
        </member>
        <member name="P:HFN.Common.GameViewId.None">
            <summary>
            ID representing no particular <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.GameViewId.DefaultItems">
            <summary>
            Default IDs used by <see cref="T:HFN.Common.GameViewId"/> fields.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenGameView">
            <summary>
            Base class for <see cref="T:HFN.Common.GameView"/> prefabs using tweens when opening / closing.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGameView.openTweens">
            <summary>
            Tweens played when <see cref="!:OpenWithTweens(bool, GameView)"/> is called.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGameView.closeTweens">
            <summary>
            Tweens played when <see cref="!:CloseWithTweens(bool)"/> is called.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenGameView.Open(System.Boolean,HFN.Common.GameView)">
            <summary>
            Open the view without playing open tweens. Use <see cref="M:HFN.Common.TweenGameView.OpenWithTweens(System.Boolean,HFN.Common.GameView,System.Boolean,System.Action)"/> top play open tweens after opening the menu.
            </summary>
            <param name="closeOthers">If true, will close other open views that have their <see cref="F:HFN.Common.GameView.trackOpenState"/> values set to true.</param>
            <param name="previousView">The view that was previously open before this view.</param>
        </member>
        <member name="M:HFN.Common.TweenGameView.Close(System.Boolean)">
            <summary>
            Close the view without playing close tweens. Use <see cref="M:HFN.Common.TweenGameView.CloseWithTweens(System.Boolean,System.Boolean,System.Action)"/> to play close tweens first.
            </summary>
            <param name="openPrevious">If true, will open the previous view this view had assigned in <see cref="M:HFN.Common.TweenGameView.Open(System.Boolean,HFN.Common.GameView)"/>.</param>
        </member>
        <member name="M:HFN.Common.TweenGameView.OpenWithTweens(System.Boolean,HFN.Common.GameView,System.Boolean,System.Action)">
            <summary>
            Opens the view and plays open tweens.
            </summary>
            <param name="closeOthers">If true, will close other open views that have their <see cref="F:HFN.Common.GameView.trackOpenState"/> values set to true.</param>
            <param name="previousView">The view that was previously open before this view.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.TweenGameView.CloseWithTweens(System.Boolean,System.Boolean,System.Action)">
            <summary>
            Plays close tweens then closes the menu.
            </summary>
            <param name="openPrevious">If true, will open the previous view this view had assigned in <see cref="M:HFN.Common.TweenGameView.Open(System.Boolean,HFN.Common.GameView)"/>.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all close tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.TweenGameView.OnOpenTweenFinished(System.Int32)">
            <summary>
            Called when one of the tweens played in <see cref="!:OpenWithTweens(bool, GameView)"/> is finished.
            By default, this does nothing.
            </summary>
            <param name="tweenIndex">Index for the finished tween.</param>
        </member>
        <member name="M:HFN.Common.TweenGameView.OnOpenTweensFinished(System.Action)">
            <summary>
            Called when all tweens played in <see cref="!:OpenWithTweens(bool, GameView)"/> are finished.
            By default, this invokes the tweens finished callback.
            </summary>
            <param name="callback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.TweenGameView.OnCloseTweenFinished(System.Int32)">
            <summary>
            Called when one of the tweens played in <see cref="M:HFN.Common.TweenGameView.CloseWithTweens(System.Boolean,System.Boolean,System.Action)"/> is finished.
            By default, this does nothing.
            </summary>
            <param name="tweenIndex">Index for the finished tween.</param>
        </member>
        <member name="M:HFN.Common.TweenGameView.OnCloseTweensFinished(System.Boolean,System.Action)">
            <summary>
            Called when all tweens played in <see cref="M:HFN.Common.TweenGameView.CloseWithTweens(System.Boolean,System.Boolean,System.Action)"/> are finished.
            By default, calls <see cref="M:HFN.Common.TweenGameView.Close(System.Boolean)"/>.
            </summary>
            <param name="openPrevious">If true, will open the previous view this view had assigned in <see cref="M:HFN.Common.TweenGameView.Open(System.Boolean,HFN.Common.GameView)"/>.</param>
            <param name="callback">[Optional] Callback to invoke after all close tweens have finished.</param>
        </member>
        <member name="T:HFN.Common.ViewType">
            <summary>
            Determines how a <see cref="T:HFN.Common.GameView"/> is handled bu <see cref="T:HFN.Common.UIManager"/> when it is created.
            </summary>
        </member>
        <member name="F:HFN.Common.ViewType.Basic">
            <summary>
            The view has no special requirements.
            </summary>
        </member>
        <member name="F:HFN.Common.ViewType.Cursor">
            <summary>
            The view shows a cursor so should draw over basic views.
            </summary>
        </member>
        <member name="F:HFN.Common.ViewType.Overlay">
            <summary>
            The view is an overlay and should draw over all other view types.
            </summary>
        </member>
        <member name="T:HFN.Common.FileExplorerView">
            <summary>
            Base class for navigating the player's computer files.
            </summary>
        </member>
        <member name="P:HFN.Common.FileExplorerView.CurrentPath">
            <summary>
            The path of the directory currently being viewed.
            </summary>
        </member>
        <member name="P:HFN.Common.FileExplorerView.DisplayedPath">
            <summary>
            The path shown in the path label.
            </summary>
        </member>
        <member name="P:HFN.Common.FileExplorerView.RootFolder">
            <summary>
            The root path to append to local paths.
            </summary>
        </member>
        <member name="P:HFN.Common.FileExplorerView.LocalPath">
            <summary>
            The path from the root folder.
            </summary>
        </member>
        <member name="M:HFN.Common.FileExplorerView.Open(System.String[],System.Action{System.String},System.Boolean,System.String)">
            <summary>
            Open the file explorer to its default location specified by <see cref="F:HFN.Common.FileExplorerView.defaultLocation"/>
            </summary>
            <param name="fileExtensions">Extensions for files that will be displayed.</param>
            <param name="callback">Callback invoked when navigation is complete or the menu is closed.</param>
            <param name="closeOthers">Close other views.</param>
            <param name="topFolder">Topmost folder the player can navigate up to. If empty, the player can navigate to the computer root drive.</param>
        </member>
        <member name="M:HFN.Common.FileExplorerView.Open(System.String,System.String[],System.Action{System.String},System.Boolean,System.String)">
            <summary>
            Open the file explorer to its default location specified by <see cref="F:HFN.Common.FileExplorerView.defaultLocation"/>
            </summary>
            <param name="defaultPath">The path to open the file explorer to.</param>
            <param name="fileExtensions">Extensions for files that will be displayed.</param>
            <param name="callback">Callback invoked when navigation is complete or the menu is closed.</param>
            <param name="closeOthers">Close other views.</param>
            <param name="topFolder">Topmost folder the player can navigate up to. If empty, the player can navigate to the computer root drive.</param>
        </member>
        <member name="M:HFN.Common.FileExplorerView.RefreshBackButton(System.Boolean)">
            <summary>
            Set weither the back button is interactable or not.
            </summary>
        </member>
        <member name="M:HFN.Common.FileExplorerView.RefreshSubmitButton(System.Boolean)">
            <summary>
            Set weither the submit button is interactable or not.
            </summary>
        </member>
        <member name="M:HFN.Common.FileExplorerView.IsValidFolderPath(System.String)">
            <summary>
            Optional evaluation method for determining if a folder should be shown in the file grid.
            </summary>
            <param name="folderPath">The path to the folder.</param>
        </member>
        <member name="M:HFN.Common.FileExplorerView.IsValidFilePath(System.String)">
            <summary>
            Optional evaluation method for determining if a file should be shown in the file grid.
            </summary>
            <param name="filePath">The path to the file.</param>
        </member>
        <member name="T:HFN.Common.FileSaveView">
            <summary>
            Base class for navigating the player's computer files and saving a file to a specific path.
            </summary>
        </member>
        <member name="P:HFN.Common.FileSaveView.FileName">
            <summary>
            The name of the file at the given path.
            </summary>
        </member>
        <member name="P:HFN.Common.FileSaveView.SavePath">
            <summary>
            Path to the save file (parent folder path + file name).
            </summary>
        </member>
        <member name="F:HFN.Common.FileExplorerUtility.modelExtentions">
            <summary>
            Common file extensions for model assets such as .fbx and .obj files.
            </summary>
        </member>
        <member name="F:HFN.Common.FileExplorerUtility.textExtentions">
            <summary>
            Common file extensions for text assets such as .txt and .json files.
            </summary>
        </member>
        <member name="F:HFN.Common.FileExplorerUtility.imageExtentions">
            <summary>
            Common file extensions for model assets such as .jpg and .png files.
            </summary>
        </member>
        <member name="F:HFN.Common.FileExplorerUtility.audioExtentions">
            <summary>
            Common file extensions for audio assets such as .mp3 and .ogg files.
            </summary>
        </member>
        <member name="T:HFN.Common.IFileButton">
            <summary>
            Interface for buttons used by <see cref="T:HFN.Common.FileExplorerView"/> and <see cref="T:HFN.Common.FileSaveView"/> to implement.
            </summary>
        </member>
        <member name="P:HFN.Common.IFileButton.Text">
            <summary>
            The text shown on the button.
            </summary>
        </member>
        <member name="P:HFN.Common.IFileButton.IsDriveRoot">
            <summary>
            Is the filepath associated with the button a drive root path? (ie D:, C:, etc)
            </summary>
        </member>
        <member name="P:HFN.Common.IFileButton.FilePath">
            <summary>
            The file path associated with the explorer button.
            </summary>
        </member>
        <member name="P:HFN.Common.IFileButton.FileExplorerButtonComponent">
            <summary>
            The actual component reference for this <see cref="T:HFN.Common.IFileButton"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.IFileButton.SetInfo(System.String,System.Boolean)">
            <summary>
            Set the path info for the button.
            </summary>
            <param name="path">The filepath associated with this button.</param>
            <param name="isDriveRoot">Is the filepath a root path?</param>
        </member>
        <member name="T:HFN.Common.GameModal">
            <summary>
            Base class for modals used by the <see cref="T:HFN.Common.UIManager"/> system.
            Most modal classes should derive from <see cref="T:HFN.Common.StandardGameModal"/> as this class is also the base class for modals with non-standard asset support (like addressable assets).
            </summary>
        </member>
        <member name="F:HFN.Common.GameModal.id">
            <summary>
            Unique ID for the modal.
            </summary>
        </member>
        <member name="F:HFN.Common.GameModal.drawOrder">
            <summary>
            The draw order for the modal. Higher numbers will draw over lower ones.
            </summary>
        </member>
        <member name="F:HFN.Common.GameModal.root">
            <summary>
            Root object for the modal that will be enabled and disabled to open and close the modal.
            </summary>
        </member>
        <member name="F:HFN.Common.GameModal.buttonGrid">
            <summary>
            RectTransform that buttons will be spawned under.
            </summary>
        </member>
        <member name="P:HFN.Common.GameModal.Id">
            <summary>
            Unique ID for the modal.
            </summary>
        </member>
        <member name="P:HFN.Common.GameModal.DrawOrder">
            <summary>
            The draw order for the modal. Higher numbers will draw over lower ones.
            </summary>
        </member>
        <member name="P:HFN.Common.GameModal.IsOpen">
            <summary>
            The the modal currently open?
            </summary>
        </member>
        <member name="P:HFN.Common.GameModal.Root">
            <summary>
            The root <see cref="T:UnityEngine.GameObject"/> that will be enabled or disabled when opening or closing the modal.
            </summary>
        </member>
        <member name="P:HFN.Common.GameModal.TitleText">
            <summary>
            The text shown on the modal's title label (if it exists)
            </summary>
        </member>
        <member name="P:HFN.Common.GameModal.MessageText">
            <summary>
            The text shown on the modal's main label (if it exists)
            </summary>
        </member>
        <member name="M:HFN.Common.GameModal.Open(System.String,System.String)">
            <summary>
            Opens the modal and displays the given title and message.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists).</param>
        </member>
        <member name="M:HFN.Common.GameModal.Open(System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Opens the modal and displays the given options.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists).</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="options">Text to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.GameModal.Open(System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Opens the modal and displays the given options.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists)</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="options">Text and colors to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.GameModal.Close">
            <summary>
            Close the modal.
            </summary>
        </member>
        <member name="M:HFN.Common.GameModal.GenerateButtons">
            <summary>
            Generates the buttons displayed on the modal.
            </summary>
        </member>
        <member name="M:HFN.Common.GameModal.ValidateButtons">
            <summary>
            Optional function to override to enable/disable specific buttons based on modal specific criteria.
            The base function does nothing.
            </summary>
        </member>
        <member name="M:HFN.Common.GameModal.RecycleButtons">
            <summary>
            Cleans up the buttons created by <see cref="M:HFN.Common.GameModal.GenerateButtons"/>.
            </summary>
        </member>
        <member name="M:HFN.Common.GameModal.OnButtonClicked(System.Int32)">
            <summary>
            Function invoked when a modal option has been clicked.
            The base function just invokes <see cref="F:HFN.Common.GameModal.activeCallback"/> if it is not null, sets it to be null, then closes the modal.
            </summary>
            <param name="index">The index of the selected option.</param>
        </member>
        <member name="T:HFN.Common.GameModalId">
            <summary>
            Pseudo enum for determining <see cref="T:HFN.Common.GameView"/> IDs.
            </summary>
        </member>
        <member name="P:HFN.Common.GameModalId.None">
            <summary>
            ID representing no particular <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
        </member>
        <member name="P:HFN.Common.GameModalId.DefaultItems">
            <summary>
            Default IDs used by <see cref="T:HFN.Common.GameModalId"/> fields.
            </summary>
        </member>
        <member name="T:HFN.Common.ModalOption">
            <summary>
            Struct containing data for modal buttons.
            </summary>
        </member>
        <member name="F:HFN.Common.ModalOption.text">
            <summary>
            Text shown for this option.
            </summary>
        </member>
        <member name="F:HFN.Common.ModalOption.colors">
            <summary>
            Colors the option button will use.
            </summary>
        </member>
        <member name="T:HFN.Common.StandardGameModal">
            <summary>
            Base class for <see cref="T:HFN.Common.GameModal"/>s that spawn their buttons using the standard <see cref="T:HFN.Common.PoolManager"/> class.
            </summary>
        </member>
        <member name="F:HFN.Common.StandardGameModal.buttonPrefab">
            <summary>
            Prefab for the buttons spawned in by the modal.
            </summary>
        </member>
        <member name="M:HFN.Common.StandardGameModal.GenerateButtons">
            <summary>
            Generates the buttons displayed on the modal.
            </summary>
        </member>
        <member name="T:HFN.Common.StandardTweenGameModal">
            <summary>
            Base class for <see cref="T:HFN.Common.TweenGameModal"/>s that spawn their buttons using the standard <see cref="T:HFN.Common.PoolManager"/> class.
            </summary>
        </member>
        <member name="M:HFN.Common.StandardTweenGameModal.GenerateButtons">
            <summary>
            Generates the buttons displayed on the modal.
            </summary>
        </member>
        <member name="T:HFN.Common.TweenGameModal">
            <summary>
            Base class for <see cref="T:HFN.Common.GameModal"/> prefabs using tweens when opening / closing.
            </summary>
        </member>
        <member name="F:HFN.Common.TweenGameModal.closeTweens">
            <summary>
            Tweens played when <see cref="!:CloseWithTweens(bool)"/> is called.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenGameModal.Open(System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Opens the modal and displays the given options without playing open tweens.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists).</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="options">Text to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.Open(System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Opens the modal and displays the given options without playing open tweens.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists).</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="options">Text and colors to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.Close">
            <summary>
            Close the modal without playing close tweens.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OpenWithTweens(System.String,System.String,System.Action,System.Boolean)">
            <summary>
            Opens the modal and plays open tweens.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists).</param>
            <param name="callback">[Optional] Callback to invoke after all open tweens have finished.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OpenWithTweens(System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Opens the modal and plays open tweens.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists).</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="options">Text to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OpenWithTweens(System.String,System.String,System.Action{System.Int32},System.Boolean,System.Action,System.String[])">
            <summary>
            Opens the modal and plays open tweens.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists)</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all close tweens have finished.</param>
            <param name="options">Text to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OpenWithTweens(System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Opens the modal and plays open tweens.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists).</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="options">Text and colors to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OpenWithTweens(System.String,System.String,System.Action{System.Int32},System.Boolean,System.Action,HFN.Common.ModalOption[])">
            <summary>
            Opens the modal and plays open tweens.
            </summary>
            <param name="title">The text to show on the modal's title label (if it exists).</param>
            <param name="message">The text to show on the modal's main label (if it exists)</param>
            <param name="callback">Callback to invoke when an option is selected. Passes the index of the selected option.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all close tweens have finished.</param>
            <param name="options">Text and colors to display on the modal's buttons.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.CloseWithTweens(System.Boolean,System.Action)">
            <summary>
            Plays close tweens then closes the modal.
            </summary>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all close tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.DisableButtons">
            <summary>
            Sets buttons to not be interactable. Useful to prevent interactions while close tweens are playing.
            </summary>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OnOpenTweenFinished(System.Int32)">
            <summary>
            Called when one of the tweens played in OpenWithTweens is finished.
            By default, this does nothing.
            </summary>
            <param name="tweenIndex">Index for the finished tween.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OnOpenTweensFinished(System.Action)">
            <summary>
            Called when all tweens played in OpenWithTweens are finished.
            By default, this invokes the tweens finished callback.
            </summary>
            <param name="callback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OnCloseTweenFinished(System.Int32)">
            <summary>
            Called when one of the tweens played in <see cref="M:HFN.Common.TweenGameModal.CloseWithTweens(System.Boolean,System.Action)"/> is finished.
            By default, this does nothing.
            </summary>
            <param name="tweenIndex">Index for the finished tween.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OnCloseTweensFinished(System.Action)">
            <summary>
            Called when all tweens played in <see cref="M:HFN.Common.TweenGameModal.CloseWithTweens(System.Boolean,System.Action)"/> are finished.
            By default, calls <see cref="M:HFN.Common.TweenGameModal.Close"/> after invoking the tweens finished callback.
            </summary>
            <param name="callback">[Optional] Callback to invoke after all close tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.TweenGameModal.OnButtonClicked(System.Int32)">
            <summary>
            Function invoked when a modal option has been clicked.
            The base function just invokes <see cref="!:activeCallback"/> if it is not null, sets it to be null, then closes the modal with tweens.
            </summary>
            <param name="index">The index of the selected option.</param>
        </member>
        <member name="T:HFN.Common.IModalButton">
            <summary>
            Interface for buttons used in <see cref="T:HFN.Common.GameModal"/> classes.
            </summary>
        </member>
        <member name="P:HFN.Common.IModalButton.Text">
            <summary>
            The text shown on this button.
            </summary>
        </member>
        <member name="P:HFN.Common.IModalButton.interactable">
            <summary>
            Is the button interactable?
            </summary>
        </member>
        <member name="T:HFN.Common.UIManager">
            <summary>
            Class to handle retrieving and opening / closing menus and modals.
            </summary>
        </member>
        <member name="F:HFN.Common.UIManager.viewPrefabs">
            <summary>
            List of prefabs to spawn in when requesting specific menus.
            </summary>
        </member>
        <member name="F:HFN.Common.UIManager.modalPrefabs">
            <summary>
            List of prefabs to spawn in when requesting specific modals.
            </summary>
        </member>
        <member name="F:HFN.Common.UIManager.views">
            <summary>
            List of spawned views.
            </summary>
        </member>
        <member name="F:HFN.Common.UIManager.modals">
            <summary>
            List of spawned modals.
            </summary>
        </member>
        <member name="M:HFN.Common.UIManager.ResetSingleton">
            <summary>
            Delete all menus that are currently in the UI.
            </summary>
        </member>
        <member name="P:HFN.Common.UIManager.Exists">
            <summary>
            Is there an instance of <see cref="T:HFN.Common.UIManager"/> in the scene?
            </summary>
        </member>
        <member name="P:HFN.Common.UIManager.CanvasRoot">
            <summary>
            The root canvas object of the UI.
            </summary>
        </member>
        <member name="P:HFN.Common.UIManager.ViewContainer">
            <summary>
            The parent <see cref="T:UnityEngine.RectTransform"/> for all <see cref="T:HFN.Common.GameView"/> game objects.
            </summary>
        </member>
        <member name="P:HFN.Common.UIManager.ModalContainer">
            <summary>
            The parent <see cref="T:UnityEngine.RectTransform"/> for all <see cref="T:HFN.Common.GameModal"/> game objects.
            Will always render above game views.
            </summary>
        </member>
        <member name="P:HFN.Common.UIManager.DebugContainer">
            <summary>
            The parent <see cref="T:UnityEngine.RectTransform"/> for all debug game objects.
            Will always render above game views and modals.
            </summary>
        </member>
        <member name="M:HFN.Common.UIManager.GetView(HFN.Common.GameViewId,System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to retrieve.</param>
            <param name="create">Create the menu if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.GetView``1(System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameView"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to retrieve.</typeparam>
            <param name="create">Create the menu if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenView(HFN.Common.GameViewId,System.Boolean,HFN.Common.GameView)">
            <summary>
            Open and return the first <see cref="T:HFN.Common.GameView"/> that has the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to open.</param>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenView``1(HFN.Common.GameViewId,System.Boolean,HFN.Common.GameView)">
            <summary>
            Open and return the first <see cref="T:HFN.Common.GameView"/> that has the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> for the menu to open.</typeparam>
            <param name="viewId">The ID for the menu to open.</param>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenView``1(System.Boolean,HFN.Common.GameView)">
            <summary>
            Open the <see cref="T:HFN.Common.GameView"/> matching the given type <typeparamref name="T"/>.
            Will attempt to open the menu matching the exact type passed before opening any menus that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to open.</typeparam>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenViewWithTweens(HFN.Common.GameViewId,System.Boolean,HFN.Common.GameView,System.Boolean,System.Action)">
            <summary>
            Open and return the first <see cref="T:HFN.Common.TweenGameView"/> that has the given <see cref="T:HFN.Common.GameViewId"/> and play its open tweens.
            </summary>
            <param name="viewId">The ID for the menu to open.</param>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenViewWithTweens``1(HFN.Common.GameViewId,System.Boolean,HFN.Common.GameView,System.Boolean,System.Action)">
            <summary>
            Open and return the first <see cref="T:HFN.Common.TweenGameView"/> that has the given <see cref="T:HFN.Common.GameViewId"/> and play its open tweens.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> for the menu to open.</typeparam>
            <param name="viewId">The ID for the menu to open.</param>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenViewWithTweens``1(System.Boolean,HFN.Common.GameView,System.Boolean,System.Action)">
            <summary>
            Open the <see cref="T:HFN.Common.TweenGameView"/> matching the given type <typeparamref name="T"/> and play its open tweens.
            Will attempt to open the menu matching the exact type passed before opening any menus that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to open.</typeparam>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseView(HFN.Common.GameViewId,System.Boolean)">
            <summary>
            Close and return the <see cref="T:HFN.Common.GameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to close.</param>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseView``1(HFN.Common.GameViewId,System.Boolean)">
            <summary>
            Close and return the <see cref="T:HFN.Common.GameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> for the menu to close.</typeparam>
            <param name="viewId">The ID for the menu to close.</param>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseView``1(System.Boolean)">
            <summary>
            Close the <see cref="T:HFN.Common.GameView"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to close.</typeparam>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseViewWithTweens(HFN.Common.GameViewId,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Plays the close tweens of a <see cref="T:HFN.Common.TweenGameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to close.</param>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseViewWithTweens``1(HFN.Common.GameViewId,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Plays the close tweens of a <see cref="T:HFN.Common.TweenGameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> for the menu to close.</typeparam>
            <param name="viewId">The ID for the menu to close.</param>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseViewWithTweens``1(System.Boolean,System.Boolean,System.Action)">
            <summary>
            Plays the close tweens of a <see cref="T:HFN.Common.TweenGameView"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to close.</typeparam>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViews">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus.
            </summary>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViewsExcept``1">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus that do not derive from the given type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the menus that will not be closed.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViewsExcept``2">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus that do not derive from the given types.
            </summary>
            <typeparam name="T">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
            <typeparam name="U">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViewsExcept``3">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus that do not derive from the given types.
            </summary>
            <typeparam name="T">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
            <typeparam name="U">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
            <typeparam name="V">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewPrefab(HFN.Common.GameViewId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> prefab with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID to search view prefabs for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewPrefab``1">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> prefab of type T.
            </summary>
            <typeparam name="T">The type of GameView prefab to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewPrefab``1(System.Type)">
            <summary>
            Find a <see cref="T:HFN.Common.GameView"/> prefab that is exactly the given type.
            </summary>
            <typeparam name="T">The type of GameView prefab to search for.</typeparam>
            <param name="type">The exact type of GameView prefab to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingView(HFN.Common.GameViewId)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID to search existing views for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingView``1">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameView"/> of type T.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingView``1(System.Type)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameView"/> of type T that is exactly the given type.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
            <param name="type">The exact type of GameView to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewInChildren(HFN.Common.GameViewId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> below the UI with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID to search child views for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewInChildren``1(System.Type)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> of type T below the UI that is specifically the given type.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
            <param name="type">The exact type of GameView to find. Useful when multiple menus use the same base class.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewInChildren``1">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> of type T below the UI.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.CreateView``1(``0)">
            <summary>
            Instantiates the given prefab and places it under the UI's view container.
            </summary>
            <typeparam name="T">The type for the game view prefab.</typeparam>
            <param name="viewPrefab">The prefab to spawn.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal``1(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to open.</typeparam>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal``1(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to open.</typeparam>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal``1(System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> matching the given type <typeparamref name="T"/>.
            Will attempt to open the modal matching the exact type passed before opening any modals that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the modal to open.</typeparam>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal``1(System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> matching the given type <typeparamref name="T"/>.
            Will attempt to open the modal matching the exact type passed before opening any modals that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the modal to open.</typeparam>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseModal(HFN.Common.GameModalId)">
            <summary>
            Close the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID for the modal to close.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseModal``1(HFN.Common.GameModalId)">
            <summary>
            Close the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to close.</typeparam>
            <param name="id">The ID for the modal to close.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseModal``1">
            <summary>
            Close the <see cref="T:HFN.Common.GameModal"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the modal to close.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllModals">
            <summary>
            Close all currently open modals.
            </summary>
        </member>
        <member name="M:HFN.Common.UIManager.GetModal(HFN.Common.GameModalId,System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID for the modal to open.</param>
            <param name="create">Create the modal if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.GetModal``1(HFN.Common.GameModalId,System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to retrieve.</typeparam>
            <param name="viewId">The ID for the modal to retrieve.</param>
            <param name="create">Create the modal if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.GetModal``1(System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameModal"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the modal to retrieve.</typeparam>
            <param name="create">Create the modal if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalPrefab(HFN.Common.GameModalId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> prefab with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID to search modal prefabs for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalPrefab``1">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> prefab of type T.
            </summary>
            <typeparam name="T">The type of GameModal prefab to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalPrefab``1(System.Type)">
            <summary>
            Find a <see cref="T:HFN.Common.GameModal"/> prefab that is exactly the given type.
            </summary>
            <typeparam name="T">The type of GameModal prefab to search for.</typeparam>
            <param name="type">The exact type of GameModal prefab to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal(HFN.Common.GameModalId)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID to search existing modals for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal``1(HFN.Common.GameModalId)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of GameModal to search for.</typeparam>
            <param name="id">The ID to search existing modals for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal``1">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> of type T.
            </summary>
            <typeparam name="T">The type of <see cref="T:HFN.Common.GameModal"/> to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal``1(System.Type)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> of type T that is exactly the given type.
            </summary>
            <typeparam name="T">The type of <see cref="T:HFN.Common.GameModal"/> to search for.</typeparam>
            <param name="type">The exact type of GameModal to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalInChildren(HFN.Common.GameModalId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> below the UI with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID to search child views for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalInChildren``1(HFN.Common.GameModalId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> below the UI with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:HFN.Common.GameModal"/> to search for.</typeparam>
            <param name="id">The ID to search child views for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenView_Internal(HFN.Common.GameViewId,System.Boolean,HFN.Common.GameView)">
            <summary>
            Open and return the first <see cref="T:HFN.Common.GameView"/> that has the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to open.</param>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenView_Internal``1(System.Boolean,HFN.Common.GameView)">
            <summary>
            Open the <see cref="T:HFN.Common.GameView"/> matching the given type <typeparamref name="T"/>.
            Will attempt to open the menu matching the exact type passed before opening any menus that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to open.</typeparam>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenViewWithTweens_Internal(HFN.Common.GameViewId,System.Boolean,HFN.Common.GameView,System.Boolean,System.Action)">
            <summary>
            Open and return the first <see cref="T:HFN.Common.GameView"/> that has the given <see cref="T:HFN.Common.GameViewId"/> and play its open tweens.
            </summary>
            <param name="viewId">The ID for the menu to open.</param>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenViewWithTweens_Internal``1(System.Boolean,HFN.Common.GameView,System.Boolean,System.Action)">
            <summary>
            Open the <see cref="T:HFN.Common.GameView"/> matching the given type <typeparamref name="T"/> and play its open tweens.
            Will attempt to open the menu matching the exact type passed before opening any menus that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to open.</typeparam>
            <param name="closeOthers">Close any other menus that are open.</param>
            <param name="previousView"><see cref="T:HFN.Common.GameView"/> to set as the last open menu.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all open tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseView_Internal(HFN.Common.GameViewId,System.Boolean)">
            <summary>
            Close and return the <see cref="T:HFN.Common.GameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to close.</param>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseView_Internal``1(System.Boolean,System.Boolean)">
            <summary>
            Close the <see cref="T:HFN.Common.GameView"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to close.</typeparam>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseViewWithTweens_Internal(HFN.Common.GameViewId,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Plays the close tweens of a <see cref="T:HFN.Common.TweenGameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to close.</param>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all close tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseViewWithTweens_Internal``1(System.Boolean,System.Boolean,System.Action)">
            <summary>
            Plays the close tweens of a <see cref="T:HFN.Common.TweenGameView"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to close.</typeparam>
            <param name="openPrevious">If true, will open the previous view the target view had been assigned.</param>
            <param name="restartTweens">If true, will reset the tweens when they start playing.</param>
            <param name="finishedCallback">[Optional] Callback to invoke after all close tweens have finished.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViews_Internal">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus.
            </summary>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViewsExcept_Internal``1">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus that do not derive from the given type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the menus that will not be closed.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViewsExcept_Internal``2">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus that do not derive from the given types.
            </summary>
            <typeparam name="T">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
            <typeparam name="U">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllViewsExcept_Internal``3">
            <summary>
            Close all open <see cref="T:HFN.Common.GameView"/> menus that do not derive from the given types.
            </summary>
            <typeparam name="T">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
            <typeparam name="U">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
            <typeparam name="V">A <see cref="T:System.Type"/> of menus that will not be closed.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.GetView_Internal(HFN.Common.GameViewId,System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID for the menu to retrieve.</param>
            <param name="create">Create the menu if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.GetView_Internal``1(System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameView"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to retrieve.</typeparam>
            <param name="create">Create the menu if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewPrefab_Internal(HFN.Common.GameViewId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> prefab with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID to search view prefabs for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewPrefab_Internal``1">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> prefab of type T.
            </summary>
            <typeparam name="T">The type of GameView prefab to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewPrefab_Internal``1(System.Type)">
            <summary>
            Find a <see cref="T:HFN.Common.GameView"/> prefab that is exactly the given type.
            </summary>
            <typeparam name="T">The type of GameView prefab to search for.</typeparam>
            <param name="type">The exact type of GameView prefab to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingView_Internal(HFN.Common.GameViewId)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameView"/> with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID to search existing views for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingView_Internal``1">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameView"/> of type T.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingView_Internal``1(System.Type)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameView"/> of type T that is exactly the given type.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
            <param name="type">The exact type of GameView to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewInChildren_Internal(HFN.Common.GameViewId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> below the UI with the given <see cref="T:HFN.Common.GameViewId"/>.
            </summary>
            <param name="viewId">The ID to search child views for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindViewInChildren_Internal``1(System.Type)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameView"/> of type T below the UI that is specifically the given type.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
            <param name="type">The exact type of <see cref="T:HFN.Common.GameView"/> to find. Useful when multiple menus use the same base class.</param>
        </member>
        <member name="M:HFN.Common.UIManager.SortViews">
            <summary>
            Sort the spawned views and set their transform order based on draw order.
            </summary>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal_Internal(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal_Internal(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal_Internal``1(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to open.</typeparam>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal_Internal``1(HFN.Common.GameModalId,System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to open.</typeparam>
            <param name="id">The ID for the modal to open.</param>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal_Internal``1(System.String,System.String,System.Action{System.Int32},System.String[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> matching the given type <typeparamref name="T"/>.
            Will attempt to open the modal matching the exact type passed before opening any modals that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the modal to open.</typeparam>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.OpenModal_Internal``1(System.String,System.String,System.Action{System.Int32},HFN.Common.ModalOption[])">
            <summary>
            Open the <see cref="T:HFN.Common.GameModal"/> matching the given type <typeparamref name="T"/>.
            Will attempt to open the modal matching the exact type passed before opening any modals that derive from the target class.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the modal to open.</typeparam>
            <param name="title">Title to show on the modal.</param>
            <param name="message">Messag to display on the modal.</param>
            <param name="callback">Callback returning the selected option's index.</param>
            <param name="options">The options to display on the modal.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseModal_Internal(HFN.Common.GameModalId)">
            <summary>
            Close the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID for the modal to close.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseModal_Internal``1(HFN.Common.GameModalId)">
            <summary>
            Close the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to close.</typeparam>
            <param name="id">The ID for the modal to close.</param>
        </member>
        <member name="M:HFN.Common.UIManager.CloseModal_Internal``1">
            <summary>
            Close the <see cref="T:HFN.Common.GameModal"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the modal to close.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.CloseAllModals_Internal">
            <summary>
            Close all open <see cref="T:HFN.Common.GameModal"/>s.
            </summary>
        </member>
        <member name="M:HFN.Common.UIManager.GetModal_Internal(HFN.Common.GameModalId,System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="viewId">The ID for the modal to retrieve.</param>
            <param name="create">Create the modal if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.GetModal_Internal``1(HFN.Common.GameModalId,System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of the modal to retrieve.</typeparam>
            <param name="viewId">The ID for the modal to retrieve.</param>
            <param name="create">Create the modal if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.GetModal_Internal``1(System.Boolean)">
            <summary>
            Gets a reference to the <see cref="T:HFN.Common.GameView"/> of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exact <see cref="T:System.Type"/> for the menu to retrieve.</typeparam>
            <param name="create">Create the menu if it does not exist.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalPrefab_Internal(HFN.Common.GameModalId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> prefab with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID to search modal prefabs for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalPrefab_Internal``1">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> prefab of type T.
            </summary>
            <typeparam name="T">The type of GameModal prefab to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalPrefab_Internal``1(System.Type)">
            <summary>
            Find a <see cref="T:HFN.Common.GameModal"/> prefab that is exactly the given type.
            </summary>
            <typeparam name="T">The type of GameModal prefab to search for.</typeparam>
            <param name="type">The exact type of GameModal prefab to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal_Internal(HFN.Common.GameModalId)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID to search existing modals for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal_Internal``1(HFN.Common.GameModalId)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <typeparam name="T">The type of GameModal to search for.</typeparam>
            <param name="id">The ID to search existing modals for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal_Internal``1">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> of type T.
            </summary>
            <typeparam name="T">The type of GameModal to search for.</typeparam>
        </member>
        <member name="M:HFN.Common.UIManager.FindExistingModal_Internal``1(System.Type)">
            <summary>
            Finds an existing <see cref="T:HFN.Common.GameModal"/> of type T that is exactly the given type.
            </summary>
            <typeparam name="T">The type of GameModal to search for.</typeparam>
            <param name="type">The exact type of GameModal to find.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalInChildren_Internal(HFN.Common.GameModalId)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> below the UI with the given <see cref="T:HFN.Common.GameModalId"/>.
            </summary>
            <param name="id">The ID to search child views for.</param>
        </member>
        <member name="M:HFN.Common.UIManager.FindModalInChildren_Internal``1(System.Type)">
            <summary>
            Finds a <see cref="T:HFN.Common.GameModal"/> of type T below the UI that is specifically the given type.
            </summary>
            <typeparam name="T">The type of GameView to search for.</typeparam>
            <param name="type">The exact type of <see cref="T:HFN.Common.GameModal"/> to find. Useful when multiple modals use the same base class.</param>
        </member>
        <member name="M:HFN.Common.UIManager.SortModals">
            <summary>
            Sort the spawned modals and set their transform order based on draw order.
            </summary>
        </member>
        <member name="T:HFN.Common.LogMessageInfo">
            <summary>
            Struct containing info on a log message.
            </summary>
        </member>
        <member name="T:HFN.Common.VrReticle">
            <summary>
            Base class for recticles in VR space.
            </summary>
        </member>
        <member name="T:HFN.Common.UnityAnalyticsEventData">
            <summary>
            Convenience class for interacting with Unity Analytics
            </summary>
        </member>
        <member name="T:HFN.Common.UnityAnalyticsManager">
            <summary>
            Wrapper class for sending events through Unity Analytics.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityAnalyticsManager.CreateSystemInfoEvent">
            <summary>
            Creates an event detailing system info such as OS, processor type, and graphics card values.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityAnalyticsManager.CreateEvent(System.String)">
            <summary>
            Create a custom event that only passes an event name.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityAnalyticsManager.CreateEvent(System.String,UnityEngine.Vector3)">
            <summary>
            Create a custom event that passes an event name and position.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityAnalyticsManager.CreateEvent(System.String,HFN.Common.UnityAnalyticsEventData[])">
            <summary>
            Create a custom event that passes an event name and event data.
            </summary>
        </member>
        <member name="M:HFN.Common.UnityAnalyticsManager.CreateEvent(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a custom event that passes an event name and event data.
            </summary>
        </member>
        <member name="T:HFN.Common.AttributeUtility">
            <summary>
            Contains utility methods for accessing attributes on classes.
            </summary>
        </member>
        <member name="M:HFN.Common.AttributeUtility.RequiresComponent(UnityEngine.Component,System.Type)">
            <summary>
            Returns true if the given <see cref="T:UnityEngine.Component"/> requires a component of the specified type.
            </summary>
            <param name="component">The <see cref="T:UnityEngine.Component"/> to check for required components.</param>
            <param name="requiredType">The type for the component that is required.</param>
        </member>
        <member name="M:HFN.Common.AttributeUtility.RequiresComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            Returns true if the given <see cref="T:UnityEngine.GameObject"/> has any components that require a component of the specified type.
            </summary>
            <param name="target">The <see cref="T:UnityEngine.GameObject"/> to check required components on.</param>
            <param name="requiredType">The type for the component that is required.</param>
        </member>
        <member name="M:HFN.Common.AttributeUtility.RequiresComponent(System.Type,System.Type)">
            <summary>
            Returns true if the given <see cref="T:System.Type"/> requires a component of the specified type.
            </summary>
            <param name="componentType">The <see cref="T:System.Type"/> to check for required components.</param>
            <param name="requiredType">The type for the component that is required.</param>
        </member>
        <member name="M:HFN.Common.AttributeUtility.GetComponentDependency(UnityEngine.GameObject,System.Type)">
            <summary>
            Returns the first <see cref="T:UnityEngine.Component"/> on a <see cref="T:UnityEngine.GameObject"/> that requires a component of the specified type.
            </summary>
            <param name="target">The <see cref="T:UnityEngine.GameObject"/> to check required components on.</param>
            <param name="requiredType">The type for the component that is required.</param>
        </member>
        <member name="T:HFN.Common.ComparisonType">
            <summary>
            Enum to use when determining how two values should be compared.
            Mostly used in custom editor scripting.
            </summary>
        </member>
        <member name="F:HFN.Common.ComparisonType.Equals">
            <summary>
            Values are equal.
            </summary>
        </member>
        <member name="F:HFN.Common.ComparisonType.NotEqual">
            <summary>
            Values are not equal.
            </summary>
        </member>
        <member name="F:HFN.Common.ComparisonType.GreaterThan">
            <summary>
            Specified value is greater than a target value.
            </summary>
        </member>
        <member name="F:HFN.Common.ComparisonType.LessThan">
            <summary>
            Specified value is less than a target value.
            </summary>
        </member>
        <member name="F:HFN.Common.ComparisonType.GreaterOrEqual">
            <summary>
            Specified value is greater than or equal to a target value.
            </summary>
        </member>
        <member name="F:HFN.Common.ComparisonType.LessOrEqual">
            <summary>
            Specified value is less than or equal to a target value.
            </summary>
        </member>
        <member name="T:HFN.Common.CreateAssetMenuUtility">
            <summary>
            Utility class for <see cref="T:UnityEngine.CreateAssetMenuAttribute"/> orders.
            </summary>
        </member>
        <member name="T:HFN.Common.DropListAttribute">
            <summary>
            Base type for attributes that can modify <see cref="T:HFN.Common.DropList`1"/> appearance.
            </summary>
        </member>
        <member name="T:HFN.Common.DropListColorAttribute">
            <summary>
            Attribute to set <see cref="T:HFN.Common.DropList`1"/> drop area colors.
            </summary>
        </member>
        <member name="F:HFN.Common.DropListColorAttribute.color">
            <summary>
            The color to draw the drop area as.
            </summary>
        </member>
        <member name="M:HFN.Common.DropListColorAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Attribute to set <see cref="T:HFN.Common.DropList`1"/> drop area colors.
            </summary>
        </member>
        <member name="T:HFN.Common.DropListHeightAttribute">
            <summary>
            Attribute to adjust the height of a <see cref="T:HFN.Common.DropList`1"/> drop area.
            </summary>
        </member>
        <member name="F:HFN.Common.DropListHeightAttribute.height">
            <summary>
            The height to draw the drop area at.
            </summary>
        </member>
        <member name="M:HFN.Common.DropListHeightAttribute.#ctor(System.Single)">
            <summary>
            Attribute to adjust the height of a <see cref="T:HFN.Common.DropList`1"/> drop area.
            </summary>
            <param name="height">The height to draw the drop area at.</param>
        </member>
        <member name="T:HFN.Common.DropListHiddenAttribute">
            <summary>
            Attribute used to not display the list in a <see cref="T:HFN.Common.DropList`1"/>.
            Useful when you want to have the drop field shown, while handling drawing the actual list yourself.
            </summary>
        </member>
        <member name="M:HFN.Common.DropListHiddenAttribute.#ctor">
            <summary>
            Attribute used to not display the list in a <see cref="T:HFN.Common.DropList`1"/>.
            Useful when you want to have the drop field shown, while handling drawing the actual list yourself.
            </summary>
        </member>
        <member name="T:HFN.Common.DropListMessageAttribute">
            <summary>
            Attribute to adjust the message displayed in a <see cref="T:HFN.Common.DropList`1"/> drop area.
            </summary>
        </member>
        <member name="F:HFN.Common.DropListMessageAttribute.message">
            <summary>
            The message to display inside the drop area.
            </summary>
        </member>
        <member name="F:HFN.Common.DropListMessageAttribute.tooltip">
            <summary>
            Tooltip to display when hovering over the drop area.
            </summary>
        </member>
        <member name="F:HFN.Common.DropListMessageAttribute.content">
            <summary>
            <see cref="T:UnityEngine.GUIContent"/> populated by the message and tooltip values.
            </summary>
        </member>
        <member name="M:HFN.Common.DropListMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute to adjust the message displayed in a <see cref="T:HFN.Common.DropList`1"/> drop area.
            </summary>
            <param name="message">The message to display inside the drop area.</param>
        </member>
        <member name="T:HFN.Common.DropList`1">
            <summary>
            Class to derive from to make a list with a drag area in the inspector. Derived class must be marked with <see cref="T:System.SerializableAttribute"/>.
            </summary>
            <typeparam name="T">The <see cref="T:UnityEngine.Object"/> derived type of the list.</typeparam>
        </member>
        <member name="P:HFN.Common.DropList`1.Count">
            <summary>
            The number of elements contained by the list.
            </summary>
        </member>
        <member name="T:HFN.Common.MaterialValueType">
            <summary>
            Enum of the possible value types contained in materials.
            </summary>
        </member>
        <member name="T:HFN.Common.WaitForFrames">
            <summary>
            Custom Yield Instruction for delaying a coroutine until the specified number of frames has passed.
            </summary>
        </member>
        <member name="M:HFN.Common.WaitForFrames.#ctor(System.Int32)">
            <summary>
            Custom Yield Instruction for delaying a coroutine until the specified number of frames has passed.
            </summary>
        </member>
        <member name="T:HFN.CommonEditor.Comment">
            <summary>
            Utility class that displays a comment in the inspector.
            Mostly useful in example scenes.
            </summary>
            \image html Utility/Comment01.png "Standard Comment inspector"
            \image html Utility/Comment02.png "Editing Comment inspector"
        </member>
        <member name="F:HFN.CommonEditor.Comment.message">
            <summary>
            The text to show for this comment.
            </summary>
        </member>
        <member name="F:HFN.CommonEditor.Comment.color">
            <summary>
            The color of the shown text.
            </summary>
        </member>
        <member name="T:HFN.CommonEditor.CommentAsset">
            <summary>
            Utility class for displaying comments.
            Mostly useful to write down ideas on the fly.
            </summary>
            \image html Utility/CommentAsset01.png "Standard CommentAsset inspector"
            \image html Utility/CommentAsset02.png "Editing CommentAsset inspector"
        </member>
        <member name="F:HFN.CommonEditor.CommentAsset.CommentData.title">
            <summary>
            Text shown on the header for this comment.
            </summary>
        </member>
        <member name="F:HFN.CommonEditor.CommentAsset.CommentData.message">
            <summary>
            The text to show for this comment.
            </summary>
        </member>
        <member name="F:HFN.CommonEditor.CommentAsset.CommentData.color">
            <summary>
            The color of the shown text.
            </summary>
        </member>
    </members>
</doc>
